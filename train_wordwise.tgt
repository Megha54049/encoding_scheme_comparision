#include <stdio.h> @ @ void readArray ( int a [ ] , int size ) { @ int i ; @ for ( i = 0 ; i < size ; i++ ) { @ ; @ } @ } @ int findElement ( int a [ ] , int size , int item ) { @ int i , pos = -1 ; @ for ( i = 0 ; i < size ; i++ ) { @ if ( a [ i ] == item ) { @ pos = i ; @ break ; @ } @ } @ return pos ; @ } @ int entry_point ( int ( *n ) , int ( *item ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int arr [ 20 ] ; @ int pos ; @ ; @ ; @ readArray ( arr , ( *n ) ) ; @ ; @ pos = findElement ( arr , ( *n ) , ( *item ) ) ; @ if ( pos == -1 ) { @ ( *temptemp1 ) = ( *item ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *item ) ; @ ( *temptemp3 ) = pos ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *marks ) ) { @ int pass = 1 ; @ int i ; @ ; @ for ( i = 0 ; i < 5 ; i++ ) { @ if ( marks [ i ] <= 32 ) pass = 0 ; @ } @ if ( pass ) @ ; @ else @ ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ if ( ( *number ) % 2 == 0 ) { @ { @ ( *temptemp1 ) = ( *number ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *number ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *dimension ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ float temp = ( *dimension ) * ( *dimension ) ; @ result = temp * 6 ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void convert ( int , int ) ; @ int entry_point ( int ( *num ) ) { @ ; @ ; @ convert ( ( *num ) , 2 ) ; @ ; @ ; @ convert ( ( *num ) , 8 ) ; @ ; @ ; @ convert ( ( *num ) , 16 ) ; @ ; @ return 0 ; @ } @ void convert ( int num , int base ) { @ int rem = num % base ; @ if ( num == 0 ) return ; @ convert ( num / base , base ) ; @ if ( rem < 10 ) @ ; @ else @ ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int flag [ 100 ] ; @ int freq [ 100 ] ; @ int j ; @ int i ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ freq [ i ] = 1 ; @ flag [ i ] = 0 ; @ } @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ for ( j = i + 1 ; j < ( *size ) ; j++ ) { @ if ( arr [ i ] == arr [ j ] ) { @ freq [ i ] ++ ; @ flag [ j ] = 1 ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ if ( flag [ i ] == 0 ) { @ { @ ( *temptemp1 ) = arr [ i ] ; @ ( *temptemp2 ) = freq [ i ] ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *bs ) , float ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) , float ( *temptemp5 ) ) { @ float gs ; @ float cv ; @ float da ; @ float hra ; @ ; @ if ( ( *bs ) >= 5000 ) { @ da = 110 * ( *bs ) / 100 ; @ hra = 20 * ( *bs ) / 100 ; @ cv = 500 ; @ } else if ( ( *bs ) >= 3000 && ( *bs ) < 5000 ) { @ da = 100 * ( *bs ) / 100 ; @ hra = 15 * ( *bs ) / 100 ; @ cv = 400 ; @ } else if ( ( *bs ) < 3000 ) { @ da = 90 * ( *bs ) / 100 ; @ hra = 10 * ( *bs ) / 100 ; @ cv = 300 ; @ } @ gs = ( *bs ) + da + hra + cv ; @ { @ ( *temptemp1 ) = ( *bs ) ; @ ; @ } @ { @ ( *temptemp2 ) = da ; @ ; @ } @ { @ ( *temptemp3 ) = hra ; @ ; @ } @ { @ ( *temptemp4 ) = cv ; @ ; @ } @ { @ ( *temptemp5 ) = gs ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ float cubeRoot ; @ int count ; @ ; @ cubeRoot = pow ( ( *limit ) , 1.0 / 3.0 ) ; @ count = ( int ) cubeRoot ; @ ; @ { @ ( *temptemp1 ) = ( *limit ) ; @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int modifiedNum = ( ( ( *num ) - 1 ) * 2 ) + 1 ; @ if ( modifiedNum != ( *num ) ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *sideLength ) , float ( *temptemp1 ) ) { @ float sides = 5.0 ; @ ; @ float totalPerimeter = sides * ( *sideLength ) ; @ ; @ { @ ( *temptemp1 ) = totalPerimeter ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) , float ( *temptemp3 ) , float ( *temptemp4 ) , @ float ( *temptemp5 ) , float ( *temptemp6 ) ) { @ float imagPart ; @ float realPart ; @ float discriminant ; @ ; @ ; @ ; @ discriminant = ( *b ) * ( *b ) - 4 * ( *a ) * ( *c ) ; @ realPart = - ( *b ) / ( 2 * ( *a ) ) ; @ if ( discriminant >= 0 ) { @ imagPart = sqrt ( fabs ( discriminant ) ) / ( 2 * ( *a ) ) ; @ { @ ( *temptemp1 ) = realPart + imagPart ; @ ; @ } @ { @ ( *temptemp2 ) = realPart - imagPart ; @ ; @ } @ } else { @ imagPart = sqrt ( -discriminant ) / ( 2 * ( *a ) ) ; @ { @ ( *temptemp3 ) = realPart ; @ ( *temptemp4 ) = imagPart ; @ ; @ } @ { @ ( *temptemp5 ) = realPart ; @ ( *temptemp6 ) = imagPart ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) ) { @ int maxCols ; @ ; @ if ( ( *maxRows ) < 1 ) { @ ; @ exit ( 0 ) ; @ } @ maxCols = ( *maxRows ) * 2 - 1 ; @ puts ( "\n--------------------------------------------\n" ) ; @ int spacesInCurrentRow ; @ int colsInCurrentRow ; @ int row = 1 ; @ { @ spacesInCurrentRow = ( row - 1 ) * 2 ; @ colsInCurrentRow = maxCols - spacesInCurrentRow ; @ int space = 1 ; @ ; @ int col = 1 ; @ ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *dividend ) , int ( *divisor ) , int ( *temptemp1 ) ) { @ float divisionResult ; @ ; @ ; @ divisionResult = ( float ) ( *dividend ) / ( *divisor ) ; @ int floorValue = floor ( divisionResult ) ; @ int remainder = ( *dividend ) - ( floorValue * ( *divisor ) ) ; @ { @ ( *temptemp1 ) = remainder ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int smallest ; @ int largest ; @ ; @ ; @ ; @ largest = @ ( ( *a ) > ( *b ) ) ? ( ( *a ) > ( *c ) ? ( *a ) : ( *c ) ) : ( ( *b ) > ( *c ) ? ( *b ) : ( *c ) ) ; @ smallest = @ ( ( *a ) < ( *b ) ) ? ( ( *a ) < ( *c ) ? ( *a ) : ( *c ) ) : ( ( *b ) < ( *c ) ? ( *b ) : ( *c ) ) ; @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ { @ ( *temptemp2 ) = smallest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *kmph ) , float ( *temptemp1 ) ) { @ float conversionFactor ; @ float knots ; @ conversionFactor = 1.852 ; @ ; @ knots = ( *kmph ) / conversionFactor ; @ ; @ { @ ( *temptemp1 ) = knots ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int factorial = 1 ; @ ; @ if ( ( *n ) < 0 ) { @ ; @ } else { @ int i = 1 ; @ while ( i <= ( *n ) ) { @ factorial *= i ; @ i++ ; @ } @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = factorial ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ result = ~ ( *a ) ; @ result = result & 0xFF ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) ) { @ int min ; @ int hcf ; @ ; @ ; @ min = ( ( *a ) < ( *b ) ) ? ( *a ) : ( *b ) ; @ for ( hcf = min ; hcf >= 1 ; hcf-- ) { @ if ( ( *a ) % hcf == 0 && ( *b ) % hcf == 0 ) { @ break ; @ } @ } @ { @ ( *temptemp1 ) = hcf ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) ) { @ ; @ ; @ ; @ if ( ( *a ) >= ( *b ) ) { @ if ( ( *a ) >= ( *c ) ) { @ ; @ } else { @ ; @ } @ } else { @ if ( ( *b ) >= ( *c ) ) { @ ; @ } else { @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , char ( *temptemp2 ) ) { @ ; @ int isDivisible = ( *number ) % 5 ; @ int result = isDivisible ? ( *number ) + 2 : ( *number ) + 1 ; @ char *message = isDivisible ? "is not divisible by 5." : "is divisible by 5." ; @ { @ ( *temptemp1 ) = result ; @ ( *temptemp2 ) = message ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *x ) , int ( *temptemp1 ) ) { @ int sum ; @ ; @ sum = ( *x ) + 5 ; @ ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float pi = 3.1416 ; @ float area ; @ ; @ area = pi * ( *radius ) * ( *radius ) ; @ ; @ { @ ( *temptemp1 ) = ( *radius ) ; @ ; @ } ; @ ; @ { @ ( *temptemp2 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *grade ) , float ( *temptemp1 ) ) { @ int totalCount = 0 ; @ int passCount = 0 ; @ float passPercentage ; @ while ( 1 ) { @ ; @ if ( ( *grade ) == -1 ) break ; @ if ( ( *grade ) < 0 || ( *grade ) > 100 ) { @ ; @ continue ; @ } @ if ( ( *grade ) >= 70 ) passCount++ ; @ totalCount++ ; @ } @ passPercentage = totalCount > 0 ? ( float ) passCount / totalCount * 100 : 0 ; @ { @ ( *temptemp1 ) = passPercentage ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *gradians ) , float ( *temptemp1 ) ) { @ float radians ; @ ; @ radians = ( *gradians ) * ( 3.14 / 200.0 ) ; @ { @ ( *temptemp1 ) = radians ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *height ) , @ float ( *temptemp1 ) ) { @ float surfaceArea ; @ ; @ surfaceArea = 2 * ( ( ( *length ) * ( *width ) ) + ( ( *width ) * ( *height ) ) + @ ( ( *height ) * ( *length ) ) ) ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *e ) , @ float ( *temptemp1 ) ) { @ float result ; @ ; @ result = ( ( *a ) + ( *b ) + ( *c ) ) - ( ( *d ) + ( *e ) ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) ) { @ int maxCols ; @ ; @ if ( ( *maxRows ) < 1 ) { @ ; @ exit ( 0 ) ; @ } @ maxCols = ( *maxRows ) & 1 ? ( *maxRows ) : ( ( *maxRows ) += 1 ) ; @ puts ( "\n--------------------------------------------\n" ) ; @ int row = 1 ; @ { @ int col = 1 ; @ { @ if ( col == ( maxCols + 1 ) / 2 || row == ( maxCols + 1 ) / 2 ) @ ; @ else @ ; @ } ; @ } ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *x ) , int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int result ; @ ; @ ; @ result = pow ( ( double ) ( *x ) , ( *n ) ) ; @ { @ ( *temptemp1 ) = ( *x ) ; @ ( *temptemp2 ) = ( *n ) ; @ ( *temptemp3 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <string.h> @ @ int entry_point ( char ( *user ) , int ( *input ) ) { @ int password = 1234 ; @ char username [ ] = "admin" ; @ ; @ ; @ if ( strcmp ( ( *user ) , username ) == 0 ) { @ if ( ( *input ) == password ) { @ ; @ } else { @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *km ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float mile ; @ ; @ mile = ( *km ) / 1.609344 ; @ { @ ( *temptemp1 ) = ( *km ) ; @ ( *temptemp2 ) = mile ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *gender ) , int ( *age ) ) { @ ; @ ; @ if ( ( *gender ) == 'M' || ( *gender ) == 'm' ) { @ if ( ( *age ) < 18 ) { @ ; @ } else { @ ; @ } @ } else if ( ( *gender ) == 'F' || ( *gender ) == 'f' ) { @ if ( ( *age ) < 18 ) { @ ; @ } else { @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int diff ; @ ; @ ; @ if ( ( *a ) > ( *b ) ) @ diff = ( *a ) - ( *b ) ; @ else @ diff = ( *b ) - ( *a ) ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = diff ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void fun1 ( void ) { @ int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; @ int i = 0 , sum = 0 ; @ for ( i = 0 ; i < 6 ; i++ ) { @ sum = sum + array [ i ] ; @ } ; @ } @ int entry_point ( ) { @ fun1 ( ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int hcf ; @ ; @ ; @ for ( hcf = ( ( *a ) < ( *b ) ) ? ( *a ) : ( *b ) ; hcf > 0 ; hcf-- ) { @ if ( ( *a ) % hcf == 0 && ( *b ) % hcf == 0 ) break ; @ } @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = hcf ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *text ) , char ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int i ; @ int countS ; @ int countU ; @ int countL ; @ ; @ { @ ( *temptemp1 ) = ( *text ) ; @ ; @ } @ countL = countU = countS = 0 ; @ for ( i = 0 ; text [ i ] != '\0' ; i++ ) { @ if ( ( text [ i ] >= 'A' && text [ i ] <= 'Z' ) || @ ( text [ i ] >= 'a' && text [ i ] <= 'z' ) ) { @ if ( ( text [ i ] >= 'A' && text [ i ] <= 'Z' ) ) { @ countU++ ; @ } else { @ countL++ ; @ } @ } else { @ countS++ ; @ } @ } @ { @ ( *temptemp2 ) = countU ; @ ; @ } @ { @ ( *temptemp3 ) = countL ; @ ; @ } @ { @ ( *temptemp4 ) = countS ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) , int ( *temptemp1 ) ) { @ int maxCols ; @ ; @ if ( ( *maxRows ) < 1 ) { @ ; @ exit ( 0 ) ; @ } @ maxCols = ( *maxRows ) ; @ puts ( "\n--------------------------------------------\n" ) ; @ int spacesInCurrentRow ; @ int row = 1 ; @ { @ spacesInCurrentRow = row - 1 ; @ int space = 1 ; @ ; @ int col = row ; @ { @ ( *temptemp1 ) = col ; @ ; @ } ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) ) { @ int temp ; @ ; @ ; @ while ( ( *b ) != 0 ) { @ temp = ( *a ) ; @ ( *a ) = ( *b ) ; @ ( *b ) = temp % ( *b ) ; @ } @ { @ ( *temptemp1 ) = ( *a ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) ) { @ int largest ; @ ; @ ; @ ; @ if ( ( ( *a ) >= ( *b ) && ( *a ) >= ( *c ) ) ) { @ largest = ( *a ) ; @ } else if ( ( ( *b ) >= ( *a ) && ( *b ) >= ( *c ) ) ) { @ largest = ( *b ) ; @ } else { @ largest = ( *c ) ; @ } @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *number1 ) , int ( *number2 ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) ) { @ int j ; @ int i ; @ int temp ; @ int flag ; @ int count = 0 ; @ ; @ if ( ( *number2 ) < 2 ) { @ { @ ( *temptemp1 ) = ( *number2 ) ; @ ; @ } @ } ; @ temp = ( *number1 ) ; @ if ( ( *number1 ) % 2 == 0 ) { @ ( *number1 ) = ( *number1 ) + 1 ; @ } @ for ( i = ( *number1 ) ; i <= ( *number2 ) ; i = i + 2 ) { @ flag = 0 ; @ for ( j = 2 ; j <= i / 2 ; j++ ) { @ if ( ( i % j ) == 0 ) { @ flag = 1 ; @ break ; @ } @ } @ if ( flag == 0 ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ count = count + 1 ; @ } @ } @ { @ ( *temptemp3 ) = temp ; @ ( *temptemp4 ) = ( *number2 ) ; @ ( *temptemp5 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int result ; @ int multiplier ; @ int base ; @ for ( base = 1 ; base <= 10 ; base++ ) { @ for ( multiplier = 1 ; multiplier <= base ; multiplier++ ) { @ result = base * multiplier ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int i = 1 ; @ int square = 1 ; @ while ( square <= ( *num ) ) { @ if ( square == ( *num ) ) { @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ return 0 ; @ } @ i++ ; @ square = i * i ; @ } @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , float ( *temptemp2 ) , int ( *temptemp3 ) , @ float ( *temptemp4 ) ) { @ float fact = 1 ; @ ; @ int i = 1 ; @ do { @ fact *= i ; @ i++ ; @ } while ( i <= ( *n ) ) ; @ float factGeneral = fact ; @ float factScientific = fact ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = factGeneral ; @ ; @ } @ { @ ( *temptemp3 ) = ( *n ) ; @ ( *temptemp4 ) = factScientific ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *sideLength ) , float ( *temptemp1 ) ) { @ float volume ; @ float square ; @ ; @ square = ( *sideLength ) * ( *sideLength ) ; @ volume = square * ( *sideLength ) ; @ ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *shift ) , int ( *temptemp1 ) ) { @ ; @ ; @ int result = ( *a ) << ( *shift ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *gender ) ) { @ ; @ if ( ( *gender ) == 'M' || ( *gender ) == 'm' ) { @ ; @ } else if ( ( *gender ) == 'F' || ( *gender ) == 'f' ) { @ ; @ } else { @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int i ; @ int smallest ; @ int largest ; @ ; @ for ( i = 0 ; i < 10 ; i++ ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ } @ largest = smallest = arr [ 0 ] ; @ for ( i = 1 ; i < 10 ; i++ ) { @ if ( arr [ i ] > largest ) { @ largest = arr [ i ] ; @ } @ if ( arr [ i ] < smallest ) { @ smallest = arr [ i ] ; @ } @ } @ { @ ( *temptemp2 ) = largest ; @ ; @ } @ { @ ( *temptemp3 ) = smallest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *p ) , float ( *q ) , float ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) ) { @ ; @ ; @ { @ ( *temptemp1 ) = ( *p ) ; @ ( *temptemp2 ) = ( *q ) ; @ ; @ } @ if ( ( *p ) != 0 && ( *q ) != 0 ) { @ ( *p ) = ( *p ) * ( *q ) ; @ ( *q ) = ( *p ) / ( *q ) ; @ ( *p ) = ( *p ) / ( *q ) ; @ } else { @ ; @ } @ { @ ( *temptemp3 ) = ( *p ) ; @ ( *temptemp4 ) = ( *q ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int loop ; @ int sum ; @ ; @ sum = 0 ; @ for ( loop = 1 ; loop < ( *num ) ; loop++ ) { @ if ( ( *num ) % loop == 0 ) sum += loop ; @ } @ if ( sum == ( *num ) ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *inputValue ) , int ( *temptemp1 ) ) { @ int resultShift ; @ ; @ resultShift = ( *inputValue ) << 1 ; @ ; @ { @ ( *temptemp1 ) = resultShift ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *ch ) , char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ ; @ switch ( ( *ch ) ) { @ case 'a': @ case 'A': @ case 'e': @ case 'E': @ case 'i': @ case 'I': @ case 'o': @ case 'O': @ case 'u': @ case 'U': { @ ( *temptemp1 ) = ( *ch ) ; @ ; @ } break ; @ default: { @ ( *temptemp2 ) = ( *ch ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *l ) , float ( *w ) , float ( *h ) , float ( *temptemp1 ) ) { @ float vol ; @ float area ; @ ; @ ; @ ; @ area = ( *l ) * ( *w ) ; @ vol = ( area * ( *h ) ) / 3.0f ; @ ; @ { @ ( *temptemp1 ) = vol ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int sum ; @ int j ; @ int i ; @ int count = 0 ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ i = 1 ; @ while ( i <= ( *n ) ) { @ sum = 0 ; @ j = 1 ; @ while ( j <= i / 2 ) { @ if ( i % j == 0 ) { @ sum += j ; @ } @ j++ ; @ } @ if ( sum == i ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ count++ ; @ } @ i++ ; @ } @ { @ ( *temptemp3 ) = ( *n ) ; @ ( *temptemp4 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *decimal ) , int ( *temptemp1 ) ) { @ int octal = 0 ; @ int placeValue = 1 ; @ ; @ for ( ; ( *decimal ) > 0 ; ( *decimal ) /= 8 ) { @ octal += ( ( *decimal ) % 8 ) * placeValue ; @ placeValue *= 10 ; @ } @ int result = octal ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float circum ; @ float area ; @ ; @ area = 3.142 * ( *radius ) * ( *radius ) ; @ circum = 2 * 3.142 * ( *radius ) ; @ ; @ float areaResult = area ; @ { @ ( *temptemp1 ) = areaResult ; @ ; @ } ; @ float circumResult = circum ; @ { @ ( *temptemp2 ) = circumResult ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *lim_up ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int n ; @ int prime ; @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *lim_up ) ; @ ; @ } @ for ( n = 1 ; n < ( *lim_up ) ; n++ ) { @ prime = 1 ; @ for ( i = 2 ; i < n ; i++ ) @ if ( n % i == 0 ) { @ prime = 0 ; @ break ; @ } @ if ( prime ) { @ ( *temptemp2 ) = n ; @ ; @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ void arrange ( int , int ) ; @ int array [ 100 ] , array1 [ 100 ] ; @ int i , j , temp , max , count , maxdigits = 0 , c = 0 ; @ void entry_point ( int ( *count ) , int ( *array ) , int ( *temptemp1 ) ) { @ int n = 1 ; @ int t ; @ int k ; @ int t2 ; @ int t1 ; @ ; @ ; @ for ( i = 0 ; i < ( *count ) ; i++ ) { @ array1 [ i ] = array [ i ] ; @ } @ for ( i = 0 ; i < ( *count ) ; i++ ) { @ t = array [ i ] ; @ while ( t > 0 ) { @ c++ ; @ t = t / 10 ; @ } @ if ( maxdigits < c ) maxdigits = c ; @ c = 0 ; @ } @ while ( --maxdigits ) n = n * 10 ; @ for ( i = 0 ; i < ( *count ) ; i++ ) { @ max = array [ i ] / n ; @ t = i ; @ for ( j = i + 1 ; j < ( *count ) ; j++ ) { @ if ( max > ( array [ j ] / n ) ) { @ max = array [ j ] / n ; @ t = j ; @ } @ } @ temp = array1 [ t ] ; @ array1 [ t ] = array1 [ i ] ; @ array1 [ i ] = temp ; @ temp = array [ t ] ; @ array [ t ] = array [ i ] ; @ array [ i ] = temp ; @ } @ while ( n >= 1 ) { @ for ( i = 0 ; i < ( *count ) ; ) { @ t1 = array [ i ] / n ; @ for ( j = i + 1 ; t1 == ( array [ j ] / n ) ; j++ ) @ ; @ arrange ( i , j ) ; @ i = j ; @ } @ n = n / 10 ; @ } ; @ for ( i = 0 ; i < ( *count ) ; i++ ) { @ ( *temptemp1 ) = array1 [ i ] ; @ ; @ } ; @ } @ void arrange ( int k , int n ) { @ for ( i = k ; i < n - 1 ; i++ ) { @ for ( j = i + 1 ; j < n ; j++ ) { @ if ( array1 [ i ] > array1 [ j ] ) { @ temp = array1 [ i ] ; @ array1 [ i ] = array1 [ j ] ; @ array1 [ j ] = temp ; @ temp = ( array [ i ] % 10 ) ; @ array [ i ] = ( array [ j ] % 10 ) ; @ array [ j ] = temp ; @ } @ } @ } @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *sides ) , float ( *sideLength ) , float ( *temptemp1 ) ) { @ float tanValue ; @ float polygonArea ; @ ; @ ; @ tanValue = tan ( M_PI / ( *sides ) ) ; @ polygonArea = ( ( *sides ) * ( *sideLength ) * ( *sideLength ) ) / ( 4 * tanValue ) ; @ ; @ { @ ( *temptemp1 ) = polygonArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *inputSpeed ) , float ( *temptemp1 ) ) { @ float convertedSpeed ; @ ; @ convertedSpeed = ( *inputSpeed ) * 0.621371 ; @ { @ ( *temptemp1 ) = convertedSpeed ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float volume ; @ float pi = 3.14159 ; @ ; @ volume = ( 4.0 / 3.0 ) * pi * ( ( *radius ) * ( *radius ) * ( *radius ) ) ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ char buff [ 3 ] [ 50 ] = { "Hello function" , "How are you?" , "Catch some strings" } ; @ void Strfun ( int count ) { @ int i ; @ for ( i = 0 ; i < count ; i++ ) { @ ; @ puts ( buff [ i ] ) ; @ } @ } @ int entry_point ( ) { @ Strfun ( 3 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ void entry_point ( int ( *num ) , int ( *array ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int swapped ; @ int temp ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ } ; @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ { @ ( *temptemp1 ) = array [ i ] ; @ ; @ } @ } @ for ( i = 0 ; i < ( *num ) - 1 ; i++ ) { @ swapped = 0 ; @ j = 0 ; @ while ( j < ( *num ) - i - 1 ) { @ if ( array [ j ] > array [ j + 1 ] ) { @ temp = array [ j ] ; @ array [ j ] = array [ j + 1 ] ; @ array [ j + 1 ] = temp ; @ swapped = 1 ; @ } @ j++ ; @ } @ if ( swapped == 0 ) break ; @ } ; @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ { @ ( *temptemp2 ) = array [ i ] ; @ ; @ } @ } @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int sourceArray [ 10 ] = { 5 , 10 , 15 , 20 , 25 , 30 , 35 , 40 , 45 , 50 } ; @ int destinationArray [ 10 ] ; @ int k ; @ ; @ for ( k = 9 ; k >= 0 ; k-- ) { @ destinationArray [ 9 - k ] = sourceArray [ k ] ; @ } @ for ( k = 0 ; k < 10 ; k++ ) { @ { @ ( *temptemp1 ) = k ; @ ( *temptemp2 ) = destinationArray [ k ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *array ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int flag ; @ int temp ; @ int j ; @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) @ for ( i = 0 ; i < ( *n ) - 1 ; i++ ) { @ flag = 0 ; @ for ( j = 0 ; j < ( *n ) - i - 1 ; j++ ) { @ if ( array [ j ] > array [ j + 1 ] ) { @ temp = array [ j ] ; @ array [ j ] = array [ j + 1 ] ; @ array [ j + 1 ] = temp ; @ flag = 1 ; @ } @ } @ if ( flag == 0 ) break ; @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ ( *temptemp2 ) = array [ i ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ if ( ( *number ) % 5 == 0 ) { @ result = ( *number ) + 1 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ result = ( *number ) + 2 ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int fib1 = 0 ; @ int fib2 = 1 ; @ int fibNext = 0 ; @ ; @ ; @ if ( ( *lower ) == 0 ) { @ { @ ( *temptemp1 ) = fib1 ; @ ; @ } @ if ( ( *upper ) == 0 ) return 0 ; @ { @ ( *temptemp2 ) = fib2 ; @ ; @ } @ } else if ( ( *lower ) == 1 ) { @ { @ ( *temptemp3 ) = fib2 ; @ ; @ } @ } @ fibNext = fib1 + fib2 ; @ while ( fibNext <= ( *upper ) ) { @ if ( fibNext >= ( *lower ) ) { @ { @ ( *temptemp4 ) = fibNext ; @ ; @ } @ } @ fib1 = fib2 ; @ fib2 = fibNext ; @ fibNext = fib1 + fib2 ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) ) { @ int largest ; @ ; @ if ( ( *a ) > ( *b ) && ( *a ) > ( *c ) ) @ largest = ( *a ) ; @ else if ( ( *b ) > ( *a ) && ( *b ) > ( *c ) ) @ largest = ( *b ) ; @ else @ largest = ( *c ) ; @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int divisible = ( ( *number ) % 5 == 0 ) ? 1 : 0 ; @ int result = divisible ? ( *number ) + 1 : ( *number ) + 2 ; @ if ( divisible ) { @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int originalArray [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; @ int i ; @ int copyArray [ 10 ] ; @ ; @ for ( i = 0 ; i < 10 ; i++ ) { @ { @ ( *temptemp1 ) = originalArray [ i ] ; @ ; @ } @ } @ for ( i = 0 ; i < 10 ; i++ ) { @ copyArray [ i ] = originalArray [ i ] ; @ } @ for ( i = 0 ; i < 10 ; i++ ) { @ { @ ( *temptemp2 ) = copyArray [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *temptemp1 ) ) { @ float circumference ; @ ; @ ; @ circumference = @ 3.14159265358979323846 * @ ( 3 * ( ( *a ) + ( *b ) ) - sqrt ( ( 3 * ( *a ) + ( *b ) ) * ( ( *a ) + 3 * ( *b ) ) ) ) ; @ { @ ( *temptemp1 ) = circumference ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *dd ) , int ( *mm ) , int ( *yy ) ) { @ int isValidDate = 0 ; @ ; @ if ( ( *yy ) >= 1900 && ( *yy ) <= 9999 ) { @ switch ( ( *mm ) ) { @ case 1: @ case 3: @ case 5: @ case 7: @ case 8: @ case 10: @ case 12: @ isValidDate = ( *dd ) >= 1 && ( *dd ) <= 31 ; @ break ; @ case 4: @ case 6: @ case 9: @ case 11: @ isValidDate = ( *dd ) >= 1 && ( *dd ) <= 30 ; @ break ; @ case 2: @ isValidDate = ( ( *dd ) >= 1 && ( *dd ) <= 28 ) || @ ( ( *dd ) == 29 && ( ( *yy ) % 400 == 0 || @ ( ( *yy ) % 4 == 0 && ( *yy ) % 100 != 0 ) ) ) ; @ break ; @ default: @ isValidDate = 0 ; @ } @ } @ if ( isValidDate ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *searchDigit ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int count = 0 ; @ ; @ ; @ int temp = ( *number ) ; @ do { @ if ( temp % 10 == ( *searchDigit ) ) { @ count++ ; @ } @ temp /= 10 ; @ } while ( temp > 0 ) ; @ { @ ( *temptemp1 ) = ( *searchDigit ) ; @ ( *temptemp2 ) = ( *number ) ; @ ( *temptemp3 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ if ( ( ( *num ) % 7 == 0 ) || ( ( *num ) % 3 == 0 ) ) { @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mm ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float inches ; @ ; @ inches = ( *mm ) / 25.4 ; @ { @ ( *temptemp1 ) = ( *mm ) ; @ ( *temptemp2 ) = inches ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , float ( *temptemp1 ) ) { @ int i = 1 ; @ float sum = 0.0 ; @ ; @ while ( i <= ( *N ) ) { @ sum += 1.0 / i ; @ i++ ; @ } @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) , @ float ( *temptemp6 ) ) { @ int sum ; @ float avg ; @ ; @ ; @ sum = ( *a ) + ( *b ) ; @ avg = ( float ) ( ( *a ) + ( *b ) ) / 2 ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = sum ; @ ; @ } @ { @ ( *temptemp4 ) = ( *a ) ; @ ( *temptemp5 ) = ( *b ) ; @ ( *temptemp6 ) = avg ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ ; @ ; @ ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ int c = 0 ; @ int b = 2 ; @ int a = 1 ; @ if ( a<b , b> c ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float radiusCubed ; @ float volume ; @ ; @ radiusCubed = ( *radius ) * ( *radius ) * ( *radius ) ; @ volume = ( 4.0f / 3.0f ) * M_PI * radiusCubed ; @ ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *lower ) ; @ ( *temptemp2 ) = ( *upper ) ; @ ; @ } @ for ( i = ( *lower ) ; i <= ( *upper ) ; i++ ) { @ int remainder ; @ int n = 0 ; @ int sum = 0 ; @ int temp = i ; @ while ( temp > 0 ) { @ temp /= 10 ; @ n++ ; @ } @ temp = i ; @ while ( temp > 0 ) { @ remainder = temp % 10 ; @ sum += pow ( remainder , n ) ; @ temp /= 10 ; @ } @ if ( sum == i ) { @ { @ ( *temptemp3 ) = i ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , float ( *temptemp1 ) ) { @ int i = 1 ; @ float sum = 0.0 ; @ ; @ do { @ sum += 1.0 / i ; @ i++ ; @ } while ( i <= ( *N ) ) ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *start ) , int ( *end ) , int ( *temptemp1 ) ) { @ int sum ; @ int j ; @ int i ; @ int count ; @ ; @ ; @ for ( i = ( *start ) ; i <= ( *end ) ; i++ ) { @ sum = 0 ; @ for ( j = 1 ; j <= i / 2 ; j++ ) { @ if ( i % j == 0 ) { @ sum = sum + j ; @ } @ } @ if ( sum == i && i != 0 ) { @ count = count + 1 ; @ } @ } @ { @ ( *temptemp1 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *m ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float y ; @ ; @ y = ( *m ) * 1.09 ; @ { @ ( *temptemp1 ) = ( *m ) ; @ ( *temptemp2 ) = y ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int queue [ 50 ] ; @ int rear = -1 ; @ int front = -1 ; @ void enqueue ( int value ) { @ if ( rear < 50 - 1 ) { @ if ( front == -1 ) front = 0 ; @ rear++ ; @ queue [ rear ] = value ; @ ; @ } else { @ ; @ } @ } @ void dequeue ( ) { @ if ( front == -1 || front > rear ) { @ ; @ } else { @ ; @ front++ ; @ } @ } @ void showQueue ( ) { @ if ( front == -1 ) { @ ; @ } else { @ ; @ for ( int i = front ; i <= rear ; i++ ) { @ ; @ } ; @ } @ } @ int entry_point ( int ( *choice ) , int ( *value ) ) { @ do { @ ; @ switch ( ( *choice ) ) { @ case 1: ; @ enqueue ( ( *value ) ) ; @ break ; @ case 2: @ dequeue ( ) ; @ break ; @ case 3: @ showQueue ( ) ; @ break ; @ case 4: ; @ break ; @ default: ; @ } @ } while ( ( *choice ) != 4 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ int j ; @ int i ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *n ) - 1 ; i++ ) { @ for ( j = i + 1 ; j < ( *n ) ; j++ ) { @ if ( arr [ i ] == arr [ j ] ) { @ count++ ; @ break ; @ } @ } @ } @ { @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ int dig ; @ int revNumber = 0 ; @ ; @ for ( ; ( *n ) > 0 ; ( *n ) /= 10 ) { @ dig = ( *n ) % 10 ; @ revNumber = revNumber * 10 + dig ; @ } ; @ { @ ( *temptemp1 ) = revNumber ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *height ) , @ float ( *temptemp1 ) ) { @ float totalEdgeLength ; @ ; @ totalEdgeLength = 4 * ( ( *length ) + ( *width ) + ( *height ) ) ; @ ; @ { @ ( *temptemp1 ) = totalEdgeLength ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *count ) , int ( *nums ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int y ; @ int x ; @ int temp ; @ ; @ for ( x = 0 ; x < ( *count ) ; x++ ) { @ { @ ( *temptemp1 ) = x + 1 ; @ ; @ } @ } @ for ( x = 1 ; x < ( *count ) ; x++ ) { @ temp = nums [ x ] ; @ for ( y = x ; y > 0 && nums [ y - 1 ] > temp ; y-- ) { @ nums [ y ] = nums [ y - 1 ] ; @ } @ nums [ y ] = temp ; @ } ; @ for ( x = 0 ; x < ( *count ) ; x++ ) { @ { @ ( *temptemp2 ) = nums [ x ] ; @ ; @ } @ } ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int isTriangular ( int num ) { @ int n ; @ if ( num < 0 ) return 0 ; @ n = ( -1 + sqrt ( 1 + 8 * num ) ) / 2 ; @ return n == ( int ) n ; @ } @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int num ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *lower ) ; @ ( *temptemp2 ) = ( *upper ) ; @ ; @ } @ for ( num = ( *lower ) ; num <= ( *upper ) ; num++ ) { @ if ( isTriangular ( num ) ) { @ { @ ( *temptemp3 ) = num ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *e ) , @ float ( *temptemp1 ) ) { @ float result ; @ ; @ result = ( *a ) + ( *b ) - ( *c ) - ( *d ) - ( *e ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int diff ; @ ; @ ; @ diff = abs ( ( *a ) - ( *b ) ) ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = diff ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *kilometers ) , int ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float miles ; @ ; @ miles = ( *kilometers ) * 0.621371 ; @ { @ ( *temptemp1 ) = ( *kilometers ) ; @ ; @ } @ { @ ( *temptemp2 ) = miles ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void printUpperCase ( ) { @ char ch = 'A' ; @ ; @ while ( ch <= 'Z' ) { @ ; @ ch++ ; @ } ; @ } @ void printLowerCase ( ) { @ char ch = 'a' ; @ ; @ while ( ch <= 'z' ) { @ ; @ ch++ ; @ } ; @ } @ int entry_point ( ) { @ printUpperCase ( ) ; @ ; @ printLowerCase ( ) ; @ return 0 ; @ }
#include <stdio.h> @ @ char buff [ 20 ] = "Hello Function" ; @ void Strfun ( ) { @ ; @ ; @ } @ int entry_point ( ) { @ Strfun ( ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , unsigned long int ( *temptemp1 ) ) { @ unsigned long sum ; @ ; @ sum = ( ( *N ) * ( ( *N ) + 1 ) * ( 2 * ( *N ) + 1 ) ) / 6 ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float coefficient ; @ float area ; @ ; @ coefficient = 2 * ( 1 + sqrt ( 2 ) ) ; @ area = ( *side ) * ( *side ) ; @ area *= coefficient ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) ) { @ ; @ ; @ while ( ( *a ) != ( *b ) ) { @ if ( ( *a ) > ( *b ) ) { @ ( *a ) = ( *a ) - ( *b ) ; @ } else { @ ( *b ) = ( *b ) - ( *a ) ; @ } @ } @ { @ ( *temptemp1 ) = ( *a ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *num2 ) , char ( *ch ) , int ( *temptemp1 ) , @ char ( *temptemp2 ) , int ( *temptemp3 ) , float ( *temptemp4 ) ) { @ float result ; @ ; @ ; @ ; @ result = 0 ; @ switch ( ( *ch ) ) { @ case '+': @ result = ( *num1 ) + ( *num2 ) ; @ break ; @ case '-': @ result = ( *num1 ) - ( *num2 ) ; @ break ; @ case '*': @ result = ( *num1 ) * ( *num2 ) ; @ break ; @ case '/': @ result = ( float ) ( *num1 ) / ( float ) ( *num2 ) ; @ break ; @ case '%': @ result = ( *num1 ) % ( *num2 ) ; @ break ; @ default: ; @ } @ { @ ( *temptemp1 ) = ( *num1 ) ; @ ( *temptemp2 ) = ( *ch ) ; @ ( *temptemp3 ) = ( *num2 ) ; @ ( *temptemp4 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mph ) , float ( *temptemp1 ) ) { @ float knots ; @ ; @ ; @ knots = ( *mph ) * 0.868976f ; @ { @ ( *temptemp1 ) = knots ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *name ) , int ( *age ) , float ( *temptemp1 ) ) { @ float discount = 0.7f ; @ float price = 600.0f ; @ ; @ ; @ if ( ( *age ) < 6 || ( *age ) >= 60 ) { @ price *= discount ; @ ; @ } ; @ { @ ( *temptemp1 ) = price ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ int cube = 1 ; @ int i ; @ ; @ for ( i = 1 ; cube <= ( *limit ) && cube > 0 ; i++ ) { @ cube = i * i * i ; @ if ( cube <= ( *limit ) && cube > 0 ) { @ count = count + 1 ; @ } @ } @ { @ ( *temptemp1 ) = ( *limit ) ; @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *arr1 ) , int ( *arr2 ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int arr3 [ 10 ] ; @ int i ; @ for ( i = 0 ; i < 5 ; i++ ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ } @ for ( i = 0 ; i < 5 ; i++ ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ } @ for ( i = 0 ; i < 5 ; i++ ) { @ arr3 [ i ] = arr1 [ i ] ; @ } @ for ( i = 0 ; i < 5 ; i++ ) { @ arr3 [ i + 5 ] = arr2 [ i ] ; @ } ; @ for ( i = 0 ; i < 10 ; i++ ) { @ { @ ( *temptemp3 ) = i ; @ ( *temptemp4 ) = arr3 [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ if ( ( *number ) % 7 == 0 ) { @ result = ( *number ) + 1 ; @ } else if ( ( *number ) % 5 == 0 ) { @ result = ( *number ) + 3 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ } else { @ result = ( *number ) + 2 ; @ } @ { @ ( *temptemp2 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ ; @ int temp = ( *num ) - 1 ; @ temp = temp + 1 ; @ if ( temp == ( *num ) ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ if ( ( temp - ( *num ) ) % 2 == 0 ) { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp3 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *height ) , float ( *temptemp1 ) ) { @ float volume ; @ ; @ ; @ volume = ( 1.0 / 3 ) * 3.14159 * ( *radius ) * ( *radius ) * ( *height ) ; @ ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void getBinaryV3 ( int n ) { @ for ( int i = 15 ; i >= 0 ; --i ) { @ ; @ } @ } @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ ; @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ getBinaryV3 ( ( *num ) ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int mid ; @ int smallest ; @ int largest ; @ ; @ ; @ ; @ mid = ( *a ) ; @ if ( ( *b ) > mid ) mid = ( *b ) ; @ if ( ( *c ) > mid ) @ largest = ( *c ) ; @ else @ largest = mid ; @ mid = ( *a ) ; @ if ( ( *b ) < mid ) mid = ( *b ) ; @ if ( ( *c ) < mid ) @ smallest = ( *c ) ; @ else @ smallest = mid ; @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ { @ ( *temptemp2 ) = smallest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *heightM ) , float ( *weight ) , float ( *temptemp1 ) ) { @ float bmi ; @ ; @ ; @ ( *heightM ) = ( *heightM ) / 100 ; @ bmi = ( *weight ) / ( ( *heightM ) * ( *heightM ) ) ; @ { @ ( *temptemp1 ) = bmi ; @ ; @ } @ if ( bmi <= 18.5 ) { @ ; @ } else if ( bmi > 18.5 && bmi <= 24.9 ) { @ ; @ } else if ( bmi >= 25 && bmi <= 29.9 ) { @ ; @ } else { @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int j ; @ int i ; @ ; @ ; @ for ( i = 1 ; i <= ( *n ) ; i++ ) { @ for ( j = 1 ; j <= i ; j++ ) { @ { @ ( *temptemp1 ) = j ; @ ; @ } @ } ; @ } ; @ for ( i = ( *n ) ; i >= 1 ; i-- ) { @ for ( j = 1 ; j <= i ; j++ ) { @ { @ ( *temptemp2 ) = j ; @ ; @ } @ } ; @ } ; @ for ( i = ( *n ) ; i >= 1 ; i-- ) { @ for ( j = i ; j >= 1 ; j-- ) { @ { @ ( *temptemp3 ) = j ; @ ; @ } @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *count ) , int ( *nums ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int swap ; @ int l ; @ int k ; @ ; @ for ( k = 0 ; k < ( *count ) ; k++ ) { @ { @ ( *temptemp1 ) = k + 1 ; @ ; @ } @ } @ for ( k = 0 ; k < ( *count ) - 1 ; k++ ) { @ for ( l = 0 ; l < ( *count ) - k - 1 ; l++ ) { @ if ( nums [ l ] < nums [ l + 1 ] ) { @ swap = nums [ l ] ; @ nums [ l ] = nums [ l + 1 ] ; @ nums [ l + 1 ] = swap ; @ } @ } @ } ; @ for ( k = 0 ; k < ( *count ) ; k++ ) { @ ( *temptemp2 ) = nums [ k ] ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) ) { @ int digit ; @ int reversed ; @ int num ; @ int temp ; @ int originalNum ; @ ; @ ; @ for ( num = ( *lower ) ; num <= ( *upper ) ; num++ ) { @ reversed = 0 ; @ originalNum = num ; @ temp = num ; @ while ( temp != 0 ) { @ digit = temp % 10 ; @ reversed = reversed * 10 + digit ; @ temp /= 10 ; @ } @ if ( originalNum == reversed ) { @ { @ ( *temptemp1 ) = originalNum ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ result = ~ ( *a ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int mul = 0 ; @ int count = 0 ; @ ; @ ; @ while ( count < ( *b ) ) { @ mul += ( *a ) ; @ count++ ; @ } @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = mul ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *sidesCount ) , float ( *sideLength ) , float ( *temptemp1 ) ) { @ float polygonPerimeter ; @ ; @ ; @ polygonPerimeter = ( *sidesCount ) * ( *sideLength ) ; @ ; @ { @ ( *temptemp1 ) = polygonPerimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int base_size = 1 ; @ int size_char = base_size ; @ int size_int = sizeof ( int ) / size_char ; @ int size_float = sizeof ( float ) / size_char ; @ int size_long_int = sizeof ( long int ) / size_char ; @ { @ ( *temptemp1 ) = size_char ; @ ; @ } @ { @ ( *temptemp2 ) = size_int ; @ ; @ } @ { @ ( *temptemp3 ) = size_float ; @ ; @ } @ { @ ( *temptemp4 ) = size_long_int ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *start ) , int ( *end ) , int ( *temptemp1 ) ) { @ int sum ; @ int j ; @ int i ; @ int count = 0 ; @ ; @ ; @ i = ( *start ) ; @ while ( i <= ( *end ) ) { @ sum = 0 ; @ for ( j = 1 ; j <= i / 2 ; j++ ) { @ if ( i % j == 0 ) sum += j ; @ } @ if ( sum == i && i != 0 ) count++ ; @ i++ ; @ } @ { @ ( *temptemp1 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *squareSide ) , float ( *temptemp1 ) ) { @ ; @ float squareArea = ( *squareSide ) * ( *squareSide ) ; @ ; @ { @ ( *temptemp1 ) = squareArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *e ) , @ float ( *temptemp1 ) ) { @ float result ; @ ; @ result = ( *a ) + ( *b ) + ( *c ) + ( *d ) + ( *e ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius1 ) , float ( *radius2 ) , float ( *temptemp1 ) ) { @ float total ; @ ; @ ; @ total = 2 * 3.14159 * ( *radius1 ) + 2 * 3.14159 * ( *radius2 ) ; @ ; @ { @ ( *temptemp1 ) = total ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) ) { @ int i ; @ int cnt ; @ int oct [ 32 ] ; @ ; @ cnt = 0 ; @ while ( ( *number ) > 0 ) { @ oct [ cnt ] = ( *number ) % 8 ; @ ( *number ) = ( *number ) / 8 ; @ cnt++ ; @ } ; @ for ( i = ( cnt - 1 ) ; i >= 0 ; i-- ) { @ ( *temptemp1 ) = oct [ i ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *numberOfConversions ) , float ( *feet ) , int ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ float inches ; @ int i ; @ ; @ for ( i = 0 ; i < ( *numberOfConversions ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ inches = ( *feet ) * 12.0f ; @ { @ ( *temptemp2 ) = inches ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *atm ) , float ( *temptemp1 ) ) { @ float conversionFactor ; @ float mmHg ; @ conversionFactor = 760.0 ; @ ; @ mmHg = ( *atm ) * conversionFactor ; @ { @ ( *temptemp1 ) = mmHg ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ if ( ( *number ) % 7 == 0 ) { @ result = ( *number ) + 1 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ result = ( *number ) + 2 ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *confirm ) , float ( *inches ) , float ( *temptemp1 ) ) { @ float feet ; @ ; @ if ( ( *confirm ) == 'y' || ( *confirm ) == 'Y' ) { @ ; @ feet = ( *inches ) / 12.0 ; @ ; @ { @ ( *temptemp1 ) = feet ; @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *meters ) , float ( *temptemp1 ) ) { @ float feet ; @ ; @ feet = ( *meters ) / 0.3048 ; @ { @ ( *temptemp1 ) = feet ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int odd ; @ int even ; @ ; @ if ( ( *num ) / 2.0 - ( *num ) / 2 == 0 ) { @ even = ( *num ) + 2 ; @ { @ ( *temptemp1 ) = even ; @ ; @ } @ } else { @ odd = ( *num ) + 1 ; @ { @ ( *temptemp2 ) = odd ; @ ; @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ float pi = 3.14159 ; @ ; @ surfaceArea = 4 * pi * ( ( *radius ) * ( *radius ) ) ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *numbers ) , int ( *temptemp1 ) ) { @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ for ( j = i + 1 ; j < ( *n ) ; j++ ) { @ if ( numbers [ i ] > numbers [ j ] ) { @ numbers [ i ] = numbers [ i ] + numbers [ j ] ; @ numbers [ j ] = numbers [ i ] - numbers [ j ] ; @ numbers [ i ] = numbers [ i ] - numbers [ j ] ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = numbers [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *temptemp1 ) ) { @ ; @ ; @ float area = ( *length ) * ( *width ) ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *basicPay ) , float ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) ) { @ float employerFund ; @ float employeeFund ; @ float employeePercentage = 12.5f ; @ float employerPercentage = 12.0f ; @ ; @ employeeFund = ( ( *basicPay ) * employeePercentage ) / 100 ; @ employerFund = ( ( *basicPay ) * employerPercentage ) / 100 ; @ { @ ( *temptemp1 ) = ( *basicPay ) ; @ ; @ } @ { @ ( *temptemp2 ) = employeeFund ; @ ; @ } @ { @ ( *temptemp3 ) = employerFund ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) , float ( *temptemp3 ) , float ( *temptemp4 ) , @ float ( *temptemp5 ) , float ( *temptemp6 ) ) { @ ; @ ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = ( *c ) ; @ ; @ } @ ( *a ) = ( *a ) + ( *b ) + ( *c ) ; @ ( *c ) = ( *a ) - ( ( *b ) + ( *c ) ) ; @ ( *b ) = ( *a ) - ( ( *b ) + ( *c ) ) ; @ ( *a ) = ( *a ) - ( ( *b ) + ( *c ) ) ; @ ; @ { @ ( *temptemp4 ) = ( *a ) ; @ ( *temptemp5 ) = ( *b ) ; @ ( *temptemp6 ) = ( *c ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *in ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float cm ; @ ; @ cm = ( *in ) * 2.54 ; @ { @ ( *temptemp1 ) = ( *in ) ; @ ( *temptemp2 ) = cm ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *num2 ) , int ( *temptemp1 ) ) { @ ; @ ( *num1 ) = fabs ( ( *num1 ) ) ; @ ( *num2 ) = fabs ( ( *num2 ) ) ; @ while ( ( *num1 ) != ( *num2 ) ) { @ if ( ( *num1 ) > ( *num2 ) ) @ ( *num1 ) -= ( *num2 ) ; @ else @ ( *num2 ) -= ( *num1 ) ; @ } @ { @ ( *temptemp1 ) = ( *num1 ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *watts ) , float ( *temptemp1 ) ) { @ float horsepower ; @ ; @ horsepower = ( *watts ) / 746 ; @ { @ ( *temptemp1 ) = horsepower ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *a ) , int ( *temptemp1 ) ) { @ char result ; @ ; @ result = ~ ( *a ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int isPrime = 1 ; @ int i ; @ ; @ if ( ( *n ) == 2 ) @ isPrime = 1 ; @ else if ( ( *n ) < 2 || ( *n ) % 2 == 0 ) @ isPrime = 0 ; @ else { @ for ( i = 3 ; i < ( *n ) / 2 ; i += 2 ) { @ if ( ( *n ) % i == 0 ) { @ isPrime = 0 ; @ break ; @ } @ } @ } @ if ( isPrime ) { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *n ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *cm_input ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float inch_output ; @ ; @ inch_output = ( *cm_input ) / 2.54 ; @ ; @ { @ ( *temptemp1 ) = ( *cm_input ) ; @ ; @ } @ { @ ( *temptemp2 ) = inch_output ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *pressureInPascals ) , float ( *temptemp1 ) ) { @ float pressureInMmHg ; @ ; @ pressureInMmHg = ( *pressureInPascals ) * 0.0075 ; @ { @ ( *temptemp1 ) = pressureInMmHg ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *horsepower ) , float ( *temptemp1 ) ) { @ float watts ; @ ; @ watts = ( *horsepower ) * 746 ; @ { @ ( *temptemp1 ) = watts ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *h ) , float ( *temptemp1 ) ) { @ float volume ; @ ; @ ; @ volume = ( sqrt ( 3 ) / 4 * ( *a ) * ( *a ) * ( *h ) ) / 3 ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *operation ) , int ( *num1 ) , int ( *num2 ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int result ; @ ; @ ; @ ; @ switch ( ( *operation ) ) { @ case '+': @ result = ( *num1 ) + ( *num2 ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ break ; @ case '-': @ result = ( *num1 ) - ( *num2 ) ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ break ; @ case '*': @ result = ( *num1 ) * ( *num2 ) ; @ { @ ( *temptemp3 ) = result ; @ ; @ } @ break ; @ case '/': @ if ( ( *num2 ) != 0 ) { @ result = ( *num1 ) / ( *num2 ) ; @ { @ ( *temptemp4 ) = result ; @ ; @ } @ } else { @ ; @ } @ break ; @ default: ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ if ( ( ( ( *num ) * 2 ) + 1 ) == ( ( ( *num ) + 1 ) * 2 ) ) { @ result = ( *num ) + 2 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ result = ( *num ) + 1 ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mph ) , float ( *temptemp1 ) ) { @ float knots ; @ ; @ knots = ( *mph ) / 1.150 ; @ { @ ( *temptemp1 ) = knots ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) , int ( *temptemp5 ) , int ( *temptemp6 ) , @ int ( *temptemp7 ) , float ( *temptemp8 ) , float ( *temptemp9 ) , @ float ( *temptemp10 ) ) { @ int a = 87 ; @ float b = 4.5 ; @ int *p1 = &a ; @ float *p2 = &b ; @ { @ ( *temptemp1 ) = p1 ; @ ; @ } @ { @ ( *temptemp2 ) = p2 ; @ ; @ } @ { @ ( *temptemp3 ) = &p1 ; @ ; @ } @ { @ ( *temptemp4 ) = &p2 ; @ ; @ } @ { @ ( *temptemp5 ) = a ; @ ( *temptemp6 ) = *p1 ; @ ( *temptemp7 ) = * ( &a ) ; @ ; @ } @ { @ ( *temptemp8 ) = b ; @ ( *temptemp9 ) = *p2 ; @ ( *temptemp10 ) = * ( &b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *x ) , int ( *y ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ float ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) , @ float ( *temptemp6 ) ) { @ float average ; @ float sum ; @ ; @ ; @ sum = ( *x ) + ( *y ) ; @ average = sum / 2 ; @ { @ ( *temptemp1 ) = ( *x ) ; @ ( *temptemp2 ) = ( *y ) ; @ ( *temptemp3 ) = sum ; @ ; @ } @ { @ ( *temptemp4 ) = ( *x ) ; @ ( *temptemp5 ) = ( *y ) ; @ ( *temptemp6 ) = average ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ puts ( "Hello World!" ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int j ; @ int i ; @ int count = 1 ; @ int flip = 1 ; @ for ( i = 1 ; i <= 8 ; i++ ) { @ ; @ for ( j = 1 ; j <= i ; j++ ) { @ { @ ( *temptemp1 ) = count ; @ ; @ } @ count = count == 1 ? 0 : 1 ; @ } @ if ( flip ) { @ count = 0 ; @ flip = 0 ; @ } else { @ count = 1 ; @ flip = 1 ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *num2 ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) , @ float ( *temptemp6 ) ) { @ int totalSum ; @ float average ; @ ; @ ; @ totalSum = ( *num1 ) + ( *num2 ) ; @ average = totalSum / 2.0 ; @ { @ ( *temptemp1 ) = ( *num1 ) ; @ ( *temptemp2 ) = ( *num2 ) ; @ ( *temptemp3 ) = totalSum ; @ ; @ } @ { @ ( *temptemp4 ) = ( *num1 ) ; @ ( *temptemp5 ) = ( *num2 ) ; @ ( *temptemp6 ) = average ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mm ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float in ; @ ; @ in = ( *mm ) / 25.4 ; @ { @ ( *temptemp1 ) = ( *mm ) ; @ ( *temptemp2 ) = in ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *temptemp1 ) ) { @ ; @ float sa = 6 ; @ sa *= ( *length ) * ( *length ) ; @ ; @ { @ ( *temptemp1 ) = sa ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float temp ; @ float volume ; @ ; @ temp = pow ( ( *radius ) , 3 ) ; @ volume = temp * M_PI * 4.0f / 3.0f ; @ ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *name ) , float ( *basic ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ float tax ; @ float net ; @ float gross ; @ float pf ; @ float hra ; @ float da ; @ ; @ ; @ pf = 0.08 * ( *basic ) ; @ da = ( ( *basic ) >= 10000 ) @ ? 0.5 * ( *basic ) @ : ( ( ( *basic ) >= 5000 ) ? 0.4 * ( *basic ) : 0.3 * ( *basic ) ) ; @ hra = ( ( *basic ) >= 10000 ) @ ? 0.2 * ( *basic ) @ : ( ( ( *basic ) >= 5000 ) ? 0.1 * ( *basic ) : 0.08 * ( *basic ) ) ; @ gross = ( *basic ) + da + hra ; @ tax = 0.07 * gross ; @ net = gross - tax - pf ; @ { @ ( *temptemp1 ) = gross ; @ ; @ } @ { @ ( *temptemp2 ) = net ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ if ( ( *c ) + ( *d ) != 0 ) { @ result = ( ( *a ) * ( *b ) ) / ( ( *c ) + ( *d ) ) ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int addTwoNumbers ( int x , int y ) { return x + y ; } @ int entry_point ( int ( *temptemp1 ) ) { @ int sum ; @ int b ; @ int a ; @ int ( *ptr_sum ) ( int , int ) ; @ ptr_sum = &addTwoNumbers ; @ a = 10 ; @ b = 20 ; @ sum = ( *ptr_sum ) ( a , b ) ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) ) { @ float result = 1.0 ; @ int i ; @ for ( i = 1 ; i <= 4 ; i++ ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ result *= ( *num ) ; @ { @ ( *temptemp2 ) = i ; @ ( *temptemp3 ) = result ; @ ; @ } @ } @ { @ ( *temptemp4 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *temptemp1 ) ) { @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ if ( arr [ i ] <= 0 ) { @ { @ ( *temptemp1 ) = arr [ i ] ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ void readArray ( int arr [ ] , int size ) { @ int i = 0 ; @ ; @ for ( i = 0 ; i < size ; i++ ) { @ ; @ } @ } @ void printArray ( int arr [ ] , int size ) { @ int i = 0 ; @ ; @ for ( i = 0 ; i < size ; i++ ) { @ ; @ } ; @ } @ void merge ( int arr1 [ ] , int size1 , int arr2 [ ] , int size2 , int arr3 [ ] ) { @ int i = 0 , j = 0 ; @ for ( i = 0 ; i < size1 ; i++ ) arr3 [ i ] = arr1 [ i ] ; @ for ( i = 5 , j = 0 ; i < size2 + 5 ; i++ , j++ ) arr3 [ i ] = arr2 [ j ] ; @ } @ int entry_point ( ) { @ int arr1 [ 5 ] ; @ int arr2 [ 5 ] ; @ int arr3 [ 10 ] ; @ readArray ( arr1 , 5 ) ; @ readArray ( arr2 , 5 ) ; @ merge ( arr1 , 5 , arr2 , 5 , arr3 ) ; @ printArray ( arr3 , 10 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ ; @ float temp = ( *num ) / 10.0f ; @ int truncated = ( int ) temp ; @ int result = truncated * 10 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *r ) , float ( *h ) , float ( *temptemp1 ) ) { @ float a ; @ float s ; @ ; @ ; @ s = sqrt ( ( *r ) * ( *r ) + ( *h ) * ( *h ) ) ; @ a = 3.14159 * ( *r ) * ( ( *r ) + s ) ; @ ; @ { @ ( *temptemp1 ) = a ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int power ; @ int tempNumber ; @ int rem = 0 ; @ int sum = 0 ; @ ; @ tempNumber = ( *number ) ; @ while ( tempNumber != 0 ) { @ rem = tempNumber % 10 ; @ power = rem * rem * rem ; @ sum += power ; @ tempNumber /= 10 ; @ } @ if ( sum == ( *number ) ) { @ ( *temptemp1 ) = ( *number ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *number ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *lengthPair1 ) , float ( *lengthPair2 ) , float ( *temptemp1 ) ) { @ float kitePerimeter ; @ float sumOfPairs ; @ ; @ ; @ sumOfPairs = ( *lengthPair1 ) + ( *lengthPair2 ) ; @ kitePerimeter = 2 * sumOfPairs ; @ ; @ { @ ( *temptemp1 ) = kitePerimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , long int ( *temptemp2 ) ) { @ long int fact = 1 ; @ ; @ int i = ( *num ) ; @ while ( i >= 1 ) { @ fact *= i ; @ i-- ; @ } @ { @ ( *temptemp1 ) = ( *num ) ; @ ( *temptemp2 ) = fact ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void readArray ( int arr [ ] , int size ) { @ int i = 0 ; @ ; @ for ( i = 0 ; i < size ; i++ ) { @ ; @ } @ } @ void printArray ( int arr [ ] , int size ) { @ int i = 0 ; @ ; @ for ( i = 0 ; i < size ; i++ ) { @ ; @ } ; @ } @ void sortArray ( int arr [ ] , int size ) { @ int i = 0 , j = 0 , temp ; @ for ( i = 0 ; i < size - 1 ; i++ ) { @ for ( j = i + 1 ; j < size ; j++ ) { @ if ( arr [ i ] > arr [ j ] ) { @ temp = arr [ i ] ; @ arr [ i ] = arr [ j ] ; @ arr [ j ] = temp ; @ } @ } @ } @ } @ int entry_point ( ) { @ int arr [ 5 ] ; @ readArray ( arr , 5 ) ; @ ; @ printArray ( arr , 5 ) ; @ sortArray ( arr , 5 ) ; @ ; @ printArray ( arr , 5 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int addFive ( int x ) ; @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int a = 10 ; @ { @ ( *temptemp1 ) = a ; @ ; @ } @ a = addFive ( a ) ; @ { @ ( *temptemp2 ) = a ; @ ; @ } @ return 0 ; @ } @ int addFive ( int x ) { @ x += 5 ; @ return x ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *bar ) , float ( *temptemp1 ) ) { @ float conversionFactor ; @ float mmHg ; @ conversionFactor = 750.062 ; @ ; @ mmHg = conversionFactor * ( *bar ) ; @ { @ ( *temptemp1 ) = mmHg ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str1 ) ) { @ int i ; @ ; @ ; @ puts ( ( *str1 ) ) ; @ i = 0 ; @ while ( str1 [ i ] != '\0' ) { @ if ( str1 [ i ] == 'a' || str1 [ i ] == 'e' || str1 [ i ] == 'i' || str1 [ i ] == 'o' || @ str1 [ i ] == 'u' ) @ str1 [ i ] = str1 [ i ] - 32 ; @ i++ ; @ } ; @ puts ( ( *str1 ) ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mps ) , float ( *temptemp1 ) ) { @ float knots ; @ ; @ knots = ( *mps ) * 1.943 ; @ { @ ( *temptemp1 ) = knots ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int increment ( int x ) ; @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int a = 15 ; @ { @ ( *temptemp1 ) = a ; @ ; @ } @ a = increment ( a ) ; @ { @ ( *temptemp2 ) = a ; @ ; @ } @ return 0 ; @ } @ int increment ( int x ) { return x + 1 ; }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *height ) , @ float ( *temptemp1 ) ) { @ float volume ; @ float baseArea ; @ ; @ ; @ ; @ baseArea = ( *length ) * ( *width ) ; @ volume = ( baseArea * ( *height ) ) / 3.0 ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *x ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float result ; @ ; @ result = expf ( ( *x ) ) ; @ { @ ( *temptemp1 ) = ( *x ) ; @ ( *temptemp2 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , long int ( *temptemp2 ) ) { @ int i ; @ long int fact ; @ ; @ fact = 1 ; @ for ( i = ( *num ) ; i >= 1 ; i-- ) fact = fact * i ; @ { @ ( *temptemp1 ) = ( *num ) ; @ ( *temptemp2 ) = fact ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ ; @ float surfaceArea = 4 * M_PI * ( *radius ) * ( *radius ) ; @ ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int odd = 1 ; @ int squareSum = 0 ; @ int count = 0 ; @ ; @ while ( squareSum + odd <= ( *limit ) ) { @ squareSum += odd ; @ odd += 2 ; @ count++ ; @ } @ { @ ( *temptemp1 ) = ( *limit ) ; @ ; @ } @ { @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) ) { @ int largest ; @ ; @ ; @ ; @ if ( ( ( *a ) >= ( *b ) && ( *a ) >= ( *c ) ) || ( ( *a ) == ( *b ) && ( *a ) == ( *c ) ) ) { @ largest = ( *a ) ; @ } else if ( ( *b ) >= ( *a ) && ( *b ) >= ( *c ) ) { @ largest = ( *b ) ; @ } else { @ largest = ( *c ) ; @ } @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *principal ) , float ( *rate ) , float ( *time ) , @ float ( *temptemp1 ) ) { @ float ci ; @ float exponent ; @ float base ; @ ; @ ; @ ; @ ( *rate ) = ( *rate ) / 100 ; @ base = 1 + ( *rate ) ; @ exponent = pow ( base , ( *time ) ) ; @ ci = ( *principal ) * ( exponent - 1 ) ; @ { @ ( *temptemp1 ) = ci ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *gender ) ) { @ ; @ switch ( ( *gender ) ) { @ case 'M': @ case 'm': ; @ break ; @ case 'F': @ case 'f': ; @ break ; @ default: ; @ } ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( double ( *x ) , double ( *temptemp1 ) , double ( *temptemp2 ) ) { @ double exp_pos ; @ double exp_neg ; @ double sum ; @ double difference ; @ ; @ exp_pos = exp ( ( *x ) ) ; @ exp_neg = exp ( - ( *x ) ) ; @ sum = exp_pos + exp_neg ; @ difference = exp_pos - exp_neg ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ { @ ( *temptemp2 ) = difference ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int tempNum ; @ int numDigits ; @ int remainder ; @ int originalNum ; @ int i ; @ int count = 0 ; @ float sum ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = 1 ; i <= ( *n ) ; i++ ) { @ sum = 0 ; @ originalNum = i ; @ tempNum = originalNum ; @ numDigits = 0 ; @ do { @ numDigits++ ; @ tempNum /= 10 ; @ } while ( tempNum != 0 ) ; @ originalNum = i ; @ while ( originalNum > 0 ) { @ remainder = originalNum % 10 ; @ sum += pow ( remainder , numDigits ) ; @ originalNum /= 10 ; @ } @ if ( ( int ) sum == i ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ count++ ; @ } @ } @ { @ ( *temptemp3 ) = ( *n ) ; @ ( *temptemp4 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int count = 0 ; @ int mul = 0 ; @ ; @ ; @ while ( count < ( *b ) ) { @ mul += ( *a ) ; @ count++ ; @ } @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = mul ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *breadth ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ float perimeter ; @ float area ; @ ; @ ; @ ; @ area = ( *length ) * ( *breadth ) ; @ perimeter = ( 2 * ( *length ) ) + ( 2 * ( *breadth ) ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ { @ ( *temptemp2 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *atm ) , float ( *temptemp1 ) ) { @ ; @ float mmHg = ( *atm ) * 760.0 ; @ { @ ( *temptemp1 ) = mmHg ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int nthHexagonal ; @ ; @ nthHexagonal = ( ( *n ) > 0 ) ? 2 * ( *n ) * ( *n ) - ( *n ) : -1 ; @ if ( nthHexagonal == -1 ) { @ ; @ return 1 ; @ } else { @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = nthHexagonal ; @ ; @ } @ } @ return 0 ; @ }
@ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ { @ ( *temptemp1 ) = 14 ; @ ; @ } @ { @ ( *temptemp2 ) = 38 ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *num2 ) , int ( *num3 ) , int ( *num4 ) , @ int ( *temptemp1 ) ) { @ int sum ; @ ; @ sum = ( *num1 ) + ( *num2 ) + ( *num3 ) + ( *num4 ) ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *sideLength ) , float ( *slantHeight ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ float lateralArea ; @ float baseArea ; @ ; @ ; @ baseArea = ( *sideLength ) * ( *sideLength ) ; @ lateralArea = 4 * ( ( *sideLength ) * ( *slantHeight ) ) / 2 ; @ surfaceArea = baseArea + lateralArea ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int factorial = 1 ; @ ; @ if ( ( *n ) < 0 ) { @ ; @ } else { @ int i = 1 ; @ do { @ factorial *= i ; @ i++ ; @ } while ( i <= ( *n ) ) ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = factorial ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ int j ; @ int i ; @ for ( i = 1 ; i <= 5 ; i++ ) { @ for ( j = 1 ; j <= i ; j++ ) { @ ; @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *powerHP ) , float ( *temptemp1 ) ) { @ float powerW ; @ float conversionFactor ; @ ; @ conversionFactor = 746.0f ; @ powerW = ( *powerHP ) * conversionFactor ; @ ; @ { @ ( *temptemp1 ) = powerW ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i ; @ int sum = 0 ; @ ; @ if ( ( *n ) <= 0 ) { @ ; @ return 1 ; @ } @ for ( i = 1 ; i <= ( *n ) ; i++ ) { @ sum += i ; @ } @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = sum ; @ ; @ } @ return 0 ; @ }
@ @ void stringLwr ( char *s ) ; @ void stringUpr ( char *s ) ; @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ char str [ 100 ] ; @ ; @ stringLwr ( str ) ; @ { @ ( *temptemp1 ) = str ; @ ; @ } @ stringUpr ( str ) ; @ { @ ( *temptemp2 ) = str ; @ ; @ } @ return 0 ; @ } @ void stringLwr ( char *s ) { @ int i = 0 ; @ while ( s [ i ] != '\0' ) { @ if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) { @ s [ i ] = s [ i ] + 32 ; @ } @ ++i ; @ } @ } @ void stringUpr ( char *s ) { @ int i = 0 ; @ while ( s [ i ] != '\0' ) { @ if ( s [ i ] >= 'a' && s [ i ] <= 'z' ) { @ s [ i ] = s [ i ] - 32 ; @ } @ ++i ; @ } @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ perimeter = 5 * ( *side ) ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void entry_point ( int ( *num ) , int ( *array ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int temp ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ } ; @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ { @ ( *temptemp1 ) = array [ i ] ; @ ; @ } @ } @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ for ( j = 0 ; j < ( ( *num ) - i - 1 ) ; j++ ) { @ if ( array [ j ] > array [ j + 1 ] ) { @ temp = array [ j ] ; @ array [ j ] = array [ j + 1 ] ; @ array [ j + 1 ] = temp ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ { @ ( *temptemp2 ) = array [ i ] ; @ ; @ } @ } @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) ) { @ int rem ; @ ; @ ; @ rem = ( *a ) - ( ( *a ) / ( *b ) ) * ( *b ) ; @ { @ ( *temptemp1 ) = rem ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *gradians ) , float ( *temptemp1 ) ) { @ float radians ; @ ; @ radians = ( *gradians ) * ( 3.14 / 200.0 ) ; @ { @ ( *temptemp1 ) = radians ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temp ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int nums [ 10 ] ; @ int greatest = 0 ; @ int idx = 0 ; @ ; @ while ( idx < 10 ) { @ { @ ( *temptemp1 ) = idx + 1 ; @ ; @ } @ if ( idx == 0 || ( *temp ) > greatest ) { @ greatest = ( *temp ) ; @ } @ idx++ ; @ } @ { @ ( *temptemp2 ) = greatest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *feet ) , float ( *temptemp1 ) ) { @ float conversionFactor = 3.0f ; @ ; @ float yards = ( *feet ) / conversionFactor ; @ ; @ { @ ( *temptemp1 ) = yards ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *s ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ ; @ area = ( ( *n ) * ( *s ) * ( *s ) ) / ( 4 * tan ( M_PI / ( *n ) ) ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int temp ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ for ( j = i + 1 ; j < ( *size ) ; j++ ) { @ if ( arr [ i ] < arr [ j ] ) { @ temp = arr [ i ] ; @ arr [ i ] = arr [ j ] ; @ arr [ j ] = temp ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = arr [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *d ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int nd ; @ int m ; @ int y ; @ ; @ y = ( *d ) / 365 ; @ ( *d ) = ( *d ) % 365 ; @ m = ( *d ) / 30 ; @ nd = ( *d ) % 30 ; @ { @ ( *temptemp1 ) = y ; @ ( *temptemp2 ) = m ; @ ( *temptemp3 ) = nd ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void entry_point ( int ( *n ) , int ( *number ) , int ( *temptemp1 ) ) { @ int a ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *n ) ; ++i ) @ for ( i = 0 ; i < ( *n ) ; ++i ) { @ for ( j = i + 1 ; j < ( *n ) ; ++j ) { @ if ( number [ i ] > number [ j ] ) { @ a = number [ i ] ; @ number [ i ] = number [ j ] ; @ number [ j ] = a ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; ++i ) { @ ( *temptemp1 ) = number [ i ] ; @ ; @ } @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ perimeter = 8 * ( *side ) ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *grade ) , float ( *temptemp1 ) ) { @ int totalCount = 0 ; @ int passCount = 0 ; @ float passPercentage ; @ ; @ while ( ( *grade ) != -1 ) { @ if ( ( *grade ) >= 70 && ( *grade ) <= 100 ) { @ passCount++ ; @ } @ if ( ( *grade ) >= 0 && ( *grade ) <= 100 ) { @ totalCount++ ; @ } ; @ } @ passPercentage = totalCount > 0 ? ( float ) passCount / totalCount * 100 : 0 ; @ { @ ( *temptemp1 ) = passPercentage ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int b = 1 ; @ int a = 1 ; @ int count = 0 ; @ ; @ if ( ( *limit ) < 1 ) { @ { @ ( *temptemp1 ) = ( *limit ) ; @ ; @ } @ return 0 ; @ } @ while ( a <= ( *limit ) ) { @ if ( a <= ( *limit ) ) { @ count++ ; @ } @ b = a + b ; @ a = b - a ; @ } @ { @ ( *temptemp2 ) = ( *limit ) ; @ ( *temptemp3 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) ) { @ int largest ; @ ; @ ; @ ; @ if ( ( *a ) > ( *b ) && ( *a ) > ( *c ) ) @ largest = ( *a ) ; @ else if ( ( *b ) > ( *a ) && ( *b ) > ( *c ) ) @ largest = ( *b ) ; @ else @ largest = ( *c ) ; @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *meters ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float conversionFactor = 3.280839895f ; @ float feet ; @ ; @ feet = ( *meters ) * conversionFactor ; @ { @ ( *temptemp1 ) = ( *meters ) ; @ ( *temptemp2 ) = feet ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int x = 50 ; @ void display ( ) ; @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int x = 25 ; @ int y = 35 ; @ { @ ( *temptemp1 ) = x ; @ ( *temptemp2 ) = y ; @ ; @ } @ display ( ) ; @ { @ ( *temptemp3 ) = y ; @ ; @ } @ return 0 ; @ } @ void display ( ) { @ int y = 45 ; @ ; @ ; @ }
#include <stdio.h> @ @ void func1 ( int n ) ; @ void func2 ( int n ) ; @ void func3 ( int n ) ; @ int entry_point ( int ( *n ) ) { @ ; @ ; @ func1 ( ( *n ) ) ; @ ; @ ; @ func2 ( ( *n ) ) ; @ ; @ ; @ func3 ( ( *n ) ) ; @ return 0 ; @ } @ void func1 ( int n ) { @ int i ; @ if ( n == 0 ) @ return ; @ else { @ func1 ( n - 1 ) ; @ for ( i = 1 ; i <= n ; i++ ) @ ; @ ; @ } @ } @ void func2 ( int n ) { @ int i ; @ if ( n == 0 ) @ return ; @ else { @ for ( i = 1 ; i <= n ; i++ ) @ ; @ ; @ func2 ( n - 1 ) ; @ } @ } @ void func3 ( int n ) { @ int i ; @ if ( n == 0 ) @ return ; @ else { @ for ( i = n ; i >= 1 ; i-- ) @ ; @ ; @ func3 ( n - 1 ) ; @ } @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *temptemp1 ) ) { @ int i ; @ ; @ ; @ for ( i = ( *n ) - 1 ; i >= 0 ; i-- ) { @ } ; @ for ( i = ( *n ) - 1 ; i >= 0 ; i-- ) { @ if ( arr [ i ] < 0 ) { @ { @ ( *temptemp1 ) = arr [ i ] ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ result = ( ( *number ) % 7 == 0 ) ? ( *number ) + 1 : ( *number ) + 2 ; @ if ( ( *number ) % 7 == 0 ) { @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ ; @ ; @ ; @ ; @ ; @ ; @ ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int checked [ 100 ] ; @ int count ; @ int j ; @ int i ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ checked [ i ] = 0 ; @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ if ( checked [ i ] == 1 ) continue ; @ count = 1 ; @ for ( j = i + 1 ; j < ( *size ) ; j++ ) { @ if ( arr [ i ] == arr [ j ] ) { @ count++ ; @ checked [ j ] = 1 ; @ } @ } @ { @ ( *temptemp1 ) = arr [ i ] ; @ ( *temptemp2 ) = count ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ char str2 [ 20 ] ; @ char str1 [ 20 ] ; @ int length2 = 0 ; @ int length1 = 0 ; @ int i = 0 ; @ ; @ ; @ ; @ { @ ( *temptemp1 ) = str1 ; @ ; @ } @ { @ ( *temptemp2 ) = str2 ; @ ; @ } @ while ( str1 [ length1 ] != '\0' ) { @ length1++ ; @ } @ while ( str2 [ length2 ] != '\0' ) { @ length2++ ; @ } @ if ( length1 != length2 ) { @ ; @ return 0 ; @ } @ while ( ( str1 [ i ] != '\0' ) && ( str2 [ i ] != '\0' ) ) { @ if ( str1 [ i ] != str2 [ i ] ) { @ ; @ return 0 ; @ } @ i++ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ int count = 1 ; @ int row = 5 ; @ int k ; @ int i ; @ count = row - 1 ; @ for ( k = 1 ; k <= row ; k++ ) { @ for ( i = 1 ; i <= count ; i++ ) { @ ; @ } @ count-- ; @ for ( i = 1 ; i <= 2 * k - 1 ; i++ ) { @ ; @ } ; @ } @ count = 1 ; @ for ( k = 1 ; k <= row - 1 ; k++ ) { @ for ( i = 1 ; i <= count ; i++ ) { @ ; @ } @ count++ ; @ for ( i = 1 ; i <= 2 * ( row - k ) - 1 ; i++ ) { @ ; @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void printArrayElements ( int array [ ] , int count ) { @ int i ; @ for ( i = 0 ; i < count ; i++ ) { @ ; @ ; @ } @ } @ int entry_point ( ) { @ int array [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; @ printArrayElements ( array , 9 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) ) { @ char line [ 150 ] ; @ int len = 0 ; @ int j ; @ int i ; @ ; @ for ( i = 0 ; line [ i ] != '\0' ; i++ ) { @ if ( ( line [ i ] >= 'a' && line [ i ] <= 'z' ) || @ ( line [ i ] >= 'A' && line [ i ] <= 'Z' ) ) { @ line [ len++ ] = line [ i ] ; @ } @ } @ line [ len ] = '\0' ; @ ; @ { @ ( *temptemp1 ) = line ; @ ; @ } ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( double ( *a ) , double ( *b ) , float ( *temptemp1 ) ) { @ double circumference ; @ double PI = acos ( -1 ) ; @ ; @ ; @ double c = sqrt ( ( *a ) * ( *a ) + ( *b ) * ( *b ) ) ; @ circumference = 2 * PI * c / 2 ; @ { @ ( *temptemp1 ) = circumference ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int smallest ; @ int largest ; @ ; @ ; @ ; @ largest = smallest = ( *a ) ; @ if ( ( *b ) > largest ) largest = ( *b ) ; @ if ( ( *c ) > largest ) largest = ( *c ) ; @ if ( ( *b ) < smallest ) smallest = ( *b ) ; @ if ( ( *c ) < smallest ) smallest = ( *c ) ; @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ { @ ( *temptemp2 ) = smallest ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) ) { @ float sumOfPowers ; @ float surfaceArea ; @ ; @ ; @ ; @ sumOfPowers = @ pow ( ( *a ) * ( *b ) , 1.6f ) + pow ( ( *a ) * ( *c ) , 1.6f ) + pow ( ( *b ) * ( *c ) , 1.6f ) ; @ surfaceArea = 4 * 3.14159265358979323846 * pow ( sumOfPowers / 3 , ( 1 / 1.6f ) ) ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side1 ) , float ( *side2 ) , float ( *height ) , @ float ( *temptemp1 ) ) { @ float trapezoid_area ; @ ; @ ; @ ; @ ; @ trapezoid_area = ( ( *side1 ) + ( *side2 ) ) * ( *height ) * 0.5 ; @ ; @ { @ ( *temptemp1 ) = trapezoid_area ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float fourThirds ; @ float piValue ; @ float volume ; @ ; @ piValue = M_PI ; @ fourThirds = 4.0f / 3.0f ; @ volume = fourThirds * piValue * pow ( ( *radius ) , 3 ) ; @ ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *start ) , int ( *end ) , int ( *temptemp1 ) ) { @ int sum ; @ int j ; @ int i ; @ int count = 0 ; @ ; @ ; @ i = ( *start ) ; @ while ( i <= ( *end ) ) { @ sum = 0 ; @ j = 1 ; @ while ( j <= i / 2 ) { @ if ( i % j == 0 ) { @ sum += j ; @ } @ j++ ; @ } @ if ( sum == i && i != 0 ) { @ count++ ; @ } @ i++ ; @ } @ { @ ( *temptemp1 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *outerRadius ) , float ( *innerRadius ) , float ( *temptemp1 ) ) { @ float totalCircumference ; @ float innerCircumference ; @ float outerCircumference ; @ ; @ ; @ outerCircumference = 2 * 3.14159 * ( *outerRadius ) ; @ innerCircumference = 2 * 3.14159 * ( *innerRadius ) ; @ totalCircumference = outerCircumference + innerCircumference ; @ ; @ { @ ( *temptemp1 ) = totalCircumference ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *height ) , float ( *temptemp1 ) ) { @ float vol ; @ float areaBase ; @ float pi = 3.14159 ; @ ; @ ; @ areaBase = ( 5.0f * ( *side ) * ( *side ) ) / ( 4.0f * tan ( pi / 5.0f ) ) ; @ vol = ( areaBase * ( *height ) ) / 3.0f ; @ ; @ { @ ( *temptemp1 ) = vol ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ if ( arr [ i ] < 0 ) { @ count++ ; @ } @ } @ { @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void convertToLowercase ( char s [ ] ) ; @ void convertToUppercase ( char s [ ] ) ; @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ char str [ 100 ] ; @ ; @ convertToLowercase ( str ) ; @ { @ ( *temptemp1 ) = str ; @ ; @ } @ convertToUppercase ( str ) ; @ { @ ( *temptemp2 ) = str ; @ ; @ } @ return 0 ; @ } @ void convertToLowercase ( char s [ ] ) { @ for ( int i = 0 ; s [ i ] != '\0' ; i++ ) { @ if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) { @ s [ i ] += 'a' - 'A' ; @ } @ } @ } @ void convertToUppercase ( char s [ ] ) { @ for ( int i = 0 ; s [ i ] != '\0' ; i++ ) { @ if ( s [ i ] >= 'a' && s [ i ] <= 'z' ) { @ s [ i ] -= 'a' - 'A' ; @ } @ } @ }
#include <stdbool.h> @ #include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i ; @ int num ; @ bool isPrime ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *lower ) ; @ ( *temptemp2 ) = ( *upper ) ; @ ; @ } @ num = ( *lower ) ; @ while ( num <= ( *upper ) ) { @ if ( num > 1 ) { @ isPrime = true ; @ i = 2 ; @ while ( i * i <= num ) { @ if ( num % i == 0 ) { @ isPrime = false ; @ break ; @ } @ i++ ; @ } @ if ( isPrime ) { @ { @ ( *temptemp3 ) = num ; @ ; @ } @ } @ } @ num++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *l ) , float ( *b ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ ; @ area = ( *l ) * ( *b ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int i ; @ ; @ ; @ while ( ( *num ) % 2 == 0 ) { @ { @ ( *temptemp1 ) = 2 ; @ ; @ } @ ( *num ) = ( *num ) / 2 ; @ } @ for ( i = 3 ; i * i <= ( *num ) ; i += 2 ) { @ while ( ( *num ) % i == 0 ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ ( *num ) = ( *num ) / i ; @ } @ } @ if ( ( *num ) > 2 ) { @ ( *temptemp3 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ perimeter = 6 * ( *side ) ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) ) { @ int maxCols ; @ ; @ if ( ( *maxRows ) < 1 ) { @ ; @ exit ( 0 ) ; @ } @ maxCols = ( *maxRows ) * 3 ; @ puts ( "\n--------------------------------------------\n" ) ; @ int row = 1 ; @ { @ int col = 1 ; @ { @ if ( col == ( *maxRows ) + 1 - row || col == ( *maxRows ) - 1 + row || @ col == ( *maxRows ) * 2 + 2 - row || col == ( *maxRows ) * 2 + row ) @ ; @ else @ ; @ } ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i = 1 ; @ int triangularNumber = 0 ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *lower ) ; @ ( *temptemp2 ) = ( *upper ) ; @ ; @ } @ while ( triangularNumber <= ( *upper ) ) { @ triangularNumber = i * ( i + 1 ) / 2 ; @ if ( triangularNumber >= ( *lower ) && triangularNumber <= ( *upper ) ) { @ { @ ( *temptemp3 ) = triangularNumber ; @ ; @ } @ } @ i++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *total ) , int ( *elements ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int j ; @ int i ; @ int swap ; @ ; @ for ( i = 0 ; i < ( *total ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 1 ; i < ( *total ) ; i++ ) { @ for ( j = i ; j > 0 && elements [ j - 1 ] > elements [ j ] ; j-- ) { @ swap = elements [ j ] ; @ elements [ j ] = elements [ j - 1 ] ; @ elements [ j - 1 ] = swap ; @ } @ } ; @ for ( i = 0 ; i < ( *total ) ; i++ ) { @ { @ ( *temptemp2 ) = elements [ i ] ; @ ; @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *R ) , float ( *r ) , float ( *temptemp1 ) ) { @ float volume ; @ ; @ ; @ volume = @ 2 * 3.14159265358979323846 * 3.14159265358979323846 * ( *R ) * ( *r ) * ( *r ) ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) ) { @ ; @ { @ ( *temptemp1 ) = ( *a ) + ( *b ) ; @ ; @ } @ { @ ( *temptemp2 ) = ( *a ) - ( *b ) ; @ ; @ } @ { @ ( *temptemp3 ) = ( *a ) * ( *b ) ; @ ; @ } @ { @ ( *temptemp4 ) = ( *a ) / ( *b ) ; @ ; @ } @ { @ ( *temptemp5 ) = ( *a ) % ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *first ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int second [ 100 ] ; @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *size ) ; @ ; @ } @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ second [ i ] = first [ i ] ; @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp3 ) = first [ i ] ; @ ; @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp4 ) = second [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ for ( result = ( *number ) ; result >= 7 ; result -= 7 ) @ ; @ if ( result == 0 ) { @ result = ( *number ) + 1 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ result = ( *number ) + 2 ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *start ) , int ( *end ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int counter ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *start ) ; @ ( *temptemp2 ) = ( *end ) ; @ ; @ } @ for ( counter = ( *start ) ; counter <= ( *end ) ; counter++ ) { @ if ( counter % 2 == 0 ) { @ { @ ( *temptemp3 ) = counter ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *start ) , int ( *end ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int primeCount = 0 ; @ int primeFlag ; @ int j ; @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *start ) ; @ ( *temptemp2 ) = ( *end ) ; @ ; @ } @ for ( i = ( *start ) ; i <= ( *end ) ; i++ ) { @ if ( i <= 1 ) continue ; @ primeFlag = 1 ; @ for ( j = 2 ; j * j <= i ; j++ ) { @ if ( i % j == 0 ) { @ primeFlag = 0 ; @ break ; @ } @ } @ if ( primeFlag == 1 ) { @ { @ ( *temptemp3 ) = i ; @ ; @ } @ primeCount++ ; @ } @ } @ { @ ( *temptemp4 ) = primeCount ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ int revNumber ; @ int dig ; @ ; @ revNumber = 0 ; @ while ( ( *n ) > 0 ) { @ dig = ( *n ) % 10 ; @ revNumber = ( revNumber * 10 ) + dig ; @ ( *n ) = ( *n ) / 10 ; @ } @ { @ ( *temptemp1 ) = revNumber ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ result = ( ( ( *a ) + ( *b ) + ( *c ) + ( *d ) ) / 4 ) - ( *d ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ putchar ( 65 ) ; @ putchar ( '\n' ) ; @ putchar ( 66 ) ; @ putchar ( '\n' ) ; @ putchar ( 67 ) ; @ putchar ( '\n' ) ; @ putchar ( 68 ) ; @ putchar ( '\n' ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *a ) , float ( *x ) , int ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ float sum = 0 ; @ int i ; @ ; @ ; @ for ( i = ( *n ) ; i >= 0 ; i-- ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ } ; @ for ( i = ( *n ) ; i > 0 ; i-- ) { @ sum = ( sum + a [ i ] ) * ( *x ) ; @ } @ sum = sum + a [ 0 ] ; @ { @ ( *temptemp2 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ ( *a ) = ( *a ) + ( *b ) ; @ ( *b ) = ( *a ) - ( *b ) ; @ ( *a ) = ( *a ) - ( *b ) ; @ ; @ { @ ( *temptemp3 ) = ( *a ) ; @ ( *temptemp4 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *sides ) , int ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float perimeter = 0 ; @ int i ; @ for ( i = 0 ; i < 4 ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ perimeter += sides [ i ] ; @ } @ { @ ( *temptemp2 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int cnt ; @ int tNum ; @ ; @ cnt = 0 ; @ tNum = ( *num ) ; @ while ( tNum > 0 ) { @ cnt++ ; @ tNum /= 10 ; @ } @ { @ ( *temptemp1 ) = ( *num ) ; @ ( *temptemp2 ) = cnt ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ int i ; @ ; @ for ( i = 65 ; i <= 90 ; i++ ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ } ; @ for ( i = 97 ; i <= 122 ; i++ ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , long double ( *temptemp2 ) , @ int ( *temptemp3 ) , float ( *temptemp4 ) ) { @ double fact = 1 ; @ ; @ int i = ( *n ) ; @ { fact *= i ; } @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = fact ; @ ; @ } @ { @ ( *temptemp3 ) = ( *n ) ; @ ( *temptemp4 ) = fact ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int result = ( *num ) & 1 ; @ if ( result == 0 ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *age ) ) { @ ; @ if ( ( *age ) >= 18 ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , float ( *temptemp3 ) , @ float ( *temptemp4 ) ) { @ int num1 = 10 ; @ float num2 = 20.5 ; @ int num1_copy = num1 ; @ float num2_copy = num2 ; @ num1 += 5 ; @ num2 += 2.5 ; @ { @ ( *temptemp1 ) = num1_copy ; @ ; @ } @ { @ ( *temptemp2 ) = num1 ; @ ; @ } @ { @ ( *temptemp3 ) = num2_copy ; @ ; @ } @ { @ ( *temptemp4 ) = num2 ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , int ( *temptemp2 ) ) { @ char string [ 100 ] ; @ int frequency [ 255 ] ; @ int firstFlag = 1 ; @ int ascii ; @ int min ; @ int i ; @ ; @ for ( i = 0 ; i < 255 ; i++ ) { @ frequency [ i ] = 0 ; @ } @ for ( i = 0 ; string [ i ] != '\0' ; i++ ) { @ ascii = string [ i ] ; @ frequency [ ascii ] ++ ; @ } @ for ( i = 0 ; i < 255 ; i++ ) { @ if ( frequency [ i ] != 0 ) { @ if ( firstFlag || frequency [ i ] < frequency [ min ] ) { @ min = i ; @ firstFlag = 0 ; @ } @ } @ } @ { @ ( *temptemp1 ) = min ; @ ( *temptemp2 ) = frequency [ min ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <string.h> @ @ int entry_point ( char ( *user ) , int ( *input ) ) { @ int password = 1234 ; @ char username [ ] = "ruban" ; @ ; @ ; @ if ( ! ( strcmp ( ( *user ) , username ) ) && ( password == 1234 ) ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *temptemp1 ) ) { @ float sqrt3 ; @ float surfaceArea ; @ ; @ sqrt3 = sqrt ( 3 ) ; @ surfaceArea = sqrt3 * ( *a ) * ( *a ) ; @ ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , unsigned long int ( *temptemp1 ) ) { @ unsigned long sum = 0 ; @ int i = 1 ; @ int nextSquare = 1 ; @ ; @ while ( i <= ( *N ) ) { @ sum += nextSquare ; @ nextSquare += ( 2 * i + 1 ) ; @ i++ ; @ } @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int isOdd = ( *num ) % 2 ; @ if ( isOdd ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ void entry_point ( int ( *number1 ) , int ( *number2 ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) ) { @ int j ; @ int i ; @ int count = 0 ; @ int temp ; @ int flag ; @ ; @ if ( ( *number2 ) < 2 ) { @ { @ ( *temptemp1 ) = ( *number2 ) ; @ ; @ } @ } ; @ temp = ( *number1 ) ; @ if ( ( *number1 ) % 2 == 0 ) { @ ( *number1 ) ++ ; @ } @ for ( i = ( *number1 ) ; i <= ( *number2 ) ; i = i + 2 ) { @ flag = 0 ; @ for ( j = 2 ; j <= i / 2 ; j++ ) { @ if ( ( i % j ) == 0 ) { @ flag = 1 ; @ break ; @ } @ } @ if ( flag == 0 ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ count++ ; @ } @ } @ { @ ( *temptemp3 ) = temp ; @ ( *temptemp4 ) = ( *number2 ) ; @ ( *temptemp5 ) = count ; @ ; @ } @ }
#include <stdio.h> @ @ int entry_point ( ) { @ putchar ( 65 ) ; @ putchar ( '\n' ) ; @ putchar ( 66 ) ; @ putchar ( '\n' ) ; @ putchar ( 67 ) ; @ putchar ( '\n' ) ; @ putchar ( 68 ) ; @ putchar ( '\n' ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *mode ) , float ( *tempInput ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ float tempOutput ; @ ; @ ; @ ; @ switch ( ( *mode ) ) { @ case 1: ; @ tempOutput = ( ( *tempInput ) - 32 ) * 5 / 9 ; @ { @ ( *temptemp1 ) = tempOutput ; @ ; @ } @ break ; @ case 2: ; @ tempOutput = ( ( *tempInput ) * 9 / 5 ) + 32 ; @ { @ ( *temptemp2 ) = tempOutput ; @ ; @ } @ break ; @ default: ; @ break ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) , int ( *temptemp5 ) ) { @ { @ ( *temptemp1 ) = sizeof ( char* ) ; @ ; @ } @ { @ ( *temptemp2 ) = sizeof ( int* ) ; @ ; @ } @ { @ ( *temptemp3 ) = sizeof ( float* ) ; @ ; @ } @ { @ ( *temptemp4 ) = sizeof ( long int* ) ; @ ; @ } @ { @ ( *temptemp5 ) = sizeof ( double* ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int array [ 100 ] , array1 [ 100 ] ; @ void entry_point ( int ( *n ) , int ( *array ) , int ( *temptemp1 ) ) { @ int temp ; @ int k ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ array1 [ i ] = array [ i ] ; @ } @ for ( k = 0 ; k < 3 ; k++ ) { @ for ( i = ( *n ) - 1 ; i >= 0 ; i-- ) { @ for ( j = i - 1 ; j >= 0 ; j-- ) { @ if ( ( array [ i ] % 10 ) < ( array [ j ] % 10 ) ) { @ temp = array [ i ] ; @ array [ i ] = array [ j ] ; @ array [ j ] = temp ; @ temp = array1 [ i ] ; @ array1 [ i ] = array1 [ j ] ; @ array1 [ j ] = temp ; @ } @ } @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ array [ i ] = array [ i ] / 10 ; @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = array1 [ i ] ; @ ; @ } @ } @ }
#include <stdio.h> @ @ int entry_point ( int ( *rows ) ) { @ int k ; @ int j ; @ int i ; @ ; @ if ( ( *rows ) < 1 ) { @ ; @ return 0 ; @ } @ i = 1 ; @ while ( i <= ( *rows ) ) { @ j = ( *rows ) - i ; @ while ( j > 0 ) { @ ; @ j-- ; @ } @ k = 0 ; @ while ( k < i ) { @ ; @ k++ ; @ } ; @ i++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *base ) , float ( *height ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ ; @ area = 0.5 * ( *base ) * ( *height ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ ; @ surfaceArea = sqrt ( 3 ) * ( *a ) * ( *a ) ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int count = ( int ) cbrt ( ( *limit ) ) ; @ ; @ { @ ( *temptemp1 ) = ( *limit ) ; @ ; @ } ; @ { @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int value = 2567 ; @ { @ ( *temptemp1 ) = value ; @ ; @ } @ { @ ( *temptemp2 ) = value ; @ ; @ } @ { @ ( *temptemp3 ) = value ; @ ; @ } @ { @ ( *temptemp4 ) = value ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *bar ) , float ( *temptemp1 ) ) { @ float mmHg ; @ ; @ mmHg = ( *bar ) * 750.062 ; @ { @ ( *temptemp1 ) = mmHg ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *vehicleSpeed ) , float ( *travelTime ) , float ( *temptemp1 ) ) { @ float travelDistance ; @ ; @ ; @ travelDistance = ( *vehicleSpeed ) * ( *travelTime ) ; @ { @ ( *temptemp1 ) = travelDistance ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ result = ( ( *num ) % 2 == 0 ) ? 1 : 0 ; @ if ( result == 1 ) { @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *feet ) , int ( *temptemp1 ) ) { @ int inches ; @ ; @ inches = ( *feet ) * 12 ; @ { @ ( *temptemp1 ) = inches ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void readArray ( int arr [ ] , int size ) { @ int i = 0 ; @ ; @ for ( i = 0 ; i < size ; i++ ) { @ ; @ } @ } @ void printArray ( int arr [ ] , int size ) { @ int i = 0 ; @ ; @ for ( i = 0 ; i < size ; i++ ) { @ ; @ } ; @ } @ void sortArray ( int arr [ ] , int size ) { @ int i = 0 , j = 0 , temp ; @ for ( i = 0 ; i < size - 1 ; i++ ) { @ for ( j = i + 1 ; j < size ; j++ ) { @ if ( arr [ i ] > arr [ j ] ) { @ temp = arr [ i ] ; @ arr [ i ] = arr [ j ] ; @ arr [ j ] = temp ; @ } @ } @ } @ } @ int entry_point ( ) { @ int arr [ 5 ] ; @ readArray ( arr , 5 ) ; @ ; @ printArray ( arr , 5 ) ; @ sortArray ( arr , 5 ) ; @ ; @ printArray ( arr , 5 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int sum = 0 ; @ int counter = 1 ; @ ; @ if ( ( *n ) <= 0 ) { @ ; @ return 1 ; @ } @ while ( counter <= ( *n ) ) { @ sum += counter ; @ counter++ ; @ } @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void getBinaryV2 ( int n ) { @ int binary [ 16 ] , i = 0 ; @ for ( ; i < 16 ; ++i ) { @ binary [ i ] = ( n >> i ) & 1 ; @ } @ for ( i = 15 ; i >= 0 ; --i ) { @ ; @ } @ } @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ ; @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ getBinaryV2 ( ( *num ) ) ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ ; @ count = ( int ) sqrt ( ( *limit ) ) ; @ { @ ( *temptemp1 ) = ( *limit ) ; @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ #include <string.h> @ @ int entry_point ( char ( *binary ) , int ( *temptemp1 ) ) { @ int decimal ; @ int i ; @ ; @ int length = 10 ; @ for ( i = 0 ; i < length ; i++ ) { @ if ( binary [ i ] == '1' ) { @ decimal = decimal + pow ( 2 , length - i - 1 ) ; @ } @ } @ { @ ( *temptemp1 ) = decimal ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *sideA ) , float ( *temptemp1 ) ) { @ float sideB ; @ float sideC ; @ float sideD ; @ float perimeter ; @ ; @ sideB = ( *sideA ) ; @ sideC = ( *sideA ) ; @ sideD = ( *sideA ) ; @ perimeter = ( *sideA ) + sideB + sideC + sideD ; @ ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *m ) , int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ ; @ ; @ { @ ( *temptemp1 ) = ( *m ) ; @ ( *temptemp2 ) = ( *n ) ; @ ; @ } @ ( *m ) = ( *m ) ^ ( *n ) ; @ ( *n ) = ( *m ) ^ ( *n ) ; @ ( *m ) = ( *m ) ^ ( *n ) ; @ { @ ( *temptemp3 ) = ( *m ) ; @ ( *temptemp4 ) = ( *n ) ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *num ) ) { @ int digits = 0 ; @ int remainder ; @ int originalNum ; @ float armstrongSum = 0 ; @ ; @ if ( ( *num ) < 0 ) { @ ; @ return 0 ; @ } @ originalNum = ( *num ) ; @ for ( ; originalNum != 0 ; ++digits ) { @ originalNum /= 10 ; @ } @ originalNum = ( *num ) ; @ for ( ; originalNum != 0 ; originalNum /= 10 ) { @ remainder = originalNum % 10 ; @ armstrongSum += pow ( remainder , digits ) ; @ } @ if ( ( int ) armstrongSum == ( *num ) ) @ ; @ else @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *value ) , float ( *mean ) , float ( *stdDeviation ) , @ float ( *temptemp1 ) ) { @ float zScore ; @ ; @ ; @ ; @ zScore = ( ( *value ) - ( *mean ) ) / ( *stdDeviation ) ; @ ; @ { @ ( *temptemp1 ) = zScore ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *real1 ) , float ( *imag1 ) , float ( *real2 ) , float ( *imag2 ) , @ float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float imagSum ; @ float realSum ; @ ; @ ; @ realSum = ( *real1 ) + ( *real2 ) ; @ imagSum = ( *imag1 ) + ( *imag2 ) ; @ { @ ( *temptemp1 ) = realSum ; @ ( *temptemp2 ) = imagSum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) ) { @ ; @ ; @ ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *shift ) , int ( *temptemp1 ) ) { @ ; @ ; @ ; @ ; @ int result = ( *a ) << ( *shift ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <string.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ char s [ 1000 ] ; @ { ; } @ int i ; @ int consonants = 0 ; @ int vowels = 0 ; @ for ( i = 0 ; s [ i ] ; i++ ) { @ if ( ( s [ i ] >= 65 && s [ i ] <= 90 ) || ( s [ i ] >= 97 && s [ i ] <= 122 ) ) { @ if ( s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || @ s [ i ] == 'u' ) @ vowels++ ; @ else @ consonants++ ; @ } @ } @ { @ ( *temptemp1 ) = vowels ; @ ; @ } @ { @ ( *temptemp2 ) = consonants ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ ; @ ( *a ) = ( *a ) ^ ( *b ) ; @ ( *b ) = ( *a ) ^ ( *b ) ; @ ( *a ) = ( *a ) ^ ( *b ) ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int temp ; @ ; @ ; @ temp = ( *a ) ; @ ( *a ) = ( *b ) ; @ ( *b ) = temp ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *arr ) , int ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) ) { @ int i ; @ float stdDeviation ; @ float variance ; @ float mean ; @ float sum = 0 ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ sum += arr [ i ] ; @ } @ mean = sum / ( *n ) ; @ sum = 0 ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ sum += ( arr [ i ] - mean ) * ( arr [ i ] - mean ) ; @ } @ variance = sum / ( *n ) ; @ stdDeviation = sqrtf ( variance ) ; @ ; @ { @ ( *temptemp2 ) = mean ; @ ; @ } ; @ { @ ( *temptemp3 ) = variance ; @ ; @ } ; @ { @ ( *temptemp4 ) = stdDeviation ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str1 ) , char ( *str2 ) ) { @ int j = 0 ; @ int i = 0 ; @ ; @ ; @ ; @ puts ( ( *str1 ) ) ; @ puts ( ( *str2 ) ) ; @ while ( str1 [ i ] != '\0' ) { @ i++ ; @ } @ while ( str2 [ j ] != '\0' ) { @ str1 [ i++ ] = str2 [ j++ ] ; @ } @ str1 [ i ] = '\0' ; @ ; @ puts ( ( *str1 ) ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *dd ) , int ( *mm ) , int ( *yy ) ) { @ int isLeapYear = 0 ; @ int isValidDate = 0 ; @ ; @ if ( ( *yy ) >= 1900 && ( *yy ) <= 9999 ) { @ if ( ( *mm ) >= 1 && ( *mm ) <= 12 ) { @ if ( ( *mm ) == 2 ) { @ isLeapYear = ( *yy ) % 400 == 0 || ( ( *yy ) % 4 == 0 && ( *yy ) % 100 != 0 ) ; @ if ( ( *dd ) >= 1 && ( ( ( *dd ) <= 28 ) || ( ( *dd ) == 29 && isLeapYear ) ) ) { @ isValidDate = 1 ; @ } @ } else if ( ( *mm ) == 4 || ( *mm ) == 6 || ( *mm ) == 9 || ( *mm ) == 11 ) { @ if ( ( *dd ) >= 1 && ( *dd ) <= 30 ) { @ isValidDate = 1 ; @ } @ } else if ( ( *dd ) >= 1 && ( *dd ) <= 31 ) { @ isValidDate = 1 ; @ } @ } @ } @ if ( isValidDate ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) ) { @ ; @ ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *s ) , float ( *h ) , float ( *temptemp1 ) ) { @ float volume ; @ float baseArea ; @ float pi = 3.14159 ; @ ; @ ; @ baseArea = ( 3 * sqrt ( 3 ) / 2 ) * ( *s ) * ( *s ) ; @ volume = ( baseArea * ( *h ) ) / 3 ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *feet ) , float ( *temptemp1 ) ) { @ ; @ float yards = ( *feet ) / 3.0f ; @ ; @ { @ ( *temptemp1 ) = yards ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *bs ) , float ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) , float ( *temptemp5 ) ) { @ float gs ; @ float cv ; @ float da ; @ float hra ; @ ; @ if ( ( *bs ) >= 5000 ) { @ da = 110 * ( *bs ) / 100 ; @ hra = 20 * ( *bs ) / 100 ; @ cv = 500 ; @ } else if ( ( *bs ) >= 3000 && ( *bs ) < 5000 ) { @ da = 100 * ( *bs ) / 100 ; @ hra = 15 * ( *bs ) / 100 ; @ cv = 400 ; @ } else if ( ( *bs ) < 3000 ) { @ da = 90 * ( *bs ) / 100 ; @ hra = 10 * ( *bs ) / 100 ; @ cv = 300 ; @ } @ gs = ( *bs ) + da + hra + cv ; @ { @ ( *temptemp1 ) = ( *bs ) ; @ ; @ } @ { @ ( *temptemp2 ) = da ; @ ; @ } @ { @ ( *temptemp3 ) = hra ; @ ; @ } @ { @ ( *temptemp4 ) = cv ; @ ; @ } @ { @ ( *temptemp5 ) = gs ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *octal ) , int ( *temptemp1 ) ) { @ int base = 1 ; @ int decimal = 0 ; @ ; @ for ( ; ( *octal ) ; ( *octal ) /= 10 ) { @ decimal += ( ( *octal ) % 10 ) * base ; @ base *= 8 ; @ } @ { @ ( *temptemp1 ) = decimal ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *yards ) , float ( *temptemp1 ) ) { @ float miles ; @ ; @ miles = ( *yards ) / 1760.0 ; @ { @ ( *temptemp1 ) = miles ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *hp ) , float ( *temptemp1 ) ) { @ float w ; @ ; @ w = ( *hp ) * 746.0f ; @ ; @ { @ ( *temptemp1 ) = w ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , int ( *A ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int flag ; @ int j ; @ int i ; @ int Temp ; @ ; @ ; @ for ( i = 0 ; i < ( *N ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *N ) - 1 ; i++ ) { @ flag = 0 ; @ for ( j = i + 1 ; j < ( *N ) ; j++ ) { @ if ( A [ j ] < A [ i ] ) { @ Temp = A [ i ] ; @ A [ i ] = A [ j ] ; @ A [ j ] = Temp ; @ flag = 1 ; @ } @ } @ if ( !flag ) break ; @ } ; @ for ( i = 0 ; i < ( *N ) ; i++ ) { @ { @ ( *temptemp2 ) = A [ i ] ; @ ; @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n1 ) , int ( *n2 ) , int ( *n3 ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) , @ int ( *temptemp6 ) ) { @ ; @ ; @ ; @ ; @ if ( ( ( *n1 ) > ( *n2 ) ) && ( ( *n1 ) > ( *n3 ) ) ) { @ ( *temptemp1 ) = ( *n1 ) ; @ ; @ } else if ( ( *n2 ) > ( *n3 ) ) { @ ( *temptemp2 ) = ( *n2 ) ; @ ; @ } else { @ ( *temptemp3 ) = ( *n3 ) ; @ ; @ } ; @ if ( ( ( *n1 ) < ( *n2 ) ) && ( ( *n1 ) < ( *n3 ) ) ) { @ ( *temptemp4 ) = ( *n1 ) ; @ ; @ } else if ( ( *n2 ) < ( *n3 ) ) { @ ( *temptemp5 ) = ( *n2 ) ; @ ; @ } else { @ ( *temptemp6 ) = ( *n3 ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *num ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int foundPos = -1 ; @ int i ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ if ( arr [ i ] == ( *num ) ) { @ foundPos = i ; @ break ; @ } @ } @ if ( foundPos != -1 ) { @ { @ ( *temptemp2 ) = ( *num ) ; @ ( *temptemp3 ) = foundPos + 1 ; @ ; @ } @ } else { @ { @ ( *temptemp4 ) = ( *num ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ ; @ float perimeter = 4 * ( *side ) ; @ ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int cnt = 0 ; @ ; @ if ( ( *num ) == 0 ) @ cnt = 1 ; @ else { @ int tNum = ( *num ) ; @ do { @ cnt++ ; @ tNum /= 10 ; @ } while ( tNum > 0 ) ; @ } @ { @ ( *temptemp1 ) = ( *num ) ; @ ( *temptemp2 ) = cnt ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *input_inches ) , float ( *temptemp1 ) ) { @ float output_cm ; @ ; @ ; @ ; @ ; @ output_cm = ( *input_inches ) * 2.54 ; @ { @ ( *temptemp1 ) = output_cm ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ ; @ if ( ( *b ) != 0 ) { @ ( *a ) = ( *a ) * ( *b ) ; @ ( *b ) = ( *a ) / ( *b ) ; @ ( *a ) = ( *a ) / ( *b ) ; @ } @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *shift ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ ; @ result = ( *a ) << ( *shift ) ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *outerRadius ) , float ( *innerRadius ) , float ( *temptemp1 ) ) { @ float circumference ; @ ; @ ; @ circumference = 2 * 3.14159 * ( ( *outerRadius ) + ( *innerRadius ) ) ; @ { @ ( *temptemp1 ) = circumference ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i = 2 ; @ char isPrime = 1 ; @ ; @ while ( i <= ( *number ) / 2 ) { @ if ( ( *number ) % i == 0 ) { @ isPrime = 0 ; @ break ; @ } @ i++ ; @ } @ if ( isPrime ) { @ ( *temptemp1 ) = ( *number ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *number ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int n1 ; @ int pro ; @ int sum ; @ int dig ; @ ; @ n1 = ( *n ) ; @ sum = 0 ; @ pro = 1 ; @ while ( ( *n ) > 0 ) { @ dig = ( *n ) % 10 ; @ sum += dig ; @ pro *= dig ; @ ( *n ) = ( *n ) / 10 ; @ } @ { @ ( *temptemp1 ) = n1 ; @ ( *temptemp2 ) = sum ; @ ; @ } @ { @ ( *temptemp3 ) = n1 ; @ ( *temptemp4 ) = pro ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int reverse [ 100 ] ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ j = 0 ; @ for ( i = ( *size ) - 1 ; i >= 0 ; i-- ) { @ reverse [ j ] = arr [ i ] ; @ j++ ; @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = reverse [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *principal ) , float ( *rate ) , float ( *year ) , @ float ( *temptemp1 ) ) { @ float ci ; @ int i ; @ ; @ ; @ ; @ ci = ( *principal ) ; @ for ( i = 0 ; i < ( *year ) ; i++ ) { @ ci = ci + ( ci * ( *rate ) / 100 ) ; @ } @ ci -= ( *principal ) ; @ { @ ( *temptemp1 ) = ci ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *outerRadius ) , float ( *innerRadius ) , float ( *temptemp1 ) ) { @ float diffSquare ; @ float area ; @ ; @ ; @ diffSquare = @ ( *outerRadius ) * ( *outerRadius ) - ( *innerRadius ) * ( *innerRadius ) ; @ area = diffSquare * 3.14159 ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *wDay ) ) { @ ; @ switch ( ( *wDay ) ) { @ case 0: ; @ break ; @ case 1: ; @ break ; @ case 2: ; @ break ; @ case 3: ; @ break ; @ case 4: ; @ break ; @ case 5: ; @ break ; @ case 6: ; @ break ; @ default: ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *dd ) , int ( *mm ) , int ( *yy ) ) { @ ; @ if ( ( *yy ) >= 1900 && ( *yy ) <= 9999 ) { @ if ( ( *mm ) >= 1 && ( *mm ) <= 12 ) { @ if ( ( ( *dd ) >= 1 && ( *dd ) <= 31 ) && @ ( ( *mm ) == 1 || ( *mm ) == 3 || ( *mm ) == 5 || ( *mm ) == 7 || ( *mm ) == 8 || @ ( *mm ) == 10 || ( *mm ) == 12 ) ) @ ; @ else if ( ( ( *dd ) >= 1 && ( *dd ) <= 30 ) && @ ( ( *mm ) == 4 || ( *mm ) == 6 || ( *mm ) == 9 || ( *mm ) == 11 ) ) @ ; @ else if ( ( ( *dd ) >= 1 && ( *dd ) <= 28 ) && ( ( *mm ) == 2 ) ) @ ; @ else if ( ( *dd ) == 29 && ( *mm ) == 2 && @ ( ( *yy ) % 400 == 0 || ( ( *yy ) % 4 == 0 && ( *yy ) % 100 != 0 ) ) ) @ ; @ else @ ; @ } else { @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *fah ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float conversionFactor ; @ float cel ; @ ; @ conversionFactor = 5.0 / 9.0 ; @ cel = ( ( *fah ) - 32 ) * conversionFactor ; @ { @ ( *temptemp1 ) = ( *fah ) ; @ ( *temptemp2 ) = cel ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ if ( ( *c ) + ( *d ) == 0 ) { @ ; @ return -1 ; @ } @ result = ( ( *a ) + ( *b ) ) / ( ( *c ) + ( *d ) ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *R ) , float ( *r ) , float ( *temptemp1 ) ) { @ float piSquared ; @ float volume ; @ ; @ ; @ piSquared = 3.14159265358979323846 * 3.14159265358979323846 ; @ volume = piSquared * 2 * ( *R ) * ( *r ) * ( *r ) ; @ ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *bar ) , float ( *temptemp1 ) ) { @ float mmHg ; @ ; @ mmHg = 750.062 * ( *bar ) ; @ { @ ( *temptemp1 ) = mmHg ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int prime = 1 ; @ int i ; @ ; @ for ( i = 2 ; i < ( *n ) ; i++ ) { @ if ( ( *n ) % i == 0 ) { @ prime = 0 ; @ break ; @ } @ } @ if ( prime ) { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *n ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int diff ; @ ; @ ; @ diff = ( *a ) > ( *b ) ? ( *a ) - ( *b ) : ( *b ) - ( *a ) ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = diff ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( double ( *value ) , double ( *mean ) , double ( *stdDeviation ) , @ float ( *temptemp1 ) ) { @ double zScore ; @ ; @ ; @ ; @ zScore = ( ( *value ) - ( *mean ) ) / ( *stdDeviation ) ; @ { @ ( *temptemp1 ) = zScore ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *confirm ) , float ( *degrees ) , float ( *temptemp1 ) ) { @ float gradians ; @ ; @ if ( ( *confirm ) == 'y' || ( *confirm ) == 'Y' ) { @ ; @ gradians = ( *degrees ) * ( 200.0 / 180.0 ) ; @ { @ ( *temptemp1 ) = gradians ; @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <string.h> @ @ int entry_point ( char ( *username ) , char ( *password ) ) { @ int isValid = 1 ; @ ; @ ; @ if ( username [ 0 ] != 'A' && username [ 0 ] != 'a' || @ username [ 1 ] != 'D' && username [ 1 ] != 'd' || @ username [ 2 ] != 'M' && username [ 2 ] != 'm' || @ username [ 3 ] != 'I' && username [ 3 ] != 'i' || @ username [ 4 ] != 'N' && username [ 4 ] != 'n' || username [ 5 ] != '\0' ) { @ isValid = 0 ; @ } @ if ( isValid && strcmp ( ( *password ) , "karunya" ) == 0 ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int sum ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ sum = 0 ; @ for ( i = 0 ; i < ( *num ) ; i++ ) sum = sum + arr [ i ] ; @ ; @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ ( *temptemp2 ) = i + 1 ; @ ( *temptemp3 ) = arr [ i ] ; @ ; @ } @ { @ ( *temptemp4 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ area = ( 5 * ( *side ) * ( *side ) ) / ( 4 * tan ( M_PI / 5 ) ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ if ( ( ( *number ) % 5 ) == 0 ) { @ { @ ( *temptemp1 ) = ++ ( *number ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *number ) += 2 ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int j ; @ int i ; @ int isPrime ; @ int count = 0 ; @ ; @ for ( i = 2 ; i <= ( *n ) ; i++ ) { @ isPrime = 1 ; @ for ( j = 2 ; j * j <= i ; j++ ) { @ if ( i % j == 0 ) { @ isPrime = 0 ; @ break ; @ } @ } @ if ( !isPrime ) { @ count++ ; @ } @ } @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mm ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float in ; @ ; @ in = ( *mm ) / 10 / 2.54 ; @ { @ ( *temptemp1 ) = ( *mm ) ; @ ( *temptemp2 ) = in ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ ; @ float perimeter = ( *side ) * 5 ; @ ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *d1 ) , float ( *d2 ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ area = ( ( *d1 ) * ( *d2 ) ) / 2 ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int array_1 [ 5 ] = { 0 , 1 , 2 , 3 , 4 } ; @ int array_2 [ 5 ] = { 5 , 6 , 7 , 8 , 9 } ; @ int i ; @ for ( i = 0 ; i < 5 ; i++ ) { @ array_1 [ i ] = array_1 [ i ] ^ array_2 [ i ] ; @ array_2 [ i ] = array_1 [ i ] ^ array_2 [ i ] ; @ array_1 [ i ] = array_1 [ i ] ^ array_2 [ i ] ; @ } ; @ for ( i = 0 ; i < 5 ; i++ ) { @ { @ ( *temptemp1 ) = i ; @ ( *temptemp2 ) = array_1 [ i ] ; @ ; @ } @ } ; @ for ( i = 0 ; i < 5 ; i++ ) { @ { @ ( *temptemp3 ) = i ; @ ( *temptemp4 ) = array_2 [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ if ( ( ( *c ) != 0 ) && ( ( *d ) != 0 ) ) { @ result = ( ( *a ) * ( *b ) ) / ( ( *c ) * ( *d ) ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *firstReal ) , float ( *firstImag ) , float ( *secondReal ) , @ float ( *secondImag ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float totalImag ; @ float totalReal ; @ ; @ ; @ ; @ ; @ totalReal = ( *firstReal ) + ( *secondReal ) ; @ totalImag = ( *firstImag ) + ( *secondImag ) ; @ { @ ( *temptemp1 ) = totalReal ; @ ( *temptemp2 ) = totalImag ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int j ; @ int i ; @ int count ; @ for ( i = 1 ; i <= 8 ; i++ ) { @ ; @ count = i % 2 == 0 ? 1 : 0 ; @ for ( j = 1 ; j <= i ; j++ ) { @ { @ ( *temptemp1 ) = count ; @ ; @ } @ count = 1 - count ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *millimeters ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float inches ; @ ; @ inches = ( *millimeters ) * 0.039 ; @ { @ ( *temptemp1 ) = ( *millimeters ) ; @ ( *temptemp2 ) = inches ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int nextEvenOrOdd ; @ ; @ if ( ( ( *num ) & 1 ) == 0 ) { @ nextEvenOrOdd = ( *num ) + 2 ; @ { @ ( *temptemp1 ) = nextEvenOrOdd ; @ ; @ } @ } else { @ nextEvenOrOdd = ( *num ) + 1 ; @ { @ ( *temptemp2 ) = nextEvenOrOdd ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int small ; @ int big ; @ ; @ ; @ ; @ big = ( *a ) ; @ if ( ( *b ) > big ) big = ( *b ) ; @ if ( ( *c ) > big ) big = ( *c ) ; @ small = ( *a ) ; @ if ( ( *b ) < small ) small = ( *b ) ; @ if ( ( *c ) < small ) small = ( *c ) ; @ { @ ( *temptemp1 ) = big ; @ ; @ } @ { @ ( *temptemp2 ) = small ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *x ) , int ( *y ) , int ( *z ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int min ; @ int max ; @ ; @ max = min = ( *x ) ; @ ; @ if ( ( *y ) > max ) max = ( *y ) ; @ if ( ( *y ) < min ) min = ( *y ) ; @ ; @ if ( ( *z ) > max ) max = ( *z ) ; @ if ( ( *z ) < min ) min = ( *z ) ; @ { @ ( *temptemp1 ) = max ; @ ; @ } @ { @ ( *temptemp2 ) = min ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *num ) , int ( *position ) , @ int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *size ) ; @ ; @ } @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = i + 1 ; @ ; @ } @ } ; @ ; @ if ( ( *position ) > ( *size ) + 1 || ( *position ) <= 0 ) { @ { @ ( *temptemp3 ) = ( *size ) ; @ ; @ } @ } else { @ for ( i = ( *size ) ; i >= ( *position ) ; i-- ) { @ arr [ i ] = arr [ i - 1 ] ; @ } @ arr [ ( *position ) - 1 ] = ( *num ) ; @ ( *size ) ++ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp4 ) = arr [ i ] ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *age ) ) { @ ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *baseLength ) , float ( *height ) , float ( *temptemp1 ) ) { @ float volume ; @ ; @ ; @ volume = ( ( *baseLength ) * ( *baseLength ) * ( *height ) ) / 3 ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = ( *n ) ; i >= 1 ; i-- ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *name ) , int ( *age ) , float ( *temptemp1 ) ) { @ float price = 600.0f ; @ ; @ ; @ if ( ( *age ) < 6 || ( *age ) >= 60 ) { @ price = 420.0f ; @ ; @ } ; @ { @ ( *temptemp1 ) = price ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int maxPos ; @ int minPos ; @ int maxVal ; @ int minVal ; @ int i ; @ ; @ for ( i = 0 ; i < 10 ; i++ ) { @ if ( i == 0 ) { @ minVal = maxVal = arr [ i ] ; @ minPos = maxPos = 0 ; @ } else { @ if ( arr [ i ] < minVal ) { @ minVal = arr [ i ] ; @ minPos = i ; @ } @ if ( arr [ i ] > maxVal ) { @ maxVal = arr [ i ] ; @ maxPos = i ; @ } @ } @ } @ { @ ( *temptemp1 ) = minVal ; @ ; @ } @ { @ ( *temptemp2 ) = minPos ; @ ; @ } @ { @ ( *temptemp3 ) = maxVal ; @ ; @ } @ { @ ( *temptemp4 ) = maxPos ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *first ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int second [ 100 ] ; @ int i ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ second [ i ] = first [ i ] ; @ { @ ( *temptemp2 ) = first [ i ] ; @ ; @ } @ if ( i == ( *size ) - 1 ) { @ ; @ } @ } @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp3 ) = second [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *height ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ ; @ ; @ surfaceArea = @ 2 * 3.14159 * ( *radius ) * ( *height ) + 2 * 3.14159 * ( *radius ) * ( *radius ) ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *pascals ) , float ( *temptemp1 ) ) { @ float atm ; @ ; @ atm = ( *pascals ) / 101325 ; @ ; @ { @ ( *temptemp1 ) = atm ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *array ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int temp ; @ int j ; @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp2 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( ( *n ) - 1 ) ; i++ ) { @ for ( j = 0 ; j < ( *n ) - i - 1 ; j++ ) { @ if ( array [ j ] > array [ j + 1 ] ) { @ temp = array [ j ] ; @ array [ j ] = array [ j + 1 ] ; @ array [ j + 1 ] = temp ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ ( *temptemp3 ) = array [ i ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *sideLength ) , float ( *temptemp1 ) ) { @ float volume ; @ ; @ volume = ( *sideLength ) * ( *sideLength ) * ( *sideLength ) ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ result = ( *num ) / 10 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *meters ) , float ( *temptemp1 ) ) { @ float conversionFactor ; @ float kilometers ; @ conversionFactor = 1000.0 ; @ ; @ kilometers = ( *meters ) / conversionFactor ; @ ; @ { @ ( *temptemp1 ) = kilometers ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *bs ) , float ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) , float ( *temptemp5 ) ) { @ float gs ; @ float cv ; @ float da ; @ float hra ; @ ; @ da = ( ( *bs ) >= 5000 ) ? 1.1 * ( *bs ) : ( ( ( *bs ) >= 3000 ) ? ( *bs ) : 0.9 * ( *bs ) ) ; @ hra = ( ( *bs ) >= 5000 ) ? 0.2 * ( *bs ) @ : ( ( ( *bs ) >= 3000 ) ? 0.15 * ( *bs ) : 0.1 * ( *bs ) ) ; @ cv = ( ( *bs ) >= 5000 ) ? 500 : ( ( ( *bs ) >= 3000 ) ? 400 : 300 ) ; @ gs = ( *bs ) + da + hra + cv ; @ { @ ( *temptemp1 ) = ( *bs ) ; @ ; @ } @ { @ ( *temptemp2 ) = da ; @ ; @ } @ { @ ( *temptemp3 ) = hra ; @ ; @ } @ { @ ( *temptemp4 ) = cv ; @ ; @ } @ { @ ( *temptemp5 ) = gs ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *num2 ) , char ( *ch ) , float ( *temptemp1 ) ) { @ float result ; @ int validOperation = 0 ; @ ; @ ; @ while ( !validOperation ) { @ ; @ switch ( ( *ch ) ) { @ case '+': @ case '-': @ case '*': @ case '/': @ case '%': @ validOperation = 1 ; @ break ; @ default: ; @ } @ } @ switch ( ( *ch ) ) { @ case '+': @ result = ( *num1 ) + ( *num2 ) ; @ break ; @ case '-': @ result = ( *num1 ) - ( *num2 ) ; @ break ; @ case '*': @ result = ( *num1 ) * ( *num2 ) ; @ break ; @ case '/': @ result = ( *num2 ) != 0 ? ( float ) ( *num1 ) / ( *num2 ) : 0 ; @ ; @ break ; @ case '%': @ result = ( *num2 ) != 0 ? ( *num1 ) % ( *num2 ) : 0 ; @ ; @ break ; @ } @ if ( ( *num2 ) != 0 || ( *ch ) != '/' && ( *ch ) != '%' ) { @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ result = ( *a ) >> 4 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *r1 ) , float ( *i1 ) , float ( *r2 ) , float ( *i2 ) , @ float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float iSum ; @ float rSum ; @ ; @ ; @ rSum = ( *r1 ) + ( *r2 ) ; @ iSum = ( *i1 ) + ( *i2 ) ; @ { @ ( *temptemp1 ) = rSum ; @ ( *temptemp2 ) = iSum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ ; @ result = ( *a ) ^ ( *b ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void func1 ( int n ) ; @ void func2 ( int n ) ; @ void func3 ( int n ) ; @ int entry_point ( int ( *n ) ) { @ ; @ ; @ func1 ( ( *n ) ) ; @ ; @ ; @ func2 ( ( *n ) ) ; @ ; @ ; @ func3 ( ( *n ) ) ; @ return 0 ; @ } @ void func1 ( int n ) { @ int i ; @ if ( n == 0 ) @ return ; @ else { @ func1 ( n - 1 ) ; @ for ( i = 1 ; i <= n ; i++ ) @ ; @ ; @ } @ } @ void func2 ( int n ) { @ int i ; @ if ( n == 0 ) @ return ; @ else { @ for ( i = 1 ; i <= n ; i++ ) @ ; @ ; @ func2 ( n - 1 ) ; @ } @ } @ void func3 ( int n ) { @ int i ; @ if ( n == 0 ) @ return ; @ else { @ for ( i = n ; i >= 1 ; i-- ) @ ; @ ; @ func3 ( n - 1 ) ; @ } @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) , int ( *temptemp5 ) , int ( *temptemp6 ) ) { @ int values [ 3 ] ; @ values [ 0 ] = 100 ; @ values [ 1 ] = 200 ; @ values [ 2 ] = 300 ; @ { @ ( *temptemp1 ) = values [ 0 ] ; @ ( *temptemp2 ) = values [ 1 ] ; @ ( *temptemp3 ) = values [ 2 ] ; @ ; @ } @ values [ 0 ] += 10 ; @ values [ 1 ] += 10 ; @ values [ 2 ] += 10 ; @ ; @ { @ ( *temptemp4 ) = values [ 0 ] ; @ ( *temptemp5 ) = values [ 1 ] ; @ ( *temptemp6 ) = values [ 2 ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) , int ( *temptemp5 ) , int ( *temptemp6 ) , @ int ( *temptemp7 ) , int ( *temptemp8 ) ) { @ int a = 5 ; @ int *pa ; @ int **ppa ; @ pa = &a ; @ ppa = &pa ; @ { @ ( *temptemp1 ) = &a ; @ ; @ } @ { @ ( *temptemp2 ) = pa ; @ ; @ } @ { @ ( *temptemp3 ) = *pa ; @ ; @ } @ { @ ( *temptemp4 ) = &pa ; @ ; @ } @ { @ ( *temptemp5 ) = ppa ; @ ; @ } @ { @ ( *temptemp6 ) = *ppa ; @ ; @ } @ { @ ( *temptemp7 ) = **ppa ; @ ; @ } @ { @ ( *temptemp8 ) = &ppa ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *h ) , float ( *temptemp1 ) ) { @ float volume ; @ float baseArea ; @ ; @ ; @ baseArea = ( sqrt ( 3 ) / 4 ) * ( *a ) * ( *a ) ; @ volume = ( baseArea * ( *h ) ) / 3 ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *num1 ) , float ( *num2 ) , float ( *num3 ) , float ( *num4 ) , @ float ( *temptemp1 ) ) { @ float sum ; @ ; @ sum = ( *num1 ) + ( *num2 ) + ( *num3 ) + ( *num4 ) ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <string.h> @ @ int entry_point ( char ( *user ) , int ( *input ) ) { @ ; @ ; @ if ( strcmp ( ( *user ) , "admin123" ) == 0 && ( *input ) == 4321 ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int nthOdd ; @ ; @ nthOdd = 2 * ( *n ) - 1 ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = nthOdd ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *inputWatts ) , float ( *temptemp1 ) ) { @ float outputHorsepower ; @ ; @ ; @ outputHorsepower = ( *inputWatts ) / 746.0f ; @ { @ ( *temptemp1 ) = outputHorsepower ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ if ( ( *c ) * ( *d ) == 0 ) { @ ; @ return -1 ; @ } @ result = ( ( *a ) * ( *b ) ) / ( ( *c ) * ( *d ) ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *digit ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int cnt ; @ int tNum ; @ int rem ; @ ; @ ; @ cnt = 0 ; @ tNum = ( *num ) ; @ while ( tNum > 0 ) { @ rem = tNum % 10 ; @ if ( rem == ( *digit ) ) cnt++ ; @ tNum /= 10 ; @ } @ { @ ( *temptemp1 ) = ( *digit ) ; @ ( *temptemp2 ) = ( *num ) ; @ ( *temptemp3 ) = cnt ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ result = ( *a ) << 4 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ char str2 [ 20 ] ; @ char str1 [ 20 ] ; @ int diff = 0 ; @ int i = 0 ; @ ; @ ; @ while ( str1 [ i ] != '\0' || str2 [ i ] != '\0' ) { @ if ( str1 [ i ] != str2 [ i ] ) { @ diff = 1 ; @ break ; @ } @ i++ ; @ } @ if ( !diff && str1 [ i ] == '\0' && str2 [ i ] == '\0' ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *digit ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int cnt ; @ int tNum ; @ int rem ; @ ; @ ; @ cnt = 0 ; @ tNum = ( *num ) ; @ while ( tNum > 0 ) { @ rem = tNum % 10 ; @ if ( rem == ( *digit ) ) cnt++ ; @ tNum /= 10 ; @ } @ { @ ( *temptemp1 ) = cnt ; @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float sqrt5 ; @ float goldenRatio ; @ float area ; @ ; @ sqrt5 = sqrt ( 5 ) ; @ goldenRatio = ( 1 + sqrt5 ) / 2 ; @ area = ( 5 * ( *side ) * ( *side ) ) / ( 4 * tan ( M_PI / 5 ) ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *h ) , float ( *temptemp1 ) ) { @ float volume ; @ ; @ ; @ volume = ( ( ( sqrt ( 3 ) / 4.0f ) * ( ( *a ) * ( *a ) ) ) * ( *h ) ) / 3.0f ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *upperLimit ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int div ; @ int num ; @ ; @ { @ ( *temptemp1 ) = ( *upperLimit ) ; @ ; @ } ; @ for ( num = 3 ; num < ( *upperLimit ) ; num += 2 ) { @ for ( div = 3 ; div * div <= num ; div += 2 ) { @ if ( num % div == 0 ) { @ goto not_prime ; @ } @ } @ { @ ( *temptemp2 ) = num ; @ ; @ } @ not_prime: ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ #include <string.h> @ @ int entry_point ( char ( *word ) ) { @ int leftIndex = 0 ; @ int rightIndex ; @ int isPalindrome = 1 ; @ ; @ rightIndex = strlen ( ( *word ) ) - 1 ; @ while ( leftIndex < rightIndex ) { @ if ( word [ leftIndex ] != word [ rightIndex ] ) { @ isPalindrome = 0 ; @ break ; @ } @ leftIndex++ ; @ rightIndex-- ; @ } @ if ( isPalindrome ) @ ; @ else @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *temptemp1 ) ) { @ int i = 1 ; @ float sum = 0 ; @ ; @ while ( i <= ( *n ) ) { @ sum += i ; @ i++ ; @ } @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <string.h> @ @ int entry_point ( char ( *username ) , char ( *password ) ) { @ ; @ ; @ if ( strcasecmp ( ( *username ) , "admin" ) == 0 && @ strcmp ( ( *password ) , "karunya" ) == 0 ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int min ; @ int max ; @ int i ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ if ( i == 0 ) { @ max = min = arr [ 0 ] ; @ } else { @ if ( arr [ i ] > max ) max = arr [ i ] ; @ if ( arr [ i ] < min ) min = arr [ i ] ; @ } @ } @ { @ ( *temptemp2 ) = max ; @ ; @ } @ { @ ( *temptemp3 ) = min ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int temp ; @ int i ; @ ; @ for ( i = 0 ; i < 10 ; i++ ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ } @ int largest = arr [ 0 ] ; @ int smallest = arr [ 0 ] ; @ for ( i = 1 ; i < 10 ; i++ ) { @ temp = arr [ i ] ; @ if ( temp > largest ) { @ largest = temp ; @ } @ if ( temp < smallest ) { @ smallest = temp ; @ } @ } @ { @ ( *temptemp2 ) = largest ; @ ; @ } @ { @ ( *temptemp3 ) = smallest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ result = ( *a ) * ( *b ) * ( *c ) * ( *d ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *item ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int found = 0 ; @ int i = 0 ; @ ; @ while ( i < ( *n ) ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ i++ ; @ } @ i = 0 ; @ ; @ while ( i < ( *n ) ) { @ if ( arr [ i ] == ( *item ) ) { @ found = 1 ; @ { @ ( *temptemp2 ) = ( *item ) ; @ ( *temptemp3 ) = i ; @ ; @ } @ break ; @ } @ i++ ; @ } @ if ( !found ) { @ { @ ( *temptemp4 ) = ( *item ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) ) { @ char inputName [ 100 ] ; @ ; @ int pos = 0 ; @ while ( inputName [ pos ] != '\0' ) { @ char ch = inputName [ pos ] ; @ if ( ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ) { @ inputName [ pos ] = ch - 32 ; @ } @ pos++ ; @ } ; @ { @ ( *temptemp1 ) = inputName ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int tempNumber ; @ int totalProduct = 1 ; @ int totalSum = 0 ; @ int digit ; @ ; @ tempNumber = ( *number ) ; @ while ( tempNumber != 0 ) { @ digit = tempNumber % 10 ; @ totalSum = totalSum + digit ; @ totalProduct = totalProduct * digit ; @ tempNumber = tempNumber / 10 ; @ } @ { @ ( *temptemp1 ) = ( *number ) ; @ ( *temptemp2 ) = totalSum ; @ ; @ } @ { @ ( *temptemp3 ) = ( *number ) ; @ ( *temptemp4 ) = totalProduct ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , float ( *temptemp3 ) , @ float ( *temptemp4 ) ) { @ int x = 30 ; @ float y = 40.5 ; @ int x_increment = 10 ; @ float y_decrement = 5.5 ; @ int new_x = x + x_increment ; @ float new_y = y - y_decrement ; @ { @ ( *temptemp1 ) = x ; @ ; @ } @ { @ ( *temptemp2 ) = new_x ; @ ; @ } @ { @ ( *temptemp3 ) = y ; @ ; @ } @ { @ ( *temptemp4 ) = new_y ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ if ( ( *n ) < 0 ) { @ ; @ exit ( 0 ) ; @ } @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ int i = ( *n ) ; @ while ( i ) { @ result = i * 2 + 2 ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ i = i + 1 ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *centimeters ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float inches_converted ; @ ; @ inches_converted = ( *centimeters ) / 2.54 ; @ { @ ( *temptemp1 ) = ( *centimeters ) ; @ ; @ } @ { @ ( *temptemp2 ) = inches_converted ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *lengthInMeters ) , float ( *temptemp1 ) ) { @ float lengthInYards ; @ ; @ ; @ lengthInYards = ( *lengthInMeters ) * 1.09 ; @ { @ ( *temptemp1 ) = lengthInYards ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int min ; @ int max ; @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *size ) ; @ ; @ } @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = i + 1 ; @ ; @ } @ } @ max = arr [ 0 ] ; @ min = arr [ 0 ] ; @ for ( i = 1 ; i < ( *size ) ; i++ ) { @ if ( arr [ i ] > max ) { @ max = arr [ i ] ; @ } @ if ( arr [ i ] < min ) { @ min = arr [ i ] ; @ } @ } @ { @ ( *temptemp3 ) = max ; @ ; @ } @ { @ ( *temptemp4 ) = min ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i ; @ int oddCount = 0 ; @ int evenCount = 0 ; @ ; @ for ( i = 0 ; i < ( *N ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ if ( ( ( arr [ i ] ) % 2 == 0 ? 1 : 0 ) ) { @ evenCount++ ; @ } else { @ oddCount++ ; @ } @ } @ { @ ( *temptemp2 ) = evenCount ; @ ; @ } @ { @ ( *temptemp3 ) = oddCount ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i = 1 ; @ int count = 0 ; @ ; @ while ( i * i <= ( *limit ) ) { @ count++ ; @ i++ ; @ } @ { @ ( *temptemp1 ) = ( *limit ) ; @ ; @ } @ { @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *octal ) , int ( *temptemp1 ) ) { @ int decimal ; @ int base = 1 ; @ ; @ while ( ( *octal ) > 0 ) { @ decimal = decimal + ( ( *octal ) % 10 ) * base ; @ ( *octal ) = ( *octal ) / 10 ; @ base = base * 8 ; @ } @ { @ ( *temptemp1 ) = decimal ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int diff ; @ ; @ ; @ diff = ( ( *a ) - ( *b ) ) * ( ( *a ) >= ( *b ) ) + ( ( *b ) - ( *a ) ) * ( ( *b ) > ( *a ) ) ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = diff ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *e ) , @ float ( *temptemp1 ) ) { @ float result ; @ float sum2 ; @ float sum1 ; @ ; @ sum1 = ( *a ) + ( *b ) + ( *c ) ; @ sum2 = ( *d ) + ( *e ) ; @ result = sum1 - sum2 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ area = ( 3 * sqrt ( 3 ) / 2 ) * ( ( *side ) * ( *side ) ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *range ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i ; @ ; @ ; @ for ( i = 1 ; i <= ( *range ) ; ++i ) { @ { @ ( *temptemp1 ) = ( *number ) ; @ ( *temptemp2 ) = i ; @ ( *temptemp3 ) = ( *number ) * i ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ #include <string.h> @ @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) , int ( *temptemp3 ) ) { @ char buffer [ 10 ] = { 0 } ; @ int i ; @ memset ( buffer , '-' , 9 ) ; @ ; @ for ( i = 0 ; i < 9 ; i++ ) { @ { @ ( *temptemp1 ) = buffer [ i ] ; @ ; @ } @ } ; @ memset ( buffer , '1' , 9 ) ; @ ; @ for ( i = 0 ; i < 9 ; i++ ) { @ { @ ( *temptemp2 ) = buffer [ i ] ; @ ; @ } @ } ; @ memset ( buffer , 0x1F , 9 ) ; @ ; @ for ( i = 0 ; i < 10 ; i++ ) { @ { @ ( *temptemp3 ) = buffer [ i ] ; @ ; @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *fah ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float cel ; @ ; @ cel = ( ( *fah ) - 32 ) / 1.8 ; @ { @ ( *temptemp1 ) = ( *fah ) ; @ ( *temptemp2 ) = cel ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ result = ( *a ) + 10 ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ if ( ( *num ) <= 0 ) { @ ; @ exit ( 0 ) ; @ } else if ( ( *num ) == 1 ) { @ ; @ exit ( 0 ) ; @ } @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ int i = 2 ; @ { @ while ( ( *num ) % i == 0 ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ ( *num ) /= i ; @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *A ) , int ( *B ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , int ( *temptemp4 ) , @ int ( *temptemp5 ) , int ( *temptemp6 ) ) { @ ; @ ; @ ; @ if ( ( *number ) % ( *A ) != 0 || ( *number ) % ( *B ) != 0 ) goto not_divisible ; @ { @ ( *temptemp1 ) = ( *number ) ; @ ( *temptemp2 ) = ( *A ) ; @ ( *temptemp3 ) = ( *B ) ; @ ; @ } @ goto end ; @ not_divisible : { @ ( *temptemp4 ) = ( *number ) ; @ ( *temptemp5 ) = ( *A ) ; @ ( *temptemp6 ) = ( *B ) ; @ ; @ } @ end: @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int value = 3412 ; @ { @ ( *temptemp1 ) = value ; @ ; @ } @ { @ ( *temptemp2 ) = value ; @ ; @ } @ { @ ( *temptemp3 ) = value ; @ ; @ } @ { @ ( *temptemp4 ) = value ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *R ) , float ( *r ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ ; @ ; @ surfaceArea = @ 4 * 3.14159265358979323846 * 3.14159265358979323846 * ( *R ) * ( *r ) ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ perimeter = ( *side ) * 6 ; @ ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int a = ( 4 , 6 , 8 ) ; @ { @ ( *temptemp1 ) = a ; @ ; @ } @ int num3 = 15 ; @ int num2 = 10 ; @ int num1 = 5 ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int key ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 1 ; i < ( *size ) ; i++ ) { @ key = arr [ i ] ; @ j = i - 1 ; @ while ( j >= 0 && arr [ j ] > key ) { @ arr [ j + 1 ] = arr [ j ] ; @ j = j - 1 ; @ } @ arr [ j + 1 ] = key ; @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = arr [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ #include <string.h> @ @ int entry_point ( char ( *user ) , int ( *input ) ) { @ int password = 1234 ; @ int authFlag = 0 ; @ char username [ ] = "user123" ; @ ; @ ; @ if ( ( strcmp ( ( *user ) , username ) == 0 ) && ( ( *input ) == password ) ) { @ authFlag = 1 ; @ } @ if ( authFlag == 1 ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *num ) , float ( *temptemp1 ) ) { @ float sum = 0 ; @ int count ; @ ; @ for ( count = 1 ; count <= 4 ; count++ ) { @ sum += ( *num ) ; @ } @ sum -= ( *num ) ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *start ) , int ( *end ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ ; @ ; @ { @ ( *temptemp1 ) = ( *start ) ; @ ( *temptemp2 ) = ( *end ) ; @ ; @ } @ int counter = ( *start ) ; @ while ( counter <= ( *end ) ) { @ if ( counter % 2 == 0 ) { @ { @ ( *temptemp3 ) = counter ; @ ; @ } @ } @ counter++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mph1 ) , float ( *mph2 ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ float knots2 ; @ float knots1 ; @ ; @ ; @ knots1 = ( *mph1 ) / 1.15078f ; @ knots2 = ( *mph2 ) / 1.15078f ; @ { @ ( *temptemp1 ) = knots1 ; @ ; @ } @ { @ ( *temptemp2 ) = knots2 ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , int ( *A ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int min_idx ; @ int j ; @ int i ; @ int Temp ; @ ; @ ; @ for ( i = 0 ; i < ( *N ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *N ) - 1 ; i++ ) { @ min_idx = i ; @ for ( j = i + 1 ; j < ( *N ) ; j++ ) { @ if ( A [ j ] < A [ min_idx ] ) { @ min_idx = j ; @ } @ } @ Temp = A [ i ] ; @ A [ i ] = A [ min_idx ] ; @ A [ min_idx ] = Temp ; @ } ; @ for ( i = 0 ; i < ( *N ) ; i++ ) { @ { @ ( *temptemp2 ) = A [ i ] ; @ ; @ } @ } ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *base ) , float ( *slant ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ ; @ area = pow ( ( *base ) , 2 ) + 4 * 0.5 * ( *base ) * ( *slant ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *height ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ ; @ ; @ float slantHeight = sqrt ( ( *height ) * ( *height ) + ( *radius ) * ( *radius ) ) ; @ surfaceArea = 3.14159 * ( *radius ) * ( ( *radius ) + slantHeight ) ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ result = ( *a ) >> 3 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ switch ( ( *number ) % 2 ) { @ case 0: { @ ( *temptemp1 ) = ( *number ) ; @ ; @ } break ; @ case 1: { @ ( *temptemp2 ) = ( *number ) ; @ ; @ } break ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *arr ) , int ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) ) { @ int i ; @ float temp ; @ float sumOfSquares = 0 ; @ float variance ; @ float mean ; @ float sum = 0 ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ sum += arr [ i ] ; @ } @ mean = sum / ( *n ) ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ temp = arr [ i ] - mean ; @ sumOfSquares += temp * temp ; @ } @ variance = sumOfSquares / ( *n ) ; @ ; @ { @ ( *temptemp2 ) = mean ; @ ; @ } ; @ { @ ( *temptemp3 ) = variance ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ float meanPow ; @ float bcPow ; @ float acPow ; @ float abPow ; @ float p = 3.14159265358979323846 ; @ ; @ ; @ ; @ abPow = pow ( ( *a ) * ( *b ) , 1.6f ) ; @ acPow = pow ( ( *a ) * ( *c ) , 1.6f ) ; @ bcPow = pow ( ( *b ) * ( *c ) , 1.6f ) ; @ meanPow = ( abPow + acPow + bcPow ) / 3 ; @ surfaceArea = 4 * p * pow ( meanPow , 1 / 1.6f ) ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *rows ) ) { @ int space ; @ int j ; @ int i ; @ ; @ if ( ( *rows ) < 1 ) { @ ; @ return -1 ; @ } @ for ( i = 1 ; i <= ( *rows ) ; i++ ) { @ for ( j = 1 ; j <= ( *rows ) ; j++ ) { @ if ( j == i || j == ( *rows ) - i + 1 ) { @ ; @ } else { @ ; @ } @ } @ for ( j = ( *rows ) + 1 ; j <= 2 * ( *rows ) ; j++ ) { @ if ( j == i + ( *rows ) || j == 3 * ( *rows ) - i + 1 ) { @ ; @ } else { @ ; @ } @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *x ) , int ( *y ) , int ( *z ) , int ( *temptemp1 ) ) { @ int largest ; @ ; @ if ( ( *x ) > ( *y ) ) { @ if ( ( *x ) > ( *z ) ) @ largest = ( *x ) ; @ else @ largest = ( *z ) ; @ } else { @ if ( ( *y ) > ( *z ) ) @ largest = ( *y ) ; @ else @ largest = ( *z ) ; @ } @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *edge ) , float ( *height ) , float ( *temptemp1 ) ) { @ float volOfPyramid ; @ float areaOfBase ; @ float root3 = sqrt ( 3 ) ; @ ; @ ; @ areaOfBase = ( ( 3 * root3 ) / 2 ) * ( ( *edge ) * ( *edge ) ) ; @ volOfPyramid = areaOfBase * ( *height ) / 3 ; @ ; @ { @ ( *temptemp1 ) = volOfPyramid ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ int k ; @ int j ; @ int i ; @ int blank = 0 ; @ int lines = 6 ; @ char symbol = 'A' ; @ int temp ; @ int diff [ 7 ] = { 0 , 1 , 3 , 5 , 7 , 9 , 11 } ; @ k = 0 ; @ for ( i = lines ; i >= 0 ; i-- ) { @ ; @ symbol = 'A' ; @ for ( j = i ; j >= 0 ; j-- ) { @ { @ ( *temptemp1 ) = symbol++ ; @ ; @ } @ } @ blank = diff [ k++ ] ; @ for ( j = 0 ; j < blank ; j++ ) { @ ; @ } @ symbol = 'F' - ( blank / 2 ) ; @ if ( blank == 0 ) { @ temp = i - 1 ; @ } else { @ temp = i ; @ } @ for ( j = 0 ; j <= temp ; j++ ) { @ { @ ( *temptemp2 ) = symbol-- ; @ ; @ } @ } @ } @ return ( 0 ) ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) , int ( *temptemp5 ) , int ( *temptemp6 ) , @ int ( *temptemp7 ) ) { @ int int_var ; @ float float_var ; @ char char_var ; @ int int_array [ 5 ] ; @ int size ; @ { @ ( *temptemp1 ) = sizeof ( int_var ) ; @ ; @ } @ { @ ( *temptemp2 ) = sizeof ( float_var ) ; @ ; @ } @ size = sizeof ( char_var ) ; @ { @ ( *temptemp3 ) = sizeof ( char_var ) ; @ ; @ } @ { @ ( *temptemp4 ) = sizeof ( short ) ; @ ; @ } @ { @ ( *temptemp5 ) = sizeof ( long ) ; @ ; @ } @ { @ ( *temptemp6 ) = sizeof ( double ) ; @ ; @ } @ { @ ( *temptemp7 ) = sizeof ( int_array ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *basicPay ) , float ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) ) { @ float employeePercentage = 12.5f ; @ float employerPercentage = 12.0f ; @ ; @ { @ ( *temptemp1 ) = ( *basicPay ) ; @ ; @ } @ { @ ( *temptemp2 ) = ( ( *basicPay ) * employeePercentage ) / 100 ; @ ; @ } @ { @ ( *temptemp3 ) = ( ( *basicPay ) * employerPercentage ) / 100 ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ area = 3.14159 * ( *radius ) * ( *radius ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ float ( *temptemp3 ) ) { @ float rem ; @ ; @ ; @ for ( rem = ( *a ) ; rem >= ( *b ) ; rem -= ( *b ) ) @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = rem ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *num ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , int ( *temptemp4 ) , @ int ( *temptemp5 ) ) { @ int count = 0 ; @ int i ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ if ( arr [ i ] == ( *num ) ) { @ { @ ( *temptemp2 ) = ( *num ) ; @ ( *temptemp3 ) = i + 1 ; @ ; @ } @ count++ ; @ break ; @ } @ } @ if ( count == 0 ) { @ { @ ( *temptemp4 ) = ( *num ) ; @ ; @ } @ } else { @ { @ ( *temptemp5 ) = count ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ int nthCubic = 1 ; @ ; @ if ( ( *n ) <= 0 ) { @ ; @ return 1 ; @ } @ while ( count < 3 ) { @ nthCubic *= ( *n ) ; @ count++ ; @ } @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = nthCubic ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int addTwoNumbers ( int x , int y ) { return x + y ; } @ int entry_point ( int ( *temptemp1 ) ) { @ int sum ; @ int b = 20 ; @ int a = 10 ; @ sum = addTwoNumbers ( a , b ) ; @ ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *r ) , float ( *h ) , float ( *temptemp1 ) ) { @ float vol ; @ ; @ ; @ vol = 3.14159 * ( *r ) * ( *r ) * ( *h ) ; @ ; @ { @ ( *temptemp1 ) = vol ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *sideLength ) , float ( *temptemp1 ) ) { @ ; @ ( *sideLength ) = ( *sideLength ) * ( *sideLength ) * ( *sideLength ) ; @ ; @ { @ ( *temptemp1 ) = ( *sideLength ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *kilometers ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float miles ; @ float conversionFactor = 1.609344 ; @ ; @ miles = ( *kilometers ) / conversionFactor ; @ { @ ( *temptemp1 ) = ( *kilometers ) ; @ ; @ } @ { @ ( *temptemp2 ) = miles ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int sum ; @ int j ; @ int i ; @ int count = 0 ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = 1 ; i <= ( *n ) ; i++ ) { @ sum = 0 ; @ for ( j = 1 ; j <= i / 2 ; j++ ) { @ if ( i % j == 0 ) { @ sum += j ; @ } @ } @ if ( sum == i ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ count++ ; @ } @ } @ { @ ( *temptemp3 ) = ( *n ) ; @ ( *temptemp4 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *millimeters ) , float ( *temptemp1 ) ) { @ ; @ float centimeters = ( *millimeters ) / 10.0 ; @ ; @ { @ ( *temptemp1 ) = centimeters ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *height ) , @ float ( *temptemp1 ) ) { @ float volume ; @ ; @ ; @ ; @ volume = ( ( *length ) * ( *width ) * ( *height ) ) / 3 ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ ; @ int lastDigit = ( *num ) % 10 ; @ int result = ( *num ) - lastDigit ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ if ( ( *num ) % 2 == 0 ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *baseLength ) , float ( *slantHeight ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ ; @ ; @ surfaceArea = @ ( *baseLength ) * ( *baseLength ) + 2 * ( *baseLength ) * ( *slantHeight ) ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *base1 ) , float ( *base2 ) , float ( *vert_height ) , @ float ( *temptemp1 ) ) { @ float calculated_area ; @ ; @ ; @ ; @ calculated_area = 0.5 * ( ( *base1 ) + ( *base2 ) ) * ( *vert_height ) ; @ ; @ { @ ( *temptemp1 ) = calculated_area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float area ; @ ; @ area = 3.14159 * ( *radius ) * ( *radius ) ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } ; @ { @ ( *temptemp2 ) = ( *radius ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) , int ( *temptemp5 ) , int ( *temptemp6 ) ) { @ int x = 100 ; @ { @ ( *temptemp1 ) = x ; @ ; @ } @ x = 200 ; @ { @ ( *temptemp2 ) = x ; @ ; @ } @ x = 300 ; @ { @ ( *temptemp3 ) = x ; @ ; @ } @ x = 100 + 10 ; @ ; @ { @ ( *temptemp4 ) = x ; @ ; @ } @ x = 200 + 10 ; @ { @ ( *temptemp5 ) = x ; @ ; @ } @ x = 300 + 10 ; @ { @ ( *temptemp6 ) = x ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *kmph ) , char ( *temptemp1 ) , char ( *temptemp2 ) , @ float ( *temptemp3 ) ) { @ float knots ; @ char inputMsg [ ] = "Enter speed in kilometers per hour: " ; @ char outputMsg [ ] = "The speed in knots is " ; @ { @ ( *temptemp1 ) = inputMsg ; @ ; @ } @ knots = ( *kmph ) / 1.852 ; @ { @ ( *temptemp2 ) = outputMsg ; @ ; @ } @ { @ ( *temptemp3 ) = knots ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i ; @ ; @ if ( ( *num ) < 1 ) { @ ; @ exit ( 0 ) ; @ } else if ( ( *num ) == 1 ) { @ ; @ exit ( 0 ) ; @ } @ if ( ( *num ) & 1 ) { @ for ( i = 2 ; i <= sqrt ( ( *num ) ) ; i++ ) { @ if ( ! ( ( *num ) % i ) ) break ; @ } @ } @ if ( i > sqrt ( ( *num ) ) ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ result = ( *num ) & 1 ; @ if ( result == 0 ) { @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *breadth ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ area = ( *length ) * ( *breadth ) ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void fibonacci ( int , int , int ) ; @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ int b = 1 ; @ int a = 0 ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ fibonacci ( a , b , ( *n ) ) ; @ ; @ return 0 ; @ } @ void fibonacci ( int a , int b , int n ) { @ if ( n != 0 ) { @ ; @ fibonacci ( b , a + b , n - 1 ) ; @ } @ }
#include <stdio.h> @ @ int entry_point ( float ( *inputCm ) , float ( *temptemp1 ) ) { @ float outputM ; @ ; @ outputM = ( *inputCm ) / 100.0 ; @ { @ ( *temptemp1 ) = outputM ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *item ) , char ( *cont ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int i ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ while ( ( *cont ) == 'y' || ( *cont ) == 'Y' ) { @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ if ( arr [ i ] == ( *item ) ) { @ { @ ( *temptemp2 ) = ( *item ) ; @ ( *temptemp3 ) = i ; @ ; @ } @ break ; @ } @ } @ if ( i == ( *n ) ) { @ { @ ( *temptemp4 ) = ( *item ) ; @ ; @ } @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i = 2 ; @ char isPrime = 1 ; @ ; @ while ( i <= ( *number ) / 2 ) { @ if ( ( *number ) % i == 0 ) { @ isPrime = 0 ; @ break ; @ } @ i++ ; @ } @ if ( isPrime == 1 && ( *number ) > 1 ) { @ ( *temptemp1 ) = ( *number ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *number ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int addTwoNumbers ( int x , int y ) { return x + y ; } @ int entry_point ( int ( *temptemp1 ) ) { @ int sum ; @ int b = 20 ; @ int a = 10 ; @ sum = addTwoNumbers ( a , b ) ; @ int result = sum ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int nthCubic ; @ ; @ if ( ( *n ) <= 0 ) { @ ; @ return 1 ; @ } @ nthCubic = ( *n ) * ( *n ) * ( *n ) ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = nthCubic ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int j ; @ int i ; @ int composite ; @ int count = 0 ; @ ; @ for ( i = 4 ; i <= ( *n ) ; i++ ) { @ composite = 0 ; @ for ( j = 2 ; j < i ; j++ ) { @ if ( i % j == 0 ) { @ composite = 1 ; @ break ; @ } @ } @ if ( composite ) { @ count++ ; @ } @ } @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *d1 ) , float ( *d2 ) , float ( *temptemp1 ) ) { @ ; @ ; @ float area = ( ( *d1 ) * ( *d2 ) ) / 2 ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , float ( *temptemp3 ) , @ float ( *temptemp4 ) ) { @ int j ; @ int i ; @ float l ; @ float k ; @ i = 10 , j = 20 , k = 30.5 , l = 40.5 ; @ { @ ( *temptemp1 ) = i ; @ ; @ } @ { @ ( *temptemp2 ) = j ; @ ; @ } @ { @ ( *temptemp3 ) = k ; @ ; @ } @ { @ ( *temptemp4 ) = l ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int sum = 0 ; @ int first = 8 ; @ int last = 400 - ( 400 % 8 ) ; @ sum = ( last - first ) / 8 + 1 ; @ ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *inputSide ) , float ( *temptemp1 ) ) { @ float resultArea ; @ ; @ resultArea = ( *inputSide ) * ( *inputSide ) ; @ ; @ { @ ( *temptemp1 ) = resultArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *upperLimit ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int div ; @ int num ; @ int isPrime ; @ ; @ { @ ( *temptemp1 ) = ( *upperLimit ) ; @ ; @ } @ for ( num = 2 ; num < ( *upperLimit ) ; num++ ) { @ isPrime = 1 ; @ for ( div = 2 ; div * div <= num ; div++ ) { @ if ( num % div == 0 ) { @ isPrime = 0 ; @ break ; @ } @ } @ if ( isPrime ) { @ { @ ( *temptemp2 ) = num ; @ ; @ } @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *bar ) , float ( *temptemp1 ) ) { @ float atm ; @ ; @ atm = ( *bar ) / 1.013 ; @ { @ ( *temptemp1 ) = atm ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ result = ( *a ) & 3 ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int sum = 0 ; @ ; @ if ( ( *n ) < 0 ) { @ ; @ exit ( 0 ) ; @ } @ int i = 1 ; @ do { @ sum += i ; @ i++ ; @ } while ( i <= ( *n ) ) ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = sum ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ result = ( *a ) * 16 ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int needToSort ; @ int temp ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ do { @ needToSort = 0 ; @ for ( i = 0 ; i < ( *size ) - 1 ; i++ ) { @ if ( arr [ i ] < arr [ i + 1 ] ) { @ temp = arr [ i ] ; @ arr [ i ] = arr [ i + 1 ] ; @ arr [ i + 1 ] = temp ; @ needToSort = 1 ; @ } @ } @ } while ( needToSort ) ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = arr [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int tempNum ; @ int numDigits ; @ int remainder ; @ int originalNum ; @ int i ; @ int count = 0 ; @ float sum ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = 1 ; i <= ( *n ) ; i++ ) { @ sum = 0 ; @ originalNum = i ; @ tempNum = originalNum ; @ numDigits = 0 ; @ while ( tempNum != 0 ) { @ tempNum /= 10 ; @ numDigits++ ; @ } @ tempNum = originalNum ; @ while ( tempNum != 0 ) { @ remainder = tempNum % 10 ; @ sum += pow ( remainder , numDigits ) ; @ tempNum /= 10 ; @ } @ if ( ( int ) sum == i ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ count++ ; @ } @ } @ { @ ( *temptemp3 ) = ( *n ) ; @ ( *temptemp4 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ if ( ( *number ) % 7 == 0 ) { @ result = ( *number ) + 1 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ result = ( *number ) + 2 ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) ) { @ int i ; @ int cnt ; @ int bin [ 32 ] ; @ ; @ cnt = 0 ; @ while ( ( *number ) > 0 ) { @ bin [ cnt ] = ( *number ) % 2 ; @ ( *number ) = ( *number ) / 2 ; @ cnt++ ; @ } ; @ for ( i = ( cnt - 1 ) ; i >= 0 ; i-- ) { @ ( *temptemp1 ) = bin [ i ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *temptemp1 ) ) { @ ; @ ; @ float lengthSum = ( *length ) + ( *width ) ; @ float perimeter = 2 * lengthSum ; @ ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , float ( *temptemp2 ) , int ( *temptemp3 ) , @ float ( *temptemp4 ) ) { @ float fact = 1 ; @ ; @ int i = 1 ; @ while ( i <= ( *n ) ) { @ fact *= i ; @ i++ ; @ } @ float factGeneral = fact ; @ float factScientific = fact ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = factGeneral ; @ ; @ } @ { @ ( *temptemp3 ) = ( *n ) ; @ ( *temptemp4 ) = factScientific ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int tempNumber ; @ int rem = 0 ; @ int sum = 0 ; @ ; @ tempNumber = ( *number ) ; @ while ( tempNumber != 0 ) { @ rem = tempNumber % 10 ; @ sum = sum + ( rem * rem * rem ) ; @ tempNumber /= 10 ; @ } @ if ( sum == ( *number ) ) { @ ( *temptemp1 ) = ( *number ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *number ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *meters ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float yards ; @ float conversionFactor = 1.09 ; @ ; @ yards = ( *meters ) * conversionFactor ; @ { @ ( *temptemp1 ) = ( *meters ) ; @ ( *temptemp2 ) = yards ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *arr ) , int ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) ) { @ int i ; @ float stdDeviation ; @ float sumOfSquares = 0 ; @ float variance = 0 ; @ float mean ; @ float sum = 0 ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ sum += arr [ i ] ; @ } @ mean = sum / ( *n ) ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ sumOfSquares += ( arr [ i ] - mean ) * ( arr [ i ] - mean ) ; @ } @ variance = sumOfSquares / ( *n ) ; @ stdDeviation = sqrtf ( variance ) ; @ ; @ { @ ( *temptemp2 ) = mean ; @ ; @ } ; @ { @ ( *temptemp3 ) = variance ; @ ; @ } ; @ { @ ( *temptemp4 ) = stdDeviation ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *base ) , float ( *height ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ ; @ area = ( *base ) * ( *height ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *fah ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float cel ; @ ; @ cel = ( ( *fah ) - 32 ) * 5 / 9 ; @ { @ ( *temptemp1 ) = ( *fah ) ; @ ( *temptemp2 ) = cel ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int product ; @ int j ; @ int i = 1 ; @ while ( i <= 10 ) { @ j = 1 ; @ while ( j <= i ) { @ product = i * j ; @ { @ ( *temptemp1 ) = product ; @ ; @ } @ j++ ; @ } ; @ i++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *a ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int result = 0 ; @ int num2 ; @ int num1 ; @ ; @ ; @ switch ( ( *a ) ) { @ case '+': { @ ( *temptemp1 ) = num1 + num2 ; @ ; @ } break ; @ case '-': { @ ( *temptemp2 ) = num1 - num2 ; @ ; @ } break ; @ case '*': { @ ( *temptemp3 ) = num1 * num2 ; @ ; @ } break ; @ case '/': { @ ( *temptemp4 ) = num1 / num2 ; @ ; @ } break ; @ default: ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) ) { @ int shift ; @ int foundOne = 0 ; @ ; @ ; @ for ( shift = 31 ; shift >= 0 ; shift-- ) { @ if ( ( *number ) & ( 1 << shift ) ) { @ ; @ foundOne = 1 ; @ } else if ( foundOne ) { @ ; @ } @ } ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int cnt = 0 ; @ ; @ if ( ( *num ) < 0 ) { @ ( *num ) = - ( *num ) ; @ } @ do { @ cnt++ ; @ ( *num ) /= 10 ; @ } while ( ( *num ) > 0 ) ; @ ; @ { @ ( *temptemp1 ) = cnt ; @ ; @ } ; @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( double ( *x ) ) { @ double result ; @ ; @ result = exp ( ( *x ) ) ; @ { ; } @ return 0 ; @ }
#include <stdio.h> @ @ void readArray ( int arr [ ] , int size ) { @ int i = 0 ; @ ; @ for ( i = 0 ; i < size ; i++ ) { @ ; @ } @ } @ void printArray ( int arr [ ] , int size ) { @ int i = 0 ; @ ; @ for ( i = 0 ; i < size ; i++ ) { @ ; @ } ; @ } @ void replaceEvenOdd ( int arr [ ] , int size ) { @ int i = 0 ; @ for ( i = 0 ; i < size ; i++ ) { @ if ( arr [ i ] % 2 == 0 ) @ arr [ i ] = 0 ; @ else @ arr [ i ] = 1 ; @ } @ } @ int entry_point ( ) { @ int arr [ 10 ] ; @ readArray ( arr , 10 ) ; @ ; @ printArray ( arr , 10 ) ; @ replaceEvenOdd ( arr , 10 ) ; @ ; @ printArray ( arr , 10 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *baseSide ) , float ( *pyramidHeight ) , float ( *temptemp1 ) ) { @ float calculatedVolume ; @ ; @ ; @ calculatedVolume = ( *baseSide ) * ( *baseSide ) * ( *pyramidHeight ) / 3 ; @ ; @ { @ ( *temptemp1 ) = calculatedVolume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radians ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float degrees ; @ ; @ degrees = ( *radians ) * ( 180.0 / 3.14 ) ; @ { @ ( *temptemp1 ) = ( *radians ) ; @ ( *temptemp2 ) = degrees ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int isPrime ( int num ) { @ if ( num <= 1 ) return 0 ; @ for ( int i = 2 ; i * i <= num ; i++ ) { @ if ( num % i == 0 ) return 0 ; @ } @ return 1 ; @ } @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ ; @ int num = 2 ; @ int nthPrime = 2 ; @ while ( count < ( *n ) ) { @ if ( isPrime ( num ) ) { @ nthPrime = num ; @ count++ ; @ } @ num++ ; @ } @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = nthPrime ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *gradians ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float PI = 3.14159265 ; @ float radians ; @ ; @ radians = ( *gradians ) * ( PI / 200.0 ) ; @ { @ ( *temptemp1 ) = ( *gradians ) ; @ ( *temptemp2 ) = radians ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *principal ) , float ( *rate ) , float ( *year ) , @ float ( *temptemp1 ) ) { @ float ci ; @ float ratePlusOne ; @ ; @ ; @ ; @ ratePlusOne = 1 + ( *rate ) / 100 ; @ ci = ( *principal ) * ( pow ( ratePlusOne , ( *year ) ) - 1 ) ; @ { @ ( *temptemp1 ) = ci ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int diff ; @ ; @ ; @ diff = ( ( *a ) > ( *b ) ) ? ( ( *a ) - ( *b ) ) : ( ( *b ) - ( *a ) ) ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = diff ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *degrees ) , float ( *temptemp1 ) ) { @ float radians ; @ ; @ radians = ( *degrees ) * ( 3.14f / 180.0f ) ; @ ; @ { @ ( *temptemp1 ) = radians ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *r1 ) , float ( *r2 ) , float ( *temptemp1 ) ) { @ float sumCircumference ; @ ; @ ; @ sumCircumference = 2 * 3.14159 * ( ( *r1 ) + ( *r2 ) ) ; @ ; @ { @ ( *temptemp1 ) = sumCircumference ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *num2 ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int product = 0 ; @ int count = 0 ; @ ; @ ; @ while ( count < ( *num2 ) ) { @ product += ( *num1 ) ; @ count++ ; @ } ; @ { @ ( *temptemp1 ) = ( *num1 ) ; @ ; @ } ; @ { @ ( *temptemp2 ) = ( *num2 ) ; @ ; @ } ; @ { @ ( *temptemp3 ) = product ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *array ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int j ; @ int i ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *n ) - 1 ; i++ ) { @ for ( j = 0 ; j < ( *n ) - i - 1 ; j++ ) { @ if ( array [ j ] > array [ j + 1 ] ) { @ int temp = array [ j + 1 ] ; @ array [ j + 1 ] = array [ j ] ; @ array [ j ] = temp ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp2 ) = array [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *h ) , float ( *temptemp1 ) ) { @ float A_total ; @ float A_side ; @ float A_base ; @ ; @ ; @ A_base = ( *a ) * ( *a ) ; @ A_side = 2 * ( *a ) * ( *h ) ; @ A_total = A_base + A_side ; @ { @ ( *temptemp1 ) = A_total ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ void entry_point ( int ( *n ) , int ( *ar ) , int ( *temptemp1 ) ) { @ int temp ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) i = 0 ; @ while ( i < ( *n ) ) { @ if ( i == 0 || ar [ i - 1 ] <= ar [ i ] ) @ i++ ; @ else { @ temp = ar [ i - 1 ] ; @ ar [ i - 1 ] = ar [ i ] ; @ ar [ i ] = temp ; @ i = i - 1 ; @ } @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ ( *temptemp1 ) = ar [ i ] ; @ ; @ } @ }
#include <stdio.h> @ @ int a = 10 ; @ void fun ( void ) ; @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int a = 20 ; @ int b = 30 ; @ { @ ( *temptemp1 ) = a ; @ ( *temptemp2 ) = b ; @ ; @ } @ fun ( ) ; @ { @ ( *temptemp3 ) = b ; @ ; @ } @ return 0 ; @ } @ void fun ( void ) { @ int b = 40 ; @ ; @ ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *w ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float hp ; @ ; @ hp = ( *w ) / 746.0f ; @ { @ ( *temptemp1 ) = ( *w ) ; @ ( *temptemp2 ) = hp ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ ( *a ) = ( *a ) + ( *b ) ; @ ( *b ) = ( *a ) - ( *b ) ; @ ( *a ) = ( *a ) - ( *b ) ; @ ; @ { @ ( *temptemp3 ) = ( *a ) ; @ ( *temptemp4 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *meters ) , float ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) ) { @ float backToMeters ; @ float feet ; @ float metersToFeet = 3.28084f ; @ float feetToMeters = 0.3048f ; @ ; @ feet = ( *meters ) * metersToFeet ; @ backToMeters = feet * feetToMeters ; @ { @ ( *temptemp1 ) = ( *meters ) ; @ ( *temptemp2 ) = feet ; @ ; @ } @ { @ ( *temptemp3 ) = feet ; @ ( *temptemp4 ) = backToMeters ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *count ) , float ( *data ) , int ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) , float ( *temptemp5 ) ) { @ int idx ; @ float cubedSum = 0 ; @ float skewnessValue ; @ float standardDev ; @ float varianceValue = 0 ; @ float meanValue ; @ float sumOfData = 0 ; @ ; @ for ( idx = 0 ; idx < ( *count ) ; idx++ ) { @ { @ ( *temptemp1 ) = idx + 1 ; @ ; @ } @ sumOfData += data [ idx ] ; @ } @ meanValue = sumOfData / ( *count ) ; @ for ( idx = 0 ; idx < ( *count ) ; idx++ ) { @ varianceValue += pow ( data [ idx ] - meanValue , 2 ) ; @ } @ varianceValue = varianceValue / ( *count ) ; @ standardDev = sqrt ( varianceValue ) ; @ for ( idx = 0 ; idx < ( *count ) ; idx++ ) { @ cubedSum += pow ( data [ idx ] - meanValue , 3 ) ; @ } @ skewnessValue = ( ( *count ) / ( ( ( *count ) - 1.0f ) * ( ( *count ) - 2.0f ) ) ) * @ ( cubedSum / ( *count ) ) / pow ( standardDev , 3 ) ; @ ; @ { @ ( *temptemp2 ) = meanValue ; @ ; @ } ; @ { @ ( *temptemp3 ) = varianceValue ; @ ; @ } ; @ { @ ( *temptemp4 ) = standardDev ; @ ; @ } ; @ { @ ( *temptemp5 ) = skewnessValue ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ char i = 'A' ; @ ; @ while ( i <= 'Z' ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ i++ ; @ } ; @ i = 'a' ; @ while ( i <= 'z' ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ i++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *a ) , float ( *x ) , int ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ float sum = 0 ; @ int i ; @ ; @ for ( i = 0 ; i <= ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = ( *n ) - i ; @ ; @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ sum = ( sum + a [ i ] ) * ( *x ) ; @ } @ sum += a [ ( *n ) ] ; @ { @ ( *temptemp2 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int product ; @ int col ; @ int row ; @ for ( row = 1 ; row <= 10 ; row++ ) { @ for ( col = 1 ; col <= row ; col++ ) { @ product = row * col ; @ { @ ( *temptemp1 ) = product ; @ ; @ } @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ area = ( *side ) * ( *side ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ ; @ if ( ( ( *num ) & 1 ) == 0 ) { @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ { @ ( *temptemp2 ) = ( *num ) + 2 ; @ ; @ } @ } else { @ { @ ( *temptemp3 ) = ( *num ) ; @ ; @ } @ { @ ( *temptemp4 ) = ( *num ) + 2 ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *name ) , float ( *basic ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ float net ; @ float gross ; @ float pf ; @ float tax ; @ float hra ; @ float da ; @ ; @ ; @ pf = 0.08 * ( *basic ) ; @ if ( ( *basic ) < 5000 ) { @ da = 0.3 * ( *basic ) ; @ hra = 0.08 * ( *basic ) ; @ } else if ( ( ( *basic ) >= 5000 ) && ( ( *basic ) < 10000 ) ) { @ da = 0.4 * ( *basic ) ; @ hra = 0.1 * ( *basic ) ; @ } else { @ da = 0.5 * ( *basic ) ; @ hra = 0.2 * ( *basic ) ; @ } @ gross = ( *basic ) + da + hra ; @ net = gross - tax + pf ; @ { @ ( *temptemp1 ) = gross ; @ ; @ } @ { @ ( *temptemp2 ) = net ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int i = 1 ; @ int sum = 0 ; @ while ( i <= 400 ) { @ if ( i % 8 == 0 ) { @ sum++ ; @ } @ i++ ; @ } ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *ch ) , char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ ; @ switch ( ( *ch ) ) { @ case 'a': @ case 'e': @ case 'i': @ case 'o': @ case 'u': @ case 'A': @ case 'E': @ case 'I': @ case 'O': @ case 'U': { @ ( *temptemp1 ) = ( *ch ) ; @ ; @ } break ; @ default: { @ ( *temptemp2 ) = ( *ch ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int digit ; @ int sum = 0 ; @ int product = 1 ; @ ; @ while ( ( *num ) > 0 ) { @ digit = ( *num ) % 10 ; @ sum = sum + digit ; @ product = product * digit ; @ ( *num ) = ( *num ) / 10 ; @ } @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ { @ ( *temptemp2 ) = product ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ if ( ( *num ) % 2 == 0 ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *position ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp2 ) = i + 1 ; @ ; @ } @ } ; @ if ( ( *position ) == ( *n ) + 1 || ( *position ) < 0 ) { @ { @ ( *temptemp3 ) = ( *n ) ; @ ; @ } @ } else { @ for ( i = ( *position ) - 1 ; i < ( *n ) - 1 ; i++ ) { @ arr [ i ] = arr [ i + 1 ] ; @ } @ } ; @ for ( i = 0 ; i < ( *n ) - 1 ; i++ ) { @ { @ ( *temptemp4 ) = arr [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str ) , int ( *temptemp1 ) ) { @ int length = 0 ; @ while ( str [ length ] != '\0' ) { @ length++ ; @ } ; @ { @ ( *temptemp1 ) = length ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) ) { @ int maxCols ; @ ; @ if ( ( *maxRows ) < 1 ) { @ ; @ exit ( 0 ) ; @ } @ maxCols = ( *maxRows ) ; @ puts ( "\n--------------------------------------------\n" ) ; @ int spacesInCurrentRow ; @ int colsInCurrentRow ; @ int row = 1 ; @ { @ spacesInCurrentRow = maxCols - row ; @ colsInCurrentRow = row ; @ int space = 1 ; @ ; @ int col = 1 ; @ ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *gradians ) , float ( *temptemp1 ) ) { @ float degrees ; @ ; @ degrees = ( *gradians ) * ( 180.0 / 200.0 ) ; @ { @ ( *temptemp1 ) = degrees ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int isEven ; @ ; @ isEven = ( ( *num ) & 1 ) == 0 ; @ if ( isEven ) { @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int array_1 [ 5 ] = { 0 , 1 , 2 , 3 , 4 } ; @ int array_2 [ 5 ] = { 5 , 6 , 7 , 8 , 9 } ; @ int i ; @ int temp ; @ for ( i = 0 ; i < 5 ; i++ ) { @ temp = array_1 [ i ] ; @ array_1 [ i ] = array_2 [ i ] ; @ array_2 [ i ] = temp ; @ } ; @ for ( i = 0 ; i < 5 ; i++ ) { @ { @ ( *temptemp1 ) = i ; @ ( *temptemp2 ) = array_1 [ i ] ; @ ; @ } @ } ; @ for ( i = 0 ; i < 5 ; i++ ) { @ { @ ( *temptemp3 ) = i ; @ ( *temptemp4 ) = array_2 [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) , int ( *temptemp1 ) ) { @ int maxCols ; @ ; @ if ( ( *maxRows ) < 1 ) { @ ; @ exit ( 0 ) ; @ } @ maxCols = ( *maxRows ) ; @ puts ( "\n--------------------------------------------\n" ) ; @ int row = 1 ; @ { @ int col = maxCols ; @ { @ ( *temptemp1 ) = col ; @ ; @ } ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *array ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int temp ; @ int j ; @ int i ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *n ) - 1 ; i++ ) { @ for ( j = 0 ; j < ( *n ) - i - 1 ; j++ ) { @ if ( array [ j ] > array [ j + 1 ] ) { @ temp = array [ j ] ; @ array [ j ] = array [ j + 1 ] ; @ array [ j + 1 ] = temp ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ ( *temptemp2 ) = array [ i ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *e ) , @ float ( *temptemp1 ) ) { @ float result ; @ ; @ result = ( *a ) + ( *b ) + ( *c ) - ( *d ) - ( *e ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *kilometers ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float miles ; @ float conversionFactor = 0.621371 ; @ ; @ miles = ( *kilometers ) * conversionFactor ; @ { @ ( *temptemp1 ) = ( *kilometers ) ; @ ( *temptemp2 ) = miles ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( double ( *radius ) , float ( *temptemp1 ) ) { @ double volume ; @ double pi = 3.141592653589793 ; @ ; @ volume = ( 4.0 / 3.0 ) * pi * ( *radius ) * ( *radius ) * ( *radius ) ; @ ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) ) { @ int count = 0 ; @ int square ; @ int i = 1 ; @ ; @ square = i * i ; @ while ( square <= ( *limit ) ) { @ count++ ; @ i++ ; @ square = i * i ; @ } ; @ { @ ( *temptemp1 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , float ( *arr ) , int ( *temptemp1 ) , float ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int steps = 0 ; @ int pos ; @ float hold ; @ ; @ { @ ( *temptemp1 ) = ( *size ) ; @ ; @ } @ for ( pos = 0 ; pos < ( *size ) ; pos++ ) { @ } @ pos = 0 ; @ while ( pos < ( *size ) ) { @ if ( pos == 0 || arr [ pos - 1 ] <= arr [ pos ] ) { @ pos++ ; @ } else { @ hold = arr [ pos ] ; @ arr [ pos ] = arr [ pos - 1 ] ; @ arr [ pos - 1 ] = hold ; @ pos-- ; @ steps++ ; @ } @ } ; @ for ( pos = 0 ; pos < ( *size ) ; pos++ ) { @ { @ ( *temptemp2 ) = arr [ pos ] ; @ ; @ } @ } @ { @ ( *temptemp3 ) = steps ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *height ) , @ float ( *temptemp1 ) ) { @ float volume ; @ ; @ ; @ ; @ ; @ volume = ( ( *length ) * ( *width ) * ( *height ) ) / 3 ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( double ( *radians ) , float ( *temptemp1 ) ) { @ double degrees ; @ ; @ degrees = ( *radians ) * ( 180.0 / 3.14 ) ; @ { @ ( *temptemp1 ) = degrees ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( double ( *degrees ) , int ( *temptemp1 ) ) { @ double radians ; @ ; @ radians = ( *degrees ) * ( 3.14 / 180.0 ) ; @ { @ ( *temptemp1 ) = radians ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mps ) , float ( *temptemp1 ) ) { @ float mph ; @ ; @ mph = ( *mps ) * 2.236 ; @ ; @ { @ ( *temptemp1 ) = mph ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) ) { @ int j ; @ int i ; @ char ch = '*' ; @ for ( i = 9 ; i >= 0 ; i-- ) { @ ; @ for ( j = 0 ; j <= i ; j++ ) { @ { @ ( *temptemp1 ) = ch ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *nums ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int i ; @ int maxIndex ; @ int minIndex ; @ ; @ for ( i = 0 ; i < 10 ; i++ ) { @ } @ minIndex = maxIndex = 0 ; @ for ( i = 1 ; i < 10 ; i++ ) { @ if ( nums [ i ] < nums [ minIndex ] ) minIndex = i ; @ } @ for ( i = 1 ; i < 10 ; i++ ) { @ if ( nums [ i ] > nums [ maxIndex ] ) maxIndex = i ; @ } @ { @ ( *temptemp1 ) = nums [ minIndex ] ; @ ; @ } @ { @ ( *temptemp2 ) = minIndex ; @ ; @ } @ { @ ( *temptemp3 ) = nums [ maxIndex ] ; @ ; @ } @ { @ ( *temptemp4 ) = maxIndex ; @ ; @ } @ return 0 ; @ }
#include <stdbool.h> @ #include <stdio.h> @ @ bool isPrime ( int num ) { @ if ( num <= 1 ) { @ return false ; @ } @ for ( int i = 2 ; i * i <= num ; i++ ) { @ if ( num % i == 0 ) { @ return false ; @ } @ } @ return true ; @ } @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int num ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *lower ) ; @ ( *temptemp2 ) = ( *upper ) ; @ ; @ } @ for ( num = ( *lower ) ; num <= ( *upper ) ; num++ ) { @ if ( isPrime ( num ) ) { @ { @ ( *temptemp3 ) = num ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int root2 ; @ int root1 ; @ ; @ ; @ ; @ root1 = - ( *b ) + ( sqrt ( ( *b ) ^ 2 - 4 * ( *a ) * ( *c ) ) ) / 2 * ( *a ) ; @ root2 = - ( *b ) - ( sqrt ( ( *b ) ^ 2 - 4 * ( *a ) * ( *c ) ) ) / 2 * ( *a ) ; @ { @ ( *temptemp1 ) = root1 ; @ ; @ } @ { @ ( *temptemp2 ) = root2 ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *name ) , int ( *age ) , int ( *temptemp1 ) ) { @ int price = 600 ; @ ; @ ; @ if ( ( *age ) < 6 || ( *age ) >= 60 ) { @ price = price * 0.3 ; @ ; @ } ; @ { @ ( *temptemp1 ) = price ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *num ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int found = 0 ; @ int i ; @ ; @ for ( i = 0 ; i < ( *size ) ; ++i ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } ; @ for ( i = 0 ; i < ( *size ) && !found ; ++i ) { @ if ( arr [ i ] == ( *num ) ) { @ found = 1 ; @ { @ ( *temptemp2 ) = ( *num ) ; @ ( *temptemp3 ) = i + 1 ; @ ; @ } @ } @ } @ if ( !found ) { @ { @ ( *temptemp4 ) = ( *num ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *r ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int fact_nr = 1 ; @ int fact_n = 1 ; @ int i = 1 ; @ int permutation ; @ ; @ ; @ while ( i <= ( *n ) ) { @ fact_n *= i ; @ if ( i <= ( ( *n ) - ( *r ) ) ) { @ fact_nr *= i ; @ } @ i++ ; @ } @ permutation = fact_n / fact_nr ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = ( *r ) ; @ ; @ } @ { @ ( *temptemp3 ) = permutation ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count ; @ int j ; @ int i ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ count = 1 ; @ if ( arr [ i ] != -1 ) { @ for ( j = i + 1 ; j < ( *size ) ; j++ ) { @ if ( arr [ i ] == arr [ j ] ) { @ count++ ; @ arr [ j ] = -1 ; @ } @ } @ { @ ( *temptemp1 ) = arr [ i ] ; @ ( *temptemp2 ) = count ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *ch ) , char ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ int i ; @ ; @ for ( i = 0 ; ch [ i ] != '\0' ; i++ ) { @ count++ ; @ } @ { @ ( *temptemp1 ) = ( *ch ) ; @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int isOdd ; @ ; @ isOdd = ( ( ( *num ) + 1 ) - ( *num ) ) != 1 ; @ if ( !isOdd ) { @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ ; @ ; @ ; @ surfaceArea = 4 * 3.14159265358979323846 * @ pow ( ( pow ( ( *a ) * ( *b ) , 1.6 ) + pow ( ( *a ) * ( *c ) , 1.6 ) + @ pow ( ( *b ) * ( *c ) , 1.6 ) ) / @ 3 , @ 1 / 1.6 ) ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ char str2 [ 20 ] ; @ char str1 [ 20 ] ; @ int equal = 1 ; @ int i ; @ ; @ ; @ for ( i = 0 ; str1 [ i ] != '\0' || str2 [ i ] != '\0' ; i++ ) { @ if ( str1 [ i ] != str2 [ i ] ) { @ equal = 0 ; @ break ; @ } @ } @ if ( equal && str1 [ i ] == '\0' && str2 [ i ] == '\0' ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int diff ; @ ; @ ; @ int xor = ( *a ) ^ ( *b ) ; @ int and = ( *a ) & ( *b ) ; @ diff = xor+ ( and << 1 ) ; @ if ( ( *a ) < ( *b ) ) { @ diff = -diff ; @ } @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = diff ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *diagonal1 ) , float ( *diagonal2 ) , float ( *temptemp1 ) ) { @ float kiteArea ; @ ; @ kiteArea = ( *diagonal1 ) * ( *diagonal2 ) * 0.5 ; @ ; @ { @ ( *temptemp1 ) = kiteArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; @ int i ; @ int odd_sum = 0 ; @ int even_sum = 0 ; @ for ( i = 0 ; i < 10 ; i++ ) { @ if ( array [ i ] % 2 == 0 ) @ even_sum += array [ i ] ; @ else @ odd_sum += array [ i ] ; @ } @ { @ ( *temptemp1 ) = even_sum ; @ ; @ } @ { @ ( *temptemp2 ) = odd_sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str1 ) , char ( *str2 ) ) { @ int c = 0 ; @ int i = 0 ; @ ; @ ; @ ; @ puts ( ( *str1 ) ) ; @ puts ( ( *str2 ) ) ; @ while ( ( str1 [ i ] != '\0' ) || ( str2 [ i ] != '\0' ) ) { @ if ( str1 [ i ] != str2 [ i ] ) c++ ; @ i++ ; @ } @ if ( c == 0 ) @ puts ( "\nStrings are equal.\n" ) ; @ else @ puts ( "\nStrings are not equal.\n" ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *degrees ) , float ( *temptemp1 ) ) { @ ; @ float radians = ( *degrees ) * ( 3.14f / 180.0f ) ; @ ; @ { @ ( *temptemp1 ) = radians ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) , int ( *temptemp1 ) ) { @ int maxCols ; @ int numAtCol ; @ int col ; @ int row ; @ ; @ maxCols = ( *maxRows ) ; @ for ( row = 1 ; row <= ( *maxRows ) ; row++ ) { @ numAtCol = row ; @ for ( col = 1 ; col <= row ; col++ ) { @ numAtCol = numAtCol + 1 ; @ { @ ( *temptemp1 ) = numAtCol ; @ ; @ } @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ ; @ ( *a ) = ( *a ) + ( *b ) ; @ ( *b ) = ( *a ) - ( *b ) ; @ ( *a ) = ( *a ) - ( *b ) ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ ; @ if ( ( *num ) % 2 == 0 ) { @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ { @ ( *temptemp2 ) = ( *num ) + 2 ; @ ; @ } @ } else { @ { @ ( *temptemp3 ) = ( *num ) ; @ ; @ } @ { @ ( *temptemp4 ) = ( *num ) + 2 ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *bLength ) , float ( *sHeight ) , float ( *temptemp1 ) ) { @ float sArea ; @ ; @ ; @ sArea = ( *bLength ) * ( *bLength ) ; @ sArea += 2 * ( *bLength ) * ( *sHeight ) ; @ { @ ( *temptemp1 ) = sArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str ) , int ( *temptemp1 ) ) { @ int length = 0 ; @ while ( str [ length ] != '\0' ) { @ length++ ; @ } @ { @ ( *temptemp1 ) = length ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *kilometers ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float miles ; @ ; @ miles = ( *kilometers ) * 0.621371 ; @ { @ ( *temptemp1 ) = ( *kilometers ) ; @ ( *temptemp2 ) = miles ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , unsigned int ( *temptemp2 ) , int ( *temptemp3 ) , @ unsigned int ( *temptemp4 ) , int ( *temptemp5 ) , @ unsigned int ( *temptemp6 ) ) { @ int a [ 3 ] = { 11 , 22 , 33 } ; @ unsigned int address0 = ( unsigned int ) &a [ 0 ] ; @ unsigned int address1 = ( unsigned int ) &a [ 1 ] ; @ unsigned int address2 = ( unsigned int ) &a [ 2 ] ; @ { @ ( *temptemp1 ) = a [ 0 ] ; @ ( *temptemp2 ) = address0 ; @ ; @ } @ { @ ( *temptemp3 ) = a [ 1 ] ; @ ( *temptemp4 ) = address1 ; @ ; @ } @ { @ ( *temptemp5 ) = a [ 2 ] ; @ ( *temptemp6 ) = address2 ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int a = 100 ; @ { @ ( *temptemp1 ) = a ; @ ; @ } @ a = 200 ; @ { @ ( *temptemp2 ) = a ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) ) { @ int shifted ; @ int result ; @ ; @ shifted = ( *a ) << 4 ; @ result = shifted | 0 ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *num2 ) , char ( *ch ) , float ( *temptemp1 ) , @ int ( *temptemp2 ) ) { @ float result ; @ ; @ ; @ ; @ int isFloat = 0 ; @ switch ( ( *ch ) ) { @ case '+': @ result = ( *num1 ) + ( *num2 ) ; @ break ; @ case '-': @ result = ( *num1 ) - ( *num2 ) ; @ break ; @ case '*': @ result = ( *num1 ) * ( *num2 ) ; @ break ; @ case '/': @ if ( ( *num2 ) != 0 ) { @ result = ( float ) ( *num1 ) / ( *num2 ) ; @ isFloat = 1 ; @ } else { @ ; @ return 0 ; @ } @ break ; @ case '%': @ result = ( *num1 ) % ( *num2 ) ; @ break ; @ default: ; @ return 0 ; @ } @ if ( isFloat ) { @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( int ) result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *range ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i = 1 ; @ ; @ ; @ while ( i <= ( *range ) ) { @ int product = ( *num ) * i ; @ { @ ( *temptemp1 ) = ( *num ) ; @ ( *temptemp2 ) = i ; @ ( *temptemp3 ) = product ; @ ; @ } @ i++ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *sideLength ) , float ( *slantHeight ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ float lateralArea ; @ float baseArea ; @ ; @ ; @ baseArea = ( 5 * ( *sideLength ) * ( *sideLength ) ) / ( 4 * tan ( M_PI / 5 ) ) ; @ lateralArea = ( 5 * ( *sideLength ) * ( *slantHeight ) ) / 2 ; @ surfaceArea = baseArea + lateralArea ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ if ( ( *c ) - ( *d ) == 0 ) { @ ; @ return -1 ; @ } @ result = ( ( *a ) + ( *b ) ) / ( ( *c ) - ( *d ) ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ ( *a ) = ( *a ) + ( *b ) ; @ ( *b ) = ( *a ) - ( *b ) ; @ ( *a ) = ( *a ) - ( *b ) ; @ { @ ( *temptemp3 ) = ( *a ) ; @ ( *temptemp4 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void entry_point ( int ( *num ) , int ( *array ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int temp ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ } ; @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ { @ ( *temptemp1 ) = array [ i ] ; @ ; @ } @ } @ for ( i = 1 ; i < ( *num ) ; i++ ) { @ for ( j = 0 ; j < ( *num ) - i ; j++ ) { @ if ( array [ j ] > array [ j + 1 ] ) { @ temp = array [ j ] ; @ array [ j ] = array [ j + 1 ] ; @ array [ j + 1 ] = temp ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ { @ ( *temptemp2 ) = array [ i ] ; @ ; @ } @ } @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ ; @ ( *a ) = ( *a ) * ( *b ) ; @ ( *b ) = ( *a ) / ( *b ) ; @ ( *a ) = ( *a ) / ( *b ) ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str ) , char ( *temptemp1 ) ) { @ int j = 0 ; @ int i = 0 ; @ char lastChar = '\0' ; @ ; @ while ( str [ i ] != '\0' ) { @ if ( str [ i ] != lastChar ) { @ str [ j++ ] = str [ i ] ; @ lastChar = str [ i ] ; @ } @ i++ ; @ } @ str [ j ] = '\0' ; @ ; @ { @ ( *temptemp1 ) = ( *str ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int nthPentagonal ; @ ; @ if ( ( *n ) <= 0 ) { @ ; @ return 1 ; @ } @ nthPentagonal = ( *n ) * ( 3 * ( *n ) - 1 ) / 2 ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = nthPentagonal ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *year ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ switch ( ( ( *year ) % 400 == 0 ) || ( ( *year ) % 100 && ( *year ) % 4 == 0 ) ) { @ case 0: { @ ( *temptemp1 ) = ( *year ) ; @ ; @ } break ; @ case 1: { @ ( *temptemp2 ) = ( *year ) ; @ ; @ } break ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *breadth ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ float perimeter ; @ float area ; @ ; @ ; @ area = ( *length ) * ( *breadth ) ; @ perimeter = 2 * ( ( *length ) + ( *breadth ) ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ { @ ( *temptemp2 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) ) { @ int largest ; @ ; @ ; @ ; @ if ( ( *a ) > ( *b ) && ( *a ) > ( *c ) ) @ largest = ( *a ) ; @ else if ( ( *b ) > ( *a ) && ( *b ) > ( *c ) ) @ largest = ( *b ) ; @ else @ largest = ( *c ) ; @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void calculate_npr_ncr ( int n , int r , long *ncr , long *npr ) { @ *ncr = 1 ; @ *npr = 1 ; @ int i ; @ for ( i = 1 ; i <= n ; ++i ) { @ if ( i <= r ) { @ *npr *= n - r + i ; @ *ncr *= n - r + i ; @ *ncr /= i ; @ } else if ( i <= n - r ) { @ *npr *= i ; @ } @ } @ } @ int entry_point ( int ( *n ) , int ( *r ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ long int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) , @ long int ( *temptemp6 ) ) { @ long ncr , npr ; @ ; @ ; @ calculate_npr_ncr ( ( *n ) , ( *r ) , &ncr , &npr ) ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = ( *r ) ; @ ( *temptemp3 ) = ncr ; @ ; @ } @ { @ ( *temptemp4 ) = ( *n ) ; @ ( *temptemp5 ) = ( *r ) ; @ ( *temptemp6 ) = npr ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ switch ( ( *number ) % 3 ) { @ case 0: @ result = ( *number ) + 1 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ break ; @ default: @ result = ( *number ) + 2 ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *e ) , @ float ( *temptemp1 ) ) { @ float result ; @ float temp ; @ ; @ if ( ( *e ) == 0 ) { @ ; @ return 1 ; @ } @ temp = ( *b ) * ( *c ) ; @ result = ( *a ) + temp - ( *d ) / ( *e ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *totalSeconds ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int secondsInHour = 3600 ; @ int secondsInMinute = 60 ; @ int seconds ; @ int minutes ; @ int hours ; @ ; @ hours = ( *totalSeconds ) / secondsInHour ; @ ( *totalSeconds ) %= secondsInHour ; @ minutes = ( *totalSeconds ) / secondsInMinute ; @ seconds = ( *totalSeconds ) % secondsInMinute ; @ { @ ( *temptemp1 ) = hours ; @ ( *temptemp2 ) = minutes ; @ ( *temptemp3 ) = seconds ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *z ) , int ( *temptemp1 ) ) { @ int product ; @ ; @ product = ( *z ) * 2 ; @ ; @ { @ ( *temptemp1 ) = product ; @ ; @ } ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *sideLength ) , float ( *slantHeight ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ float lateralArea ; @ float baseArea ; @ float pi = 3.14159 ; @ ; @ ; @ baseArea = ( 5 * ( *sideLength ) * ( *sideLength ) ) / ( 4 * tan ( pi / 5 ) ) ; @ lateralArea = ( 5 * ( *sideLength ) * ( *slantHeight ) ) / 2 ; @ surfaceArea = baseArea + lateralArea ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int b = 10 ; @ int a = 5 ; @ { @ ( *temptemp1 ) = a ; @ ( *temptemp2 ) = b ; @ ; @ } @ a = a + b ; @ b = a - b ; @ a = a - b ; @ { @ ( *temptemp3 ) = a ; @ ( *temptemp4 ) = b ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *inches ) , float ( *temptemp1 ) ) { @ float centimeters ; @ ; @ centimeters = ( *inches ) * 2.54 ; @ { @ ( *temptemp1 ) = centimeters ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *position ) , int ( *temptemp1 ) ) { @ int i ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ } ; @ if ( ( *position ) > 0 && ( *position ) <= ( *n ) ) { @ for ( i = ( *position ) ; i < ( *n ) ; i++ ) { @ arr [ i - 1 ] = arr [ i ] ; @ } @ ( *n ) -- ; @ } else { @ ; @ return 1 ; @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = arr [ i ] ; @ ; @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ void entry_point ( int ( *num ) , int ( *array ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int temp ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ } ; @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ { @ ( *temptemp1 ) = array [ i ] ; @ ; @ } @ } @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ for ( j = 0 ; j < ( *num ) - i - 1 ; j++ ) { @ if ( array [ j ] < array [ j + 1 ] ) { @ temp = array [ j ] ; @ array [ j ] = array [ j + 1 ] ; @ array [ j + 1 ] = temp ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *num ) ; i++ ) { @ { @ ( *temptemp2 ) = array [ i ] ; @ ; @ } @ } @ }
#include <stdio.h> @ @ int entry_point ( float ( *numbers ) , int ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float result = 1.0 ; @ int i ; @ for ( i = 0 ; i < 4 ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ result *= numbers [ i ] ; @ } @ { @ ( *temptemp2 ) = result ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *x ) , int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int result ; @ ; @ ; @ result = pow ( ( double ) ( *x ) , ( *n ) ) ; @ { @ ( *temptemp1 ) = ( *x ) ; @ ( *temptemp2 ) = ( *n ) ; @ ( *temptemp3 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int j = 1 ; @ int i = 0 ; @ int grt ; @ ; @ for ( i = 0 ; i < 10 ; i++ , j++ ) { @ { @ ( *temptemp1 ) = j ; @ ; @ } @ } @ grt = num [ 0 ] ; @ i = 0 , j = 1 ; @ for ( ; i < 9 ; i++ ) { @ if ( grt < num [ i + 1 ] ) { @ grt = num [ i + 1 ] ; @ } @ } @ { @ ( *temptemp2 ) = grt ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *speed ) , float ( *time ) , float ( *temptemp1 ) ) { @ float distance ; @ ; @ ; @ distance = ( *speed ) * ( *time ) ; @ { @ ( *temptemp1 ) = distance ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *height ) , @ float ( *temptemp1 ) ) { @ float surfaceArea ; @ ; @ ; @ ; @ surfaceArea = ( *length ) * ( *width ) ; @ surfaceArea += ( *width ) * ( *height ) ; @ surfaceArea += ( *height ) * ( *length ) ; @ surfaceArea *= 2 ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count ; @ float limitFloat ; @ ; @ limitFloat = ( float ) ( *limit ) ; @ count = ( int ) ceil ( sqrtf ( limitFloat ) ) - 1 ; @ { @ ( *temptemp1 ) = ( *limit ) ; @ ; @ } @ { @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int j ; @ int i ; @ int total = 0 ; @ ; @ total = ( *n ) - 2 ; @ for ( i = 2 ; i <= ( *n ) ; i++ ) { @ for ( j = 2 ; j * j <= i ; j++ ) { @ if ( i % j == 0 ) { @ break ; @ } @ if ( j + 1 > i / j ) { @ total-- ; @ break ; @ } @ } @ } @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = total + 1 ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ ; @ ( *a ) = ( *a ) ^ ( *b ) ; @ ( *b ) = ( *a ) ^ ( *b ) ; @ ( *a ) = ( *a ) ^ ( *b ) ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *name ) , int ( *age ) , float ( *temptemp1 ) ) { @ int isEligibleForConcession = 0 ; @ float price = 600.0f ; @ ; @ ; @ if ( ( *age ) < 6 || ( *age ) >= 60 ) { @ isEligibleForConcession = 1 ; @ } @ if ( isEligibleForConcession ) { @ price *= 0.7f ; @ ; @ } ; @ { @ ( *temptemp1 ) = price ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ ; @ ; @ ; @ perimeter = ( *a ) + ( *b ) + ( *c ) + ( *d ) ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *height ) , @ float ( *temptemp1 ) ) { @ float volume ; @ ; @ volume = ( ( *length ) * ( *width ) * ( *height ) ) / 3.0f ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *s ) , float ( *temptemp1 ) ) { @ ; @ ; @ float area = ( ( *n ) * ( *s ) * ( *s ) ) / ( 4 * tan ( M_PI / ( *n ) ) ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mps ) ) { @ float kmph ; @ ; @ kmph = ( *mps ) * 3.6 ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int product = 1 ; @ int sum = 0 ; @ ; @ for ( ; ( *num ) > 0 ; ( *num ) /= 10 ) { @ int digit = ( *num ) % 10 ; @ sum = sum + digit ; @ product = product * digit ; @ } @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ { @ ( *temptemp2 ) = product ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) ) { @ int maxCols ; @ ; @ if ( ( *maxRows ) < 1 ) { @ ; @ exit ( 0 ) ; @ } @ maxCols = ( *maxRows ) + 1 ; @ puts ( "\n--------------------------------------------\n" ) ; @ int vary = 1 ; @ int row = 1 ; @ { @ int col = 1 ; @ { @ if ( col <= vary || col >= maxCols + 1 - vary ) @ ; @ else @ ; @ } @ row < maxCols / 2 ? vary++ : vary-- ; @ if ( ( *maxRows ) % 2 == 0 && row == maxCols / 2 ) vary++ ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) ) { @ float volume ; @ ; @ ; @ ; @ volume = 4.0 / 3.0 * 3.14159265358979323846 ; @ volume *= ( *a ) * ( *b ) * ( *c ) ; @ ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *d1 ) , float ( *d2 ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ ; @ area = ( ( *d1 ) * ( *d2 ) ) / 2 ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *e ) , @ float ( *temptemp1 ) ) { @ float finalResult ; @ float intermediateResult ; @ ; @ intermediateResult = - ( *e ) ; @ finalResult = ( *a ) + ( *b ) + ( *c ) + ( *d ) + intermediateResult ; @ { @ ( *temptemp1 ) = finalResult ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *l1 ) , float ( *l2 ) , float ( *l3 ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) ) { @ int result ; @ ; @ if ( ( *l1 ) + ( *l2 ) > ( *l3 ) && ( *l2 ) + ( *l3 ) > ( *l1 ) && ( *l1 ) + ( *l3 ) > ( *l2 ) ) { @ result = 1 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ result = 0 ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float multiplier ; @ float area ; @ ; @ multiplier = 3 * sqrt ( 3 ) / 2 ; @ area = multiplier * ( *side ) * ( *side ) ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) ) { @ int i = 0 ; @ int next ; @ int second = 1 ; @ int first = 0 ; @ ; @ ; @ while ( i < ( *limit ) ) { @ if ( i <= 1 ) @ next = i ; @ else { @ next = first + second ; @ first = second ; @ second = next ; @ } @ { @ ( *temptemp1 ) = next ; @ ; @ } @ i++ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *line ) , long int ( *temptemp1 ) ) { @ int j ; @ int i ; @ ; @ for ( i = 0 ; i < ( *line ) ; i++ ) { @ for ( j = 0 ; j < ( *line ) - i - 1 ; j++ ) { @ ; @ } @ long value = 1 ; @ for ( j = 0 ; j <= i ; j++ ) { @ if ( j != 0 ) { @ value = value * ( i - j + 1 ) / j ; @ } @ { @ ( *temptemp1 ) = value ; @ ; @ } @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int index2 ; @ int maximum ; @ int index1 ; @ int minimum ; @ int i ; @ ; @ for ( i = 0 ; i < 10 ; i++ ) { @ } @ minimum = a [ 0 ] ; @ maximum = a [ 0 ] ; @ for ( i = 0 ; i < 10 ; i++ ) { @ if ( minimum > a [ i ] ) { @ minimum = a [ i ] ; @ index1 = i ; @ } @ if ( maximum < a [ i ] ) { @ maximum = a [ i ] ; @ index2 = i ; @ } @ } @ { @ ( *temptemp1 ) = minimum ; @ ; @ } @ { @ ( *temptemp2 ) = index1 ; @ ; @ } @ { @ ( *temptemp3 ) = maximum ; @ ; @ } @ { @ ( *temptemp4 ) = index2 ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mph ) , float ( *temptemp1 ) ) { @ float knots ; @ ; @ knots = ( *mph ) / 1.15078f ; @ { @ ( *temptemp1 ) = knots ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *x1 ) , float ( *x2 ) , float ( *x3 ) , float ( *x4 ) , @ float ( *temptemp1 ) ) { @ float calcResult ; @ ; @ if ( ( ( *x3 ) + ( *x4 ) ) == 0 ) { @ ; @ return -1 ; @ } else { @ calcResult = ( ( *x1 ) + ( *x2 ) ) / ( ( *x3 ) + ( *x4 ) ) ; @ { @ ( *temptemp1 ) = calcResult ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *m1 ) , float ( *m2 ) , float ( *m3 ) , float ( *m4 ) , float ( *m5 ) ) { @ ; @ if ( ( *m1 ) > 32 && ( *m2 ) > 32 && ( *m3 ) > 32 && ( *m4 ) > 32 && ( *m5 ) > 32 ) @ ; @ else @ ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ float ( *temptemp3 ) ) { @ float rem ; @ ; @ ; @ rem = ( *b ) - ( ( *b ) / ( *a ) ) * ( *a ) ; @ rem = ( *a ) - rem ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = rem ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int i = 0 ; @ int product = 1 ; @ int sum = 0 ; @ ; @ do { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ i++ ; @ } while ( i < 10 ) ; @ i = 0 ; @ do { @ sum += arr [ i ] ; @ product *= arr [ i ] ; @ i++ ; @ } while ( i < 10 ) ; @ { @ ( *temptemp2 ) = sum ; @ ; @ } @ { @ ( *temptemp3 ) = product ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *start ) , int ( *end ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int count = 0 ; @ int isPrime ; @ int j ; @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *start ) ; @ ( *temptemp2 ) = ( *end ) ; @ ; @ } @ if ( ( *start ) <= 2 ) { @ ; @ ( *start ) = 3 ; @ count++ ; @ } @ if ( ( *start ) % 2 == 0 ) ( *start ) ++ ; @ for ( i = ( *start ) ; i <= ( *end ) ; i += 2 ) { @ isPrime = 1 ; @ for ( j = 3 ; j * j <= i ; j += 2 ) { @ if ( i % j == 0 ) { @ isPrime = 0 ; @ break ; @ } @ } @ if ( isPrime == 1 ) { @ { @ ( *temptemp3 ) = i ; @ ; @ } @ count++ ; @ } @ } @ { @ ( *temptemp4 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) , int ( *temptemp5 ) , int ( *temptemp6 ) ) { @ int c ; @ int b ; @ int a ; @ int *ptr [ 3 ] ; @ ptr [ 0 ] = &a ; @ ptr [ 1 ] = &b ; @ ptr [ 2 ] = &c ; @ a = 100 ; @ b = 200 ; @ c = 300 ; @ { @ ( *temptemp1 ) = *ptr [ 0 ] ; @ ( *temptemp2 ) = *ptr [ 1 ] ; @ ( *temptemp3 ) = *ptr [ 2 ] ; @ ; @ } @ *ptr [ 0 ] += 10 ; @ *ptr [ 1 ] += 10 ; @ *ptr [ 2 ] += 10 ; @ ; @ { @ ( *temptemp4 ) = *ptr [ 0 ] ; @ ( *temptemp5 ) = *ptr [ 1 ] ; @ ( *temptemp6 ) = *ptr [ 2 ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *line ) ) { @ int j ; @ int i ; @ ; @ for ( i = 0 ; line [ i ] != '\0' ; ++i ) { @ while ( ! ( ( line [ i ] >= 'a' && line [ i ] <= 'z' ) || @ ( line [ i ] >= 'A' && line [ i ] <= 'Z' ) || line [ i ] == '\0' ) ) { @ for ( j = i ; line [ j ] != '\0' ; ++j ) { @ line [ j ] = line [ j + 1 ] ; @ } @ line [ j ] = '\0' ; @ } @ } ; @ puts ( ( *line ) ) ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ void Strfun ( char str1 [ ] , char str2 [ ] , char str3 [ ] ) { @ ; @ puts ( str1 ) ; @ ; @ puts ( str2 ) ; @ ; @ puts ( str3 ) ; @ } @ int entry_point ( ) { @ char str1 [ ] = "Hello function" ; @ char str2 [ ] = "How are you?" ; @ char str3 [ ] = "Catch some strings" ; @ Strfun ( str1 , str2 , str3 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int j ; @ int i = 0 ; @ int count = 1 ; @ while ( i <= 8 ) { @ ; @ j = 0 ; @ while ( j < i ) { @ { @ ( *temptemp1 ) = count ; @ ; @ } @ count++ ; @ j++ ; @ } @ i++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *heightInMeters ) , float ( *weight ) , float ( *temptemp1 ) ) { @ float bmi ; @ ; @ ; @ ( *heightInMeters ) = ( *heightInMeters ) / 100 ; @ bmi = ( *weight ) / ( ( *heightInMeters ) * ( *heightInMeters ) ) ; @ { @ ( *temptemp1 ) = bmi ; @ ; @ } @ if ( bmi < 18.5 ) { @ ; @ } else if ( bmi < 25 ) { @ ; @ } else if ( bmi < 30 ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i ; @ int count = 0 ; @ int nthPrime ; @ int num = 2 ; @ ; @ while ( count < ( *n ) ) { @ for ( i = 2 ; i <= num / 2 ; i++ ) { @ if ( num % i == 0 ) { @ break ; @ } @ } @ if ( i > num / 2 ) { @ nthPrime = num ; @ count++ ; @ } @ num++ ; @ } @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = nthPrime ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *powerInHorsepower ) , float ( *temptemp1 ) ) { @ float powerInWatts ; @ ; @ powerInWatts = ( *powerInHorsepower ) * 746.0f ; @ ; @ { @ ( *temptemp1 ) = powerInWatts ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *pos ) , int ( *val ) , int ( *temptemp1 ) ) { @ int arr [ 100 ] ; @ int j ; @ int i ; @ ; @ ; @ ; @ for ( i = ( *n ) ; i >= ( *pos ) ; i-- ) { @ arr [ i ] = arr [ i - 1 ] ; @ } @ arr [ ( *pos ) - 1 ] = ( *val ) ; @ ( *n ) ++ ; @ ; @ for ( j = 0 ; j < ( *n ) ; j++ ) { @ { @ ( *temptemp1 ) = arr [ j ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *ch ) , char ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int asciiValue = ( *ch ) + 0 ; @ ; @ { @ ( *temptemp1 ) = ( *ch ) ; @ ; @ } ; @ { @ ( *temptemp2 ) = asciiValue ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int sum ; @ int diff ; @ ; @ ; @ sum = ( *a ) + ( *b ) ; @ diff = sum - 2 * ( ( *a ) > ( *b ) ? ( *a ) : ( *b ) ) ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ; @ } ; @ { @ ( *temptemp2 ) = ( *b ) ; @ ; @ } ; @ { @ ( *temptemp3 ) = diff < 0 ? -diff : diff ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int i ; @ int product = 1 ; @ int sum = 0 ; @ ; @ for ( i = 0 ; i < 10 ; i++ ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ sum += arr [ i ] ; @ product *= arr [ i ] ; @ } @ { @ ( *temptemp2 ) = sum ; @ ; @ } @ { @ ( *temptemp3 ) = product ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ int i = 0 ; @ ; @ while ( i < ( *n ) ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ i++ ; @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ if ( arr [ i ] < 0 ) { @ count++ ; @ } @ } @ { @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ int factor = 2 ; @ ; @ ; @ while ( ( *num ) != 1 ) { @ while ( ( *num ) % factor == 0 ) { @ { @ ( *temptemp1 ) = factor ; @ ; @ } @ ( *num ) /= factor ; @ } @ factor++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *kilometers ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float miles ; @ ; @ miles = ( *kilometers ) * 0.621 ; @ { @ ( *temptemp1 ) = ( *kilometers ) ; @ ( *temptemp2 ) = miles ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *l ) , float ( *w ) , float ( *h ) , float ( *temptemp1 ) ) { @ ; @ float area = ( *l ) * ( *w ) ; @ float vol = area * ( *h ) / 3.0f ; @ ; @ { @ ( *temptemp1 ) = vol ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int numDigits ; @ int remainder ; @ int originalNum ; @ int i ; @ int count = 0 ; @ float sum ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = ( *n ) ; i >= 1 ; i-- ) { @ sum = 0 ; @ originalNum = i ; @ numDigits = ( int ) log10 ( i ) + 1 ; @ while ( originalNum > 0 ) { @ remainder = originalNum % 10 ; @ sum += pow ( remainder , numDigits ) ; @ originalNum /= 10 ; @ } @ if ( ( int ) sum == i ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ count++ ; @ } @ } @ { @ ( *temptemp3 ) = ( *n ) ; @ ( *temptemp4 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *array ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int temp ; @ int j ; @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp2 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( ( *n ) - 1 ) ; i++ ) { @ for ( j = 0 ; j < ( *n ) - i - 1 ; j++ ) { @ if ( array [ j ] < array [ j + 1 ] ) { @ temp = array [ j ] ; @ array [ j ] = array [ j + 1 ] ; @ array [ j + 1 ] = temp ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ ( *temptemp3 ) = array [ i ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int second ; @ int minute ; @ int hour ; @ ; @ { @ ( *temptemp1 ) = hour ; @ ( *temptemp2 ) = minute ; @ ( *temptemp3 ) = second ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *height ) , int ( *weight ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) , @ int ( *temptemp6 ) , int ( *temptemp7 ) ) { @ int h ; @ int BMI ; @ int result ; @ ; @ ; @ h = ( *height ) / 100 ; @ BMI = ( *weight ) / ( h * h ) ; @ if ( BMI < 15 ) { @ result = BMI + 1 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else if ( BMI >= 15.1 && BMI <= 17.5 ) { @ result = BMI + 2 ; @ { @ ( *temptemp2 ) = result ; @ ; @ } ; @ } else if ( BMI >= 17.6 && BMI <= 18.5 ) { @ result = BMI + 3 ; @ { @ ( *temptemp3 ) = result ; @ ; @ } ; @ } else if ( BMI >= 18.6 && BMI <= 24.9 ) { @ result = BMI + 4 ; @ { @ ( *temptemp4 ) = result ; @ ; @ } ; @ } else if ( BMI >= 25 && BMI <= 29.9 ) { @ result = BMI + 5 ; @ { @ ( *temptemp5 ) = result ; @ ; @ } ; @ } else if ( BMI >= 30 && BMI <= 39.9 ) { @ result = BMI + 6 ; @ { @ ( *temptemp6 ) = result ; @ ; @ } ; @ } else { @ result = BMI + 7 ; @ { @ ( *temptemp7 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ area = 3.14159 * ( *radius ) * ( *radius ) ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side1 ) , float ( *side2 ) , float ( *side3 ) , @ float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ ; @ ; @ perimeter = ( *side1 ) + ( *side2 ) + ( *side3 ) ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i ; @ int mul ; @ ; @ ; @ mul = 0 ; @ for ( i = 1 ; i <= ( *b ) ; i++ ) { @ mul += ( *a ) ; @ } @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = mul ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int size_char_array = sizeof ( char [ 10 ] ) ; @ int size_int_array = sizeof ( int [ 10 ] ) ; @ int size_float_array = sizeof ( float [ 10 ] ) ; @ int size_long_int_array = sizeof ( long int [ 10 ] ) ; @ { @ ( *temptemp1 ) = size_char_array ; @ ; @ } @ { @ ( *temptemp2 ) = size_int_array ; @ ; @ } @ { @ ( *temptemp3 ) = size_float_array ; @ ; @ } @ { @ ( *temptemp4 ) = size_long_int_array ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int nthEven ; @ ; @ nthEven = 2 * ( *n ) ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = nthEven ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *string ) , char ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int frequency [ 255 ] ; @ int min ; @ int i = 0 ; @ int ascii ; @ ; @ for ( i = 0 ; i < 255 ; i++ ) { @ frequency [ i ] = 0 ; @ } @ i = 0 ; @ while ( string [ i ] != '\0' ) { @ ascii = ( int ) string [ i ] ; @ frequency [ ascii ] += 1 ; @ i++ ; @ } @ min = 0 ; @ for ( i = 0 ; i < 255 ; i++ ) { @ if ( frequency [ i ] != 0 ) { @ if ( frequency [ min ] == 0 || frequency [ i ] < frequency [ min ] ) min = i ; @ } @ } @ { @ ( *temptemp1 ) = min ; @ ( *temptemp2 ) = frequency [ min ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *feet ) , float ( *temptemp1 ) ) { @ float inches ; @ ; @ inches = ( *feet ) * 12.0f ; @ { @ ( *temptemp1 ) = inches ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ int dig ; @ int revNumber = 0 ; @ ; @ if ( ( *n ) <= 0 ) { @ ; @ } else { @ do { @ dig = ( *n ) % 10 ; @ revNumber = revNumber * 10 + dig ; @ ( *n ) /= 10 ; @ } while ( ( *n ) > 0 ) ; @ ; @ { @ ( *temptemp1 ) = revNumber ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int nthHexagonal ; @ ; @ if ( ( *n ) <= 0 ) { @ ; @ return 1 ; @ } @ nthHexagonal = ( *n ) * ( 2 * ( *n ) - 1 ) ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = nthHexagonal ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *inputSeconds ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int seconds ; @ int minutes ; @ int hours ; @ ; @ hours = ( *inputSeconds ) / 3600 ; @ ( *inputSeconds ) = ( *inputSeconds ) % 3600 ; @ minutes = ( *inputSeconds ) / 60 ; @ seconds = ( *inputSeconds ) % 60 ; @ { @ ( *temptemp1 ) = hours ; @ ( *temptemp2 ) = minutes ; @ ( *temptemp3 ) = seconds ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ char str2 [ 100 ] ; @ char str1 [ 100 ] ; @ int count = 0 ; @ ; @ for ( count = 0 ; str1 [ count ] != '\0' ; count++ ) { @ str2 [ count ] = str1 [ count ] ; @ } @ str2 [ count ] = '\0' ; @ ; @ { @ ( *temptemp1 ) = str1 ; @ ; @ } ; @ { @ ( *temptemp2 ) = str2 ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float PI = 3.14159 ; @ ; @ float volume = ( 4.0 / 3.0 ) * PI * ( *radius ) * ( *radius ) * ( *radius ) ; @ ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *height ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ ; @ ; @ ; @ surfaceArea = @ 2 * ( ( *length ) * ( *width ) + ( *width ) * ( *height ) + ( *height ) * ( *length ) ) ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *height ) , float ( *temptemp1 ) ) { @ float volume ; @ ; @ ; @ volume = ( 3.14159 * ( *radius ) * ( *radius ) * ( *height ) ) / 3 ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *pascals ) , float ( *temptemp1 ) ) { @ float mmHg ; @ ; @ mmHg = ( *pascals ) * 0.007 ; @ { @ ( *temptemp1 ) = mmHg ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ int shifted ; @ ; @ shifted = ( *num ) >> 2 ; @ ; @ { @ ( *temptemp1 ) = shifted ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ int j ; @ int i ; @ for ( i = 0 ; i <= 5 ; i++ ) { @ { ; } ; @ } @ for ( j = 5 ; j >= i ; j-- ) { @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int gcd ( int m , int n ) { @ int rem ; @ while ( n != 0 ) { @ rem = m % n ; @ m = n ; @ n = rem ; @ } @ return ( m ) ; @ } @ int entry_point ( int ( *num1 ) , int ( *num2 ) , int ( *num3 ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int gcd2 ; @ int gcd1 ; @ ; @ ; @ ; @ if ( ( *num1 ) == 0 && ( *num2 ) == 0 && ( *num3 ) == 0 ) { @ ; @ exit ( 0 ) ; @ } @ gcd1 = gcd ( ( *num1 ) , ( *num2 ) ) ; @ gcd2 = gcd ( ( *num3 ) , gcd1 ) ; @ { @ ( *temptemp1 ) = ( *num1 ) ; @ ( *temptemp2 ) = ( *num2 ) ; @ ( *temptemp3 ) = ( *num3 ) ; @ ( *temptemp4 ) = gcd2 ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) , float ( *temptemp3 ) , float ( *temptemp4 ) , @ float ( *temptemp5 ) , float ( *temptemp6 ) ) { @ float temp2 ; @ float temp1 ; @ ; @ ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = ( *c ) ; @ ; @ } @ temp1 = ( *b ) ; @ temp2 = ( *c ) ; @ ( *b ) = ( *a ) ; @ ( *c ) = temp1 ; @ ( *a ) = temp2 ; @ ; @ { @ ( *temptemp4 ) = ( *a ) ; @ ( *temptemp5 ) = ( *b ) ; @ ( *temptemp6 ) = ( *c ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *bar ) , float ( *temptemp1 ) ) { @ float mmHg ; @ ; @ mmHg = ( *bar ) * 750.062 ; @ { @ ( *temptemp1 ) = mmHg ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ void PrintPrimeFactors ( int n ) { @ while ( n % 2 == 0 ) { @ ; @ n = n / 2 ; @ } @ for ( int i = 3 ; i * i <= n ; i = i + 2 ) { @ while ( n % i == 0 ) { @ ; @ n = n / i ; @ } @ } @ if ( n > 2 ) { @ ; @ } @ } @ int entry_point ( int ( *num ) ) { @ ; @ ; @ PrintPrimeFactors ( ( *num ) ) ; @ ; @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) , int ( *temptemp1 ) ) { @ int maxCols ; @ ; @ if ( ( *maxRows ) < 1 ) { @ ; @ exit ( 0 ) ; @ } @ maxCols = ( *maxRows ) * 2 - 1 ; @ puts ( "\n--------------------------------------------\n" ) ; @ int numAtCol = 0 ; @ int spacesInCurrentRow ; @ int colsInCurrentRow = -1 ; @ int row = 1 ; @ { @ colsInCurrentRow += 2 ; @ numAtCol = row ; @ spacesInCurrentRow = maxCols - colsInCurrentRow ; @ int space = 1 ; @ ; @ int col = 1 ; @ { { ( *temptemp1 ) = col < ( colsInCurrentRow + 1 ) / 2 ? numAtCol-- : numAtCol++ ; @ ; @ } @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *height ) , float ( *temptemp1 ) ) { @ float totalSurfaceArea ; @ float lateralSurfaceArea ; @ float baseArea ; @ ; @ ; @ baseArea = 3.14159 * ( *radius ) * ( *radius ) ; @ lateralSurfaceArea = 2 * 3.14159 * ( *radius ) * ( *height ) ; @ totalSurfaceArea = 2 * baseArea + lateralSurfaceArea ; @ { @ ( *temptemp1 ) = totalSurfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int temp ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ for ( j = i + 1 ; j < ( *size ) ; j++ ) { @ if ( arr [ j ] < arr [ i ] ) { @ temp = arr [ i ] ; @ arr [ i ] = arr [ j ] ; @ arr [ j ] = temp ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = arr [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ area = ( sqrt ( 5 * ( 5 + 2 * sqrt ( 5 ) ) ) * ( *side ) * ( *side ) ) / 4 ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *A ) , int ( *B ) , int ( *C ) , float ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) ) { @ float x2 ; @ float x1 ; @ float deno ; @ float disc ; @ ; @ ; @ ; @ disc = ( ( *B ) * ( *B ) ) - ( 4 * ( *A ) * ( *C ) ) ; @ deno = 2 * ( *A ) ; @ if ( disc > 0 ) { @ ; @ x1 = ( - ( *B ) / deno ) + ( sqrt ( disc ) / deno ) ; @ x2 = ( - ( *B ) / deno ) - ( sqrt ( disc ) / deno ) ; @ { @ ( *temptemp1 ) = x1 ; @ ( *temptemp2 ) = x2 ; @ ; @ } @ } else if ( disc == 0 ) { @ ; @ x1 = - ( *B ) / deno ; @ { @ ( *temptemp3 ) = x1 ; @ ; @ } @ } else @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *e ) , @ float ( *temptemp1 ) ) { @ float result ; @ ; @ result = ( *a ) + ( *b ) + ( *c ) + ( *d ) - ( *e ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) , float ( *temptemp3 ) , float ( *temptemp4 ) , @ float ( *temptemp5 ) , float ( *temptemp6 ) ) { @ float temp ; @ ; @ ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = ( *c ) ; @ ; @ } @ temp = ( *a ) ; @ ( *a ) = ( *b ) ; @ ( *b ) = ( *c ) ; @ ( *c ) = temp ; @ ; @ { @ ( *temptemp4 ) = ( *a ) ; @ ( *temptemp5 ) = ( *b ) ; @ ( *temptemp6 ) = ( *c ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int addTwoNumbers ( int x , int y ) { return x + y ; } @ int entry_point ( int ( *temptemp1 ) ) { @ int sum ; @ int b ; @ int a ; @ int ( *ptr_sum ) ( int , int ) ; @ ptr_sum = &addTwoNumbers ; @ a = 10 ; @ b = 20 ; @ sum = ( *ptr_sum ) ( a , b ) ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *pascals ) , float ( *temptemp1 ) ) { @ float conversionFactor ; @ float mmHg ; @ conversionFactor = 0.0075 ; @ ; @ mmHg = ( *pascals ) * conversionFactor ; @ { @ ( *temptemp1 ) = mmHg ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void readArray ( int arr [ ] , int size ) { @ int i = 0 ; @ ; @ for ( i = 0 ; i < size ; i++ ) { @ ; @ } @ } @ int getLargest ( int arr [ ] , int size ) { @ int i = 0 , largest = 0 ; @ largest = arr [ 0 ] ; @ for ( i = 1 ; i < size ; i++ ) { @ if ( arr [ i ] > largest ) largest = arr [ i ] ; @ } @ return largest ; @ } @ int getSmallest ( int arr [ ] , int size ) { @ int i = 0 , smallest = 0 ; @ smallest = arr [ 0 ] ; @ for ( i = 1 ; i < size ; i++ ) { @ if ( arr [ i ] < smallest ) smallest = arr [ i ] ; @ } @ return smallest ; @ } @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int arr [ 10 ] ; @ readArray ( arr , 10 ) ; @ { @ ( *temptemp1 ) = getLargest ( arr , 10 ) ; @ ; @ } @ { @ ( *temptemp2 ) = getSmallest ( arr , 10 ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *gender ) , int ( *age ) ) { @ ; @ ; @ if ( ( ( *gender ) == 'F' || ( *gender ) == 'f' ) && ( *age ) >= 18 ) { @ ; @ } else if ( ( ( *gender ) == 'F' || ( *gender ) == 'f' ) && ( *age ) < 18 ) { @ ; @ } else if ( ( ( *gender ) == 'M' || ( *gender ) == 'm' ) && ( *age ) >= 18 ) { @ ; @ } else if ( ( ( *gender ) == 'M' || ( *gender ) == 'm' ) && ( *age ) < 18 ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *base_side ) , float ( *slant_h ) , float ( *temptemp1 ) ) { @ float total_surface_area ; @ float triangle_area ; @ float square_area ; @ ; @ ; @ square_area = ( *base_side ) * ( *base_side ) ; @ triangle_area = ( *base_side ) * ( *slant_h ) ; @ total_surface_area = square_area + 2 * triangle_area ; @ { @ ( *temptemp1 ) = total_surface_area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) , int ( *temptemp5 ) ) { @ char a = 'B' ; @ int b = 345 ; @ float c = 456.78f ; @ float d = 2345.67f ; @ char str [ ] = "World" ; @ int size_a = sizeof ( a ) ; @ int size_b = sizeof ( b ) ; @ int size_c = sizeof ( c ) ; @ int size_d = sizeof ( d ) ; @ int size_str = sizeof ( str ) ; @ { @ ( *temptemp1 ) = size_a ; @ ; @ } @ { @ ( *temptemp2 ) = size_b ; @ ; @ } @ { @ ( *temptemp3 ) = size_c ; @ ; @ } @ { @ ( *temptemp4 ) = size_d ; @ ; @ } @ { @ ( *temptemp5 ) = size_str ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *regno ) , char ( *name ) , int ( *age ) , int ( *dob ) , @ char ( *temptemp1 ) , char ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) , int ( *temptemp5 ) ) { @ int result ; @ ; @ ; @ ; @ ; @ ; @ ; @ result = ( *age ) + ( *dob ) ; @ ; @ { @ ( *temptemp1 ) = ( *name ) ; @ ( *temptemp2 ) = ( *regno ) ; @ ( *temptemp3 ) = ( *age ) ; @ ( *temptemp4 ) = ( *dob ) ; @ ( *temptemp5 ) = result ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *arr ) , int ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) , float ( *temptemp5 ) ) { @ int i ; @ float sum = 0 ; @ float sumOfCubes = 0 ; @ float skewness ; @ float stdDeviation ; @ float variance = 0 ; @ float mean ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ sum += arr [ i ] ; @ } @ mean = sum / ( *n ) ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ variance += pow ( arr [ i ] - mean , 2 ) ; @ } @ variance = variance / ( *n ) ; @ stdDeviation = sqrt ( variance ) ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ sumOfCubes += pow ( arr [ i ] - mean , 3 ) ; @ } @ skewness = ( ( *n ) / ( ( ( *n ) - 1.0f ) * ( ( *n ) - 2.0f ) ) ) * ( sumOfCubes / ( *n ) ) / @ pow ( stdDeviation , 3 ) ; @ ; @ { @ ( *temptemp2 ) = mean ; @ ; @ } ; @ { @ ( *temptemp3 ) = variance ; @ ; @ } ; @ { @ ( *temptemp4 ) = stdDeviation ; @ ; @ } ; @ { @ ( *temptemp5 ) = skewness ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int pentagonalNumber ; @ do { @ ; @ if ( ( *n ) <= 0 ) { @ ; @ } @ } while ( ( *n ) <= 0 ) ; @ pentagonalNumber = ( 3 * ( *n ) * ( *n ) - ( *n ) ) / 2 ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ { @ ( *temptemp2 ) = pentagonalNumber ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int j ; @ int i ; @ for ( i = 1 ; i <= 10 ; i++ ) { @ for ( j = 1 ; j <= i ; j++ ) { @ { @ ( *temptemp1 ) = i * j ; @ ; @ } @ } ; @ } @ return ( 0 ) ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int loop ; @ int mul ; @ ; @ ; @ mul = 0 ; @ for ( loop = 1 ; loop <= ( *b ) ; loop++ ) { @ mul += ( *a ) ; @ } @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = mul ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *e ) , @ float ( *temptemp1 ) ) { @ float max ; @ ; @ max = ( *a ) ; @ if ( ( *b ) > max ) max = ( *b ) ; @ if ( ( *c ) > max ) max = ( *c ) ; @ if ( ( *d ) > max ) max = ( *d ) ; @ if ( ( *e ) > max ) max = ( *e ) ; @ { @ ( *temptemp1 ) = max ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int k ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ for ( j = i + 1 ; j < ( *size ) ; j++ ) { @ if ( arr [ i ] == arr [ j ] ) { @ for ( k = j ; k < ( *size ) - 1 ; k++ ) { @ arr [ k ] = arr [ k + 1 ] ; @ } @ ( *size ) -- ; @ j-- ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = arr [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *num ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int flag ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } ; @ flag = 0 ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ if ( arr [ i ] == ( *num ) ) { @ flag = 1 ; @ { @ ( *temptemp2 ) = ( *num ) ; @ ( *temptemp3 ) = i + 1 ; @ ; @ } @ break ; @ } @ } @ if ( flag == 0 ) { @ { @ ( *temptemp4 ) = ( *num ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *value ) , float ( *temptemp1 ) ) { @ ; @ float result = ( *value ) * 2.54 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int isPrime ; @ int i ; @ int nthPrime = 2 ; @ int num = 2 ; @ int count = 0 ; @ ; @ while ( count < ( *n ) ) { @ isPrime = 1 ; @ for ( i = 2 ; i * i <= num ; i++ ) { @ if ( num % i == 0 ) { @ isPrime = 0 ; @ break ; @ } @ } @ if ( isPrime ) { @ nthPrime = num ; @ count++ ; @ } @ num++ ; @ } @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = nthPrime ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *start ) , int ( *end ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int counter ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *start ) ; @ ( *temptemp2 ) = ( *end ) ; @ ; @ } @ for ( counter = ( *start ) ; counter <= ( *end ) ; counter++ ) { @ if ( counter % 2 == 1 ) { @ { @ ( *temptemp3 ) = counter ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number1 ) , int ( *number2 ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int count = 0 ; @ int j ; @ int i ; @ ; @ for ( i = ( *number1 ) ; i <= ( *number2 ) ; i++ ) { @ if ( i < 2 ) continue ; @ int isPrime = 1 ; @ for ( j = 2 ; j * j <= i ; j++ ) { @ if ( i % j == 0 ) { @ isPrime = 0 ; @ break ; @ } @ } @ if ( isPrime ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ count++ ; @ } @ } @ { @ ( *temptemp2 ) = ( *number1 ) ; @ ( *temptemp3 ) = ( *number2 ) ; @ ( *temptemp4 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int diff ; @ ; @ ; @ diff = abs ( ( *a ) - ( *b ) ) ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ; @ } ; @ { @ ( *temptemp2 ) = ( *b ) ; @ ; @ } ; @ { @ ( *temptemp3 ) = diff ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int loop ; @ int sum ; @ ; @ sum = 0 ; @ for ( loop = 1 ; loop < ( *num ) ; loop++ ) { @ if ( ( *num ) % loop == 0 ) sum += loop ; @ } @ if ( sum == ( *num ) ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , double ( *arr ) , int ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) , float ( *temptemp5 ) ) { @ int i ; @ double sum = 0 ; @ double mean ; @ double sumOfCubes = 0 ; @ double variance = 0 ; @ double skewness ; @ double stdDeviation ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ sum += arr [ i ] ; @ } @ mean = sum / ( *n ) ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ variance += pow ( arr [ i ] - mean , 2 ) ; @ } @ variance /= ( *n ) ; @ stdDeviation = sqrt ( variance ) ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ sumOfCubes += pow ( arr [ i ] - mean , 3 ) ; @ } @ skewness = ( ( *n ) / ( ( ( *n ) - 1.0 ) * ( ( *n ) - 2.0 ) ) ) * ( sumOfCubes / ( *n ) ) / @ pow ( stdDeviation , 3 ) ; @ { @ ( *temptemp2 ) = mean ; @ ; @ } @ { @ ( *temptemp3 ) = variance ; @ ; @ } @ { @ ( *temptemp4 ) = stdDeviation ; @ ; @ } @ { @ ( *temptemp5 ) = skewness ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *speedMPS ) , float ( *temptemp1 ) ) { @ float speedKnots ; @ ; @ speedKnots = ( *speedMPS ) * 1.94384 ; @ ; @ { @ ( *temptemp1 ) = speedKnots ; @ ; @ } ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ ; @ surfaceArea = 4 * 3.14159 * ( *radius ) * ( *radius ) ; @ ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str1 ) , char ( *str2 ) ) { @ char flag = 0 ; @ char j ; @ char i ; @ ; @ ; @ i = 0 ; @ j = 0 ; @ while ( str1 [ i ] != '\0' ) { @ i++ ; @ } @ while ( str2 [ j ] != '\0' ) { @ j++ ; @ } @ if ( i != j ) { @ flag = 0 ; @ } else { @ for ( i = 0 , j = 0 ; str1 [ i ] != '\0' , str2 [ j ] != '\0' ; i++ , j++ ) { @ if ( str1 [ i ] == str2 [ j ] ) { @ flag = 1 ; @ } @ } @ } @ if ( flag == 0 ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float area ; @ float radius_squared ; @ ; @ radius_squared = ( *radius ) * ( *radius ) ; @ area = 3.14159 * radius_squared ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *x ) , int ( *y ) , int ( *z ) , int ( *temptemp1 ) ) { @ int largest ; @ ; @ largest = ( *x ) ; @ if ( ( *y ) > largest ) largest = ( *y ) ; @ if ( ( *z ) > largest ) largest = ( *z ) ; @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *base ) , float ( *slantHeight ) , float ( *temptemp1 ) ) { @ float totalSurfaceArea ; @ ; @ ; @ ; @ ; @ float baseArea = ( *base ) * ( *base ) ; @ float lateralArea = 2 * ( *base ) * ( *slantHeight ) ; @ totalSurfaceArea = baseArea + lateralArea ; @ { @ ( *temptemp1 ) = totalSurfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void makeLowercase ( char s [ ] ) ; @ void makeUppercase ( char s [ ] ) ; @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ char str [ 100 ] ; @ ; @ makeLowercase ( str ) ; @ { @ ( *temptemp1 ) = str ; @ ; @ } @ makeUppercase ( str ) ; @ { @ ( *temptemp2 ) = str ; @ ; @ } @ return 0 ; @ } @ void makeLowercase ( char s [ ] ) { @ for ( int i = 0 ; s [ i ] ; i++ ) { @ s [ i ] += ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) ? 32 : 0 ; @ } @ } @ void makeUppercase ( char s [ ] ) { @ for ( int i = 0 ; s [ i ] ; i++ ) { @ s [ i ] -= ( s [ i ] >= 'a' && s [ i ] <= 'z' ) ? 32 : 0 ; @ } @ }
#include <stdio.h> @ @ void toLowercase ( char s [ ] ) ; @ void toUppercase ( char s [ ] ) ; @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ char str [ 100 ] ; @ ; @ toLowercase ( str ) ; @ { @ ( *temptemp1 ) = str ; @ ; @ } @ toUppercase ( str ) ; @ { @ ( *temptemp2 ) = str ; @ ; @ } @ return 0 ; @ } @ void toLowercase ( char s [ ] ) { @ int i = 0 ; @ while ( s [ i ] ) { @ s [ i ] = ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) ? ( s [ i ] + 32 ) : s [ i ] ; @ i++ ; @ } @ } @ void toUppercase ( char s [ ] ) { @ int i = 0 ; @ while ( s [ i ] ) { @ s [ i ] = ( s [ i ] >= 'a' && s [ i ] <= 'z' ) ? ( s [ i ] - 32 ) : s [ i ] ; @ i++ ; @ } @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) ) { @ int largest ; @ ; @ ; @ ; @ if ( ( *a ) >= ( *b ) ) { @ if ( ( *a ) >= ( *c ) ) @ largest = ( *a ) ; @ else @ largest = ( *c ) ; @ } else { @ if ( ( *b ) >= ( *c ) ) @ largest = ( *b ) ; @ else @ largest = ( *c ) ; @ } @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *vals ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int swapped ; @ int n ; @ int m ; @ ; @ m = 0 ; @ while ( m < ( *size ) ) { @ { @ ( *temptemp1 ) = m + 1 ; @ ; @ } @ m++ ; @ } @ for ( m = 0 ; m < ( *size ) ; m++ ) { @ for ( n = 0 ; n < ( *size ) - m - 1 ; n++ ) { @ if ( vals [ n ] < vals [ n + 1 ] ) { @ swapped = vals [ n ] ; @ vals [ n ] = vals [ n + 1 ] ; @ vals [ n + 1 ] = swapped ; @ } @ } @ } ; @ for ( m = 0 ; m < ( *size ) ; m++ ) { @ ( *temptemp2 ) = vals [ m ] ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) ) { @ int largest ; @ ; @ ; @ ; @ largest = @ ( ( *a ) > ( *b ) ) ? ( ( *a ) > ( *c ) ? ( *a ) : ( *c ) ) : ( ( *b ) > ( *c ) ? ( *b ) : ( *c ) ) ; @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) , int ( *temptemp5 ) ) { @ char letter = 'D' ; @ int number = 912 ; @ float decimal = 1011.12f ; @ float largeDecimal = 5678.91f ; @ char phrase [ ] = "C Programming" ; @ int sizeOfLetter = sizeof ( letter ) ; @ int sizeOfNumber = sizeof ( number ) ; @ int sizeOfDecimal = sizeof ( decimal ) ; @ int sizeOfLargeDecimal = sizeof ( largeDecimal ) ; @ int sizeOfPhrase = sizeof ( phrase ) ; @ { @ ( *temptemp1 ) = sizeOfLetter ; @ ; @ } @ { @ ( *temptemp2 ) = sizeOfNumber ; @ ; @ } @ { @ ( *temptemp3 ) = sizeOfDecimal ; @ ; @ } @ { @ ( *temptemp4 ) = sizeOfLargeDecimal ; @ ; @ } @ { @ ( *temptemp5 ) = sizeOfPhrase ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *e ) , @ float ( *temptemp1 ) ) { @ float result ; @ ; @ result = ( *a ) ; @ result += ( *b ) ; @ result += ( *c ) ; @ result -= ( *d ) ; @ result -= ( *e ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *temptemp1 ) ) { @ float sum ; @ ; @ sum = ( ( *n ) / 2.0 ) * ( 1 + ( *n ) ) ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *limit ) , float ( *temptemp1 ) ) { @ int i = 0 ; @ float next ; @ float second = 1 ; @ float first = 0 ; @ ; @ ; @ for ( ; i < ( *limit ) ; i++ ) { @ if ( i <= 1 ) @ next = ( float ) i ; @ else { @ next = first + second ; @ first = second ; @ second = next ; @ } @ { @ ( *temptemp1 ) = next ; @ ; @ } @ } ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *sideLength ) , float ( *temptemp1 ) ) { @ float halfSqrt3 ; @ float area ; @ ; @ halfSqrt3 = sqrt ( 3 ) / 2 ; @ area = 2 * halfSqrt3 * ( *sideLength ) * ( *sideLength ) ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *array ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int temp ; @ int j ; @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) @ for ( i = 0 ; i < ( *n ) - 1 ; i++ ) { @ for ( j = 0 ; j < ( *n ) - i - 1 ; j++ ) { @ if ( array [ j ] > array [ j + 1 ] ) { @ temp = array [ j ] ; @ array [ j ] = array [ j + 1 ] ; @ array [ j + 1 ] = temp ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ ( *temptemp2 ) = array [ i ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *kmph ) , float ( *temptemp1 ) ) { @ float knots ; @ ; @ knots = ( *kmph ) / 1.852 ; @ ; @ { @ ( *temptemp1 ) = knots ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int g = 5 ; @ void test ( ) ; @ void showcase ( ) ; @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int g = 10 ; @ int h = 20 ; @ { @ ( *temptemp1 ) = g ; @ ( *temptemp2 ) = h ; @ ; @ } @ test ( ) ; @ showcase ( ) ; @ { @ ( *temptemp3 ) = h ; @ ; @ } @ return 0 ; @ } @ void test ( ) { @ int h = 30 ; @ ; @ ; @ } @ void showcase ( ) { @ int i = 50 ; @ ; @ ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *sideLength ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ perimeter = 4 * ( *sideLength ) ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i = 1 ; @ int sum = 0 ; @ ; @ do { @ if ( ( *num ) % i == 0 ) { @ sum += i ; @ } @ i++ ; @ } while ( i < ( *num ) ) ; @ if ( sum == ( *num ) ) { @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int cnt = 0 ; @ ; @ if ( ( *num ) == 0 ) { @ cnt = 1 ; @ } else { @ int tNum = ( *num ) < 0 ? - ( *num ) : ( *num ) ; @ while ( tNum > 0 ) { @ cnt++ ; @ tNum /= 10 ; @ } @ } @ { @ ( *temptemp1 ) = ( *num ) ; @ ( *temptemp2 ) = cnt ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ ; @ float circumference = 2 * 3.14159 * ( *radius ) ; @ ; @ { @ ( *temptemp1 ) = circumference ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int next = 0 ; @ int current = 1 ; @ int prev = 0 ; @ int count = 0 ; @ ; @ if ( ( *limit ) < 1 ) { @ { @ ( *temptemp1 ) = ( *limit ) ; @ ; @ } @ } else { @ for ( ; next <= ( *limit ) ; count++ ) { @ next = prev + current ; @ prev = current ; @ current = next ; @ if ( prev == 1 ) { @ count++ ; @ } @ } @ { @ ( *temptemp2 ) = ( *limit ) ; @ ( *temptemp3 ) = count ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i = 0 ; @ int second = 1 ; @ int first = 0 ; @ ; @ ; @ while ( i < ( *limit ) ) { @ if ( i <= 1 ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = first + second ; @ ; @ } @ second += first ; @ first = second - first ; @ } @ i++ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *year ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ switch ( ( ( *year ) % 4 == 0 && ( *year ) % 100 != 0 ) || ( *year ) % 400 == 0 ) { @ case 0: { @ ( *temptemp1 ) = ( *year ) ; @ ; @ } break ; @ case 1: { @ ( *temptemp2 ) = ( *year ) ; @ ; @ } break ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int a = 10 ; @ void fun ( void ) ; @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int a = 20 ; @ int b = 30 ; @ { @ ( *temptemp1 ) = a ; @ ( *temptemp2 ) = b ; @ ; @ } @ fun ( ) ; @ { @ ( *temptemp3 ) = b ; @ ; @ } @ return 0 ; @ } @ void fun ( void ) { @ int b = 40 ; @ ; @ ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int iVar ; @ float fVar ; @ ; @ fVar = sqrt ( ( double ) ( *num ) ) ; @ iVar = fVar ; @ if ( iVar == fVar ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ int j ; @ int i ; @ char symbol = 'A' ; @ int count = 1 ; @ ; @ ; @ for ( i = 1 ; i <= ( *num ) ; i++ ) { @ for ( j = 0 ; j <= ( count / 2 ) ; j++ ) { @ { @ ( *temptemp1 ) = symbol++ ; @ ; @ } @ } @ symbol = symbol - 2 ; @ for ( j = 0 ; j < ( count / 2 ) ; j++ ) { @ { @ ( *temptemp2 ) = symbol-- ; @ ; @ } @ } @ count = count + 2 ; @ symbol = 'A' ; @ ; @ } @ return ( 0 ) ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ int i = 0 ; @ int arr [ 100 ] ; @ while ( ( *num ) != -1 ) { @ ; @ count++ ; @ arr [ i++ ] = ( *num ) ; @ } @ { @ ( *temptemp1 ) = count ; @ ; @ } ; @ for ( i = 0 ; i < count ; i++ ) { @ { @ ( *temptemp2 ) = arr [ i ] ; @ ; @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *wDay ) ) { @ ; @ if ( ( *wDay ) == 0 ) { @ ; @ } else if ( ( *wDay ) == 1 ) { @ ; @ } else if ( ( *wDay ) == 2 ) { @ ; @ } else if ( ( *wDay ) == 3 ) { @ ; @ } else if ( ( *wDay ) == 4 ) { @ ; @ } else if ( ( *wDay ) == 5 ) { @ ; @ } else if ( ( *wDay ) == 6 ) { @ ; @ } else { @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *num2 ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ ; @ ; @ while ( ( *num1 ) != ( *num2 ) ) { @ if ( ( *num1 ) > ( *num2 ) ) @ ( *num1 ) -= ( *num2 ) ; @ else @ ( *num2 ) -= ( *num1 ) ; @ } @ { @ ( *temptemp1 ) = ( *num1 ) + ( *num2 ) - ( *num1 ) ; @ ( *temptemp2 ) = ( *num1 ) + ( *num2 ) - ( *num2 ) ; @ ( *temptemp3 ) = ( *num1 ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *enteredPassword ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int password = 1234 ; @ int i ; @ int login ; @ ; @ for ( i = 0 ; i <= 2 ; i++ ) { @ ; @ if ( password == ( *enteredPassword ) ) { @ login = ( *enteredPassword ) + 1 ; @ { @ ( *temptemp1 ) = login ; @ ; @ } @ } else { @ login = ( *enteredPassword ) + 2 ; @ { @ ( *temptemp2 ) = login ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ int nthEven ; @ float commonDifference = 2 ; @ float firstTerm = 2 ; @ ; @ nthEven = firstTerm + ( ( *n ) - 1 ) * commonDifference ; @ ; @ { @ ( *temptemp1 ) = nthEven ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float radius = 5.0f ; @ float area ; @ area = 3.14f * radius * radius ; @ { @ ( *temptemp1 ) = radius ; @ ; @ } @ { @ ( *temptemp2 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *marks ) ) { @ int i ; @ int passedSubjects = 0 ; @ ; @ for ( i = 0 ; i < 5 ; i++ ) { @ if ( marks [ i ] > 32 ) passedSubjects++ ; @ } @ if ( passedSubjects == 5 ) @ ; @ else @ ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ ; @ area = 3.14159265358979323846 * ( *a ) * ( *b ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *ch ) , char ( *temptemp1 ) , char ( *temptemp2 ) , char ( *temptemp3 ) , @ char ( *temptemp4 ) , char ( *temptemp5 ) , char ( *temptemp6 ) ) { @ ; @ switch ( ( *ch ) ) { @ case 'a': { @ ( *temptemp1 ) = ( *ch ) ; @ ; @ } break ; @ case 'e': { @ ( *temptemp2 ) = ( *ch ) ; @ ; @ } break ; @ case 'i': { @ ( *temptemp3 ) = ( *ch ) ; @ ; @ } break ; @ case 'o': { @ ( *temptemp4 ) = ( *ch ) ; @ ; @ } break ; @ case 'u': { @ ( *temptemp5 ) = ( *ch ) ; @ ; @ } break ; @ default: { @ ( *temptemp6 ) = ( *ch ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ if ( ( *c ) + ( *d ) == 0 ) { @ ; @ return -1 ; @ } @ result = ( ( *a ) * ( *b ) ) / ( ( *c ) + ( *d ) ) ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ int divisor = 10 ; @ int result ; @ ; @ result = ( *num ) / divisor ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *baseLength ) , float ( *sideLength ) , float ( *temptemp1 ) ) { @ float totalSideLength ; @ float totalBaseLength ; @ float perimeter ; @ ; @ ; @ totalBaseLength = ( *baseLength ) * 2 ; @ totalSideLength = ( *sideLength ) * 2 ; @ perimeter = totalBaseLength + totalSideLength ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *aReal ) , float ( *aImag ) , float ( *bReal ) , float ( *bImag ) , @ float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float sumImag ; @ float sumReal ; @ ; @ ; @ sumReal = ( *aReal ) + ( *bReal ) ; @ sumImag = ( *aImag ) + ( *bImag ) ; @ { @ ( *temptemp1 ) = sumReal ; @ ( *temptemp2 ) = sumImag ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *height ) , float ( *temptemp1 ) ) { @ float total_area ; @ float area_lateral ; @ float area_base ; @ ; @ ; @ area_base = pow ( ( *length ) , 2 ) ; @ area_lateral = ( *length ) * ( *height ) * 2 ; @ total_area = area_base + area_lateral ; @ { @ ( *temptemp1 ) = total_area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , int ( *A ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int j ; @ int i ; @ int Temp ; @ ; @ ; @ for ( i = 1 ; i <= ( *N ) ; i++ ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ } @ for ( i = 1 ; i < ( *N ) ; i++ ) { @ Temp = A [ i ] ; @ j = i - 1 ; @ while ( Temp < A [ j ] && j > 0 ) { @ A [ j + 1 ] = A [ j ] ; @ j = j - 1 ; @ } @ A [ j + 1 ] = Temp ; @ } ; @ for ( i = 1 ; i <= ( *N ) ; i++ ) { @ ( *temptemp2 ) = A [ i ] ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *rows ) ) { @ int j ; @ int i ; @ ; @ for ( i = 1 ; i <= ( *rows ) ; i++ ) { @ int totalChars = ( *rows ) - 1 + i ; @ for ( j = 1 ; j <= totalChars ; j++ ) { @ if ( j >= ( *rows ) - ( i - 1 ) ) { @ ; @ if ( j < totalChars ) { @ ; @ } @ } else { @ ; @ } @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ int i = 1 ; @ int cube = 0 ; @ ; @ while ( cube <= ( *limit ) ) { @ cube = i * i * i ; @ if ( cube <= ( *limit ) ) { @ count++ ; @ } @ i++ ; @ } ; @ { @ ( *temptemp1 ) = ( *limit ) ; @ ; @ } ; @ { @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ ; @ ; @ int triangularNumber = 1 ; @ int i = 1 ; @ while ( triangularNumber < ( *lower ) ) { @ i++ ; @ triangularNumber += i ; @ } @ { @ ( *temptemp1 ) = ( *lower ) ; @ ( *temptemp2 ) = ( *upper ) ; @ ; @ } @ while ( triangularNumber <= ( *upper ) ) { @ { @ ( *temptemp3 ) = triangularNumber ; @ ; @ } @ i++ ; @ triangularNumber += i ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *d1 ) , float ( *d2 ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ ; @ area = ( ( *d1 ) * ( *d2 ) ) / 2 ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side1 ) , float ( *temptemp1 ) ) { @ float side6 ; @ float side5 ; @ float side4 ; @ float side3 ; @ float side2 ; @ float perimeter ; @ ; @ side2 = ( *side1 ) ; @ side3 = ( *side1 ) ; @ side4 = ( *side1 ) ; @ side5 = ( *side1 ) ; @ side6 = ( *side1 ) ; @ perimeter = ( *side1 ) + side2 + side3 + side4 + side5 + side6 ; @ ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , float ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) ) { @ float root2 ; @ float root1 ; @ float discriminant ; @ ; @ discriminant = ( *b ) * ( *b ) - 4 * ( *a ) * ( *c ) ; @ if ( discriminant > 0 ) { @ root1 = ( - ( *b ) + sqrt ( discriminant ) ) / ( 2 * ( *a ) ) ; @ root2 = ( - ( *b ) - sqrt ( discriminant ) ) / ( 2 * ( *a ) ) ; @ { @ ( *temptemp1 ) = root1 ; @ ( *temptemp2 ) = root2 ; @ ; @ } @ } else if ( discriminant == 0 ) { @ root1 = - ( *b ) / ( 2.0 * ( *a ) ) ; @ { @ ( *temptemp3 ) = root1 ; @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) ) { @ int fibNext ; @ int fib2 = 1 ; @ int fib1 = 0 ; @ ; @ ; @ for ( fibNext = fib1 + fib2 ; fibNext <= ( *upper ) ; fibNext = fib1 + fib2 ) { @ if ( fibNext >= ( *lower ) ) { @ { @ ( *temptemp1 ) = fibNext ; @ ; @ } @ } @ fib1 = fib2 ; @ fib2 = fibNext ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void swapElements ( int *arr1 , int *arr2 , int n ) { @ int i = 0 , temp = 0 ; @ for ( i = 0 ; i < n ; i++ ) { @ temp = arr1 [ i ] ; @ arr1 [ i ] = arr2 [ i ] ; @ arr2 [ i ] = temp ; @ } @ } @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int i = 0 ; @ int array_1 [ 6 ] = { 0 , 1 , 2 , 3 , 4 } ; @ int array_2 [ 6 ] = { 5 , 6 , 7 , 8 , 9 } ; @ swapElements ( array_1 , array_2 , 5 ) ; @ ; @ for ( i = 0 ; i < 5 ; i++ ) { @ { @ ( *temptemp1 ) = i ; @ ( *temptemp2 ) = array_1 [ i ] ; @ ; @ } @ } ; @ for ( i = 0 ; i < 5 ; i++ ) { @ { @ ( *temptemp3 ) = i ; @ ( *temptemp4 ) = array_2 [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *numbers ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int i ; @ int maxIndex = 0 ; @ int minIndex = 0 ; @ ; @ for ( i = 0 ; i < 10 ; i++ ) { @ } @ for ( i = 1 ; i < 10 ; i++ ) { @ if ( numbers [ i ] < numbers [ minIndex ] ) { @ minIndex = i ; @ } @ if ( numbers [ i ] > numbers [ maxIndex ] ) { @ maxIndex = i ; @ } @ } @ { @ ( *temptemp1 ) = numbers [ minIndex ] ; @ ; @ } @ { @ ( *temptemp2 ) = minIndex ; @ ; @ } @ { @ ( *temptemp3 ) = numbers [ maxIndex ] ; @ ; @ } @ { @ ( *temptemp4 ) = maxIndex ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *inputValue ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ ; @ float resultFloor = floor ( ( *inputValue ) ) ; @ float resultCeil = ceil ( ( *inputValue ) ) ; @ ; @ { @ ( *temptemp1 ) = resultFloor ; @ ; @ } ; @ { @ ( *temptemp2 ) = resultCeil ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , unsigned int ( *temptemp3 ) ) { @ int a [ 3 ] = { 11 , 22 , 33 } ; @ int i ; @ for ( i = 0 ; i < 3 ; i++ ) { @ int value = a [ i ] ; @ unsigned int address = ( unsigned int ) &a [ i ] ; @ { @ ( *temptemp1 ) = i ; @ ( *temptemp2 ) = value ; @ ( *temptemp3 ) = address ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int divisible ; @ int result ; @ ; @ divisible = ( ( *number ) % 3 == 0 ) ? 1 : 0 ; @ result = ( *number ) + ( divisible ? 1 : 2 ) ; @ if ( divisible ) { @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *ch ) , char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ ; @ if ( ( *ch ) == 'a' || ( *ch ) == 'e' || ( *ch ) == 'i' || ( *ch ) == 'o' || @ ( *ch ) == 'u' || ( *ch ) == 'A' || ( *ch ) == 'E' || ( *ch ) == 'I' || @ ( *ch ) == 'O' || ( *ch ) == 'U' ) { @ { @ ( *temptemp1 ) = ( *ch ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *ch ) ; @ ; @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ ; @ ( *side ) *= ( *side ) * 2 * ( 1 + sqrt ( 2 ) ) ; @ ; @ { @ ( *temptemp1 ) = ( *side ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *pos ) , int ( *val ) , int ( *temptemp1 ) ) { @ int i = 0 ; @ ; @ do { @ i++ ; @ } while ( i < ( *n ) ) ; @ ; @ ; @ for ( i = ( *n ) ; i >= ( *pos ) ; i-- ) { @ arr [ i ] = arr [ i - 1 ] ; @ } @ arr [ ( *pos ) - 1 ] = ( *val ) ; @ ( *n ) ++ ; @ ; @ i = 0 ; @ while ( i < ( *n ) ) { @ { @ ( *temptemp1 ) = arr [ i ] ; @ ; @ } @ i++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *R ) , float ( *r ) , float ( *temptemp1 ) ) { @ float piSquared ; @ float area ; @ ; @ ; @ piSquared = 3.14159265358979323846 * 3.14159265358979323846 ; @ area = 4 * piSquared * ( *R ) * ( *r ) ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *height ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) , float ( *temptemp3 ) ) { @ float area ; @ float l ; @ ; @ l = sqrt ( pow ( ( *radius ) , 2 ) + pow ( ( *height ) , 2 ) ) ; @ area = 3.14159 * ( *radius ) * ( ( *radius ) + l ) ; @ { @ ( *temptemp1 ) = ( *radius ) ; @ ( *temptemp2 ) = ( *height ) ; @ ; @ } @ { @ ( *temptemp3 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int temp ; @ int min_index ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *size ) - 1 ; i++ ) { @ min_index = i ; @ for ( j = i + 1 ; j < ( *size ) ; j++ ) { @ if ( arr [ j ] < arr [ min_index ] ) { @ min_index = j ; @ } @ } @ if ( min_index != i ) { @ temp = arr [ i ] ; @ arr [ i ] = arr [ min_index ] ; @ arr [ min_index ] = temp ; @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = arr [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) ) { @ int maxCols ; @ ; @ if ( ( *maxRows ) < 1 ) { @ ; @ exit ( 0 ) ; @ } @ maxCols = ( *maxRows ) * 2 - 1 ; @ puts ( "\n--------------------------------------------\n" ) ; @ int spacesInCurrentRow ; @ int row = 1 ; @ { @ spacesInCurrentRow = ( ( *maxRows ) - row ) * 2 ; @ int space = 1 ; @ ; @ int col = 1 ; @ ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void convert ( int , int ) ; @ int entry_point ( int ( *num ) ) { @ ; @ ; @ convert ( ( *num ) , 2 ) ; @ ; @ ; @ convert ( ( *num ) , 8 ) ; @ ; @ ; @ convert ( ( *num ) , 16 ) ; @ ; @ return 0 ; @ } @ void convert ( int num , int base ) { @ int rem = num % base ; @ if ( num == 0 ) return ; @ convert ( num / base , base ) ; @ if ( rem < 10 ) @ ; @ else @ ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int shifted = ( ( *num ) >> 1 ) << 1 ; @ if ( ( *num ) != shifted ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int tally ; @ char flag = 0 ; @ ; @ for ( tally = 2 ; tally <= ( ( *number ) / 2 ) ; tally++ ) { @ if ( ( *number ) % tally == 0 ) { @ flag = 1 ; @ break ; @ } @ } @ if ( flag == 0 ) { @ ( *temptemp1 ) = ( *number ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *number ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int fact , i , j ; @ ; @ ; @ for ( i = ( *lower ) ; i <= ( *upper ) ; i++ ) { @ fact = 1 ; @ for ( j = 2 ; j <= i ; j++ ) { @ fact = fact * j ; @ if ( fact < 0 ) { @ fact = -1 ; @ break ; @ } @ } @ if ( fact > 0 && fact <= ( *upper ) ) { @ { @ ( *temptemp1 ) = i ; @ ( *temptemp2 ) = fact ; @ ; @ } @ } else { @ break ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side_length ) , float ( *temptemp1 ) ) { @ float octagon_perimeter ; @ ; @ octagon_perimeter = ( *side_length ) * 8.0f ; @ ; @ { @ ( *temptemp1 ) = octagon_perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int nthHexagonal ; @ ; @ if ( ( *n ) > 0 ) { @ nthHexagonal = 2 * ( *n ) * ( *n ) - ( *n ) ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = nthHexagonal ; @ ; @ } @ } else { @ ; @ return 1 ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *x ) , int ( *y ) , int ( *z ) , int ( *temptemp1 ) ) { @ int largest ; @ ; @ largest = @ ( ( *x ) > ( *y ) ) ? ( ( *x ) > ( *z ) ? ( *x ) : ( *z ) ) : ( ( *y ) > ( *z ) ? ( *y ) : ( *z ) ) ; @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int j ; @ int i ; @ ; @ ; @ for ( i = 1 ; i <= ( *n ) ; i++ ) { @ for ( j = 1 ; j <= i ; j++ ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ } ; @ } ; @ for ( i = ( *n ) ; i >= 1 ; i-- ) { @ for ( j = 1 ; j <= i ; j++ ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ } ; @ } ; @ for ( i = ( *n ) ; i >= 1 ; i-- ) { @ for ( j = i ; j >= 1 ; j-- ) { @ { @ ( *temptemp3 ) = i ; @ ; @ } @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *pressureInPascals ) , float ( *temptemp1 ) ) { @ float pressureInBar ; @ ; @ ; @ pressureInBar = ( *pressureInPascals ) / 100000 ; @ { @ ( *temptemp1 ) = pressureInBar ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int countDigits ( int n ) { @ int count = 0 ; @ while ( n != 0 ) { @ n /= 10 ; @ count++ ; @ } @ return count ; @ } @ int isArmstrong ( int num ) { @ int n = countDigits ( num ) ; @ int temp = num , sum = 0 ; @ while ( temp != 0 ) { @ int remainder = temp % 10 ; @ sum += pow ( remainder , n ) ; @ temp /= 10 ; @ } @ return num == sum ; @ } @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int num = 1 ; @ int count = 0 ; @ ; @ while ( 1 ) { @ if ( isArmstrong ( num ) ) { @ count++ ; @ if ( count == ( *n ) ) { @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = num ; @ ; @ } @ break ; @ } @ } @ num++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *start ) , int ( *end ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int isPrime ; @ int j ; @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *start ) ; @ ( *temptemp2 ) = ( *end ) ; @ ; @ } @ for ( i = ( *start ) ; i <= ( *end ) ; i++ ) { @ if ( i == 1 || i == 0 ) continue ; @ isPrime = 1 ; @ for ( j = 2 ; j * j <= i ; j++ ) { @ if ( i % j == 0 ) { @ isPrime = 0 ; @ break ; @ } @ } @ if ( isPrime == 1 ) { @ { @ ( *temptemp3 ) = i ; @ ; @ } @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) ) { @ int j ; @ int i ; @ ; @ if ( ( *size ) < 1 ) { @ ; @ return -1 ; @ } @ for ( i = 1 ; i <= ( *size ) ; i++ ) { @ for ( j = 1 ; j <= ( *size ) * 2 ; j++ ) { @ if ( j == i || j == ( ( *size ) * 2 ) - i + 1 ) { @ ; @ } else { @ ; @ } @ } ; @ } @ for ( i = ( *size ) - 1 ; i > 0 ; i-- ) { @ for ( j = 1 ; j <= ( *size ) * 2 ; j++ ) { @ if ( j == i || j == ( ( *size ) * 2 ) - i + 1 ) { @ ; @ } else { @ ; @ } @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int isOdd = ( *num ) % 2 ; @ if ( isOdd ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *array ) , int ( *search ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , int ( *temptemp4 ) , @ int ( *temptemp5 ) ) { @ int middle ; @ int last ; @ int first ; @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp2 ) = i + 1 ; @ ; @ } @ } ; @ first = 0 ; @ last = ( *n ) - 1 ; @ middle = ( first + last ) / 2 ; @ while ( first <= last ) { @ if ( array [ middle ] < ( *search ) ) @ first = middle + 1 ; @ else if ( array [ middle ] == ( *search ) ) { @ { @ ( *temptemp3 ) = ( *search ) ; @ ( *temptemp4 ) = middle + 1 ; @ ; @ } @ break ; @ } else @ last = middle - 1 ; @ middle = ( first + last ) / 2 ; @ } @ if ( first > last ) { @ ( *temptemp5 ) = ( *search ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ char str2 [ 100 ] ; @ char str1 [ 100 ] ; @ int i = 0 ; @ ; @ for ( i = 0 ; str1 [ i ] != '\0' ; ++i ) { @ str2 [ i ] = str1 [ i ] ; @ } @ str2 [ i ] = '\0' ; @ ; @ { @ ( *temptemp1 ) = str1 ; @ ; @ } ; @ { @ ( *temptemp2 ) = str2 ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length_cm ) , float ( *temptemp1 ) ) { @ float length_inches ; @ ; @ length_inches = ( *length_cm ) / 2.54 ; @ ; @ { @ ( *temptemp1 ) = length_inches ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int space ; @ int j ; @ int i ; @ int rows = 8 ; @ int count = 1 ; @ for ( i = rows ; i >= 1 ; --i ) { @ for ( space = 0 ; space < rows - i ; ++space ) @ ; @ for ( j = i ; j <= 2 * i - 1 ; ++j ) { @ { @ ( *temptemp1 ) = count ; @ ; @ } @ count++ ; @ } @ for ( j = 0 ; j < i - 1 ; ++j ) { @ { @ ( *temptemp2 ) = count ; @ ; @ } @ count++ ; @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ ( *a ) = ( *a ) ^ ( *b ) ; @ ( *b ) = ( *a ) ^ ( *b ) ; @ ( *a ) = ( *a ) ^ ( *b ) ; @ ; @ { @ ( *temptemp3 ) = ( *a ) ; @ ( *temptemp4 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ result = ( *num ) / 10 * 10 ; @ { @ ( *temptemp1 ) = ( *num ) ; @ ( *temptemp2 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *decimal ) , int ( *temptemp1 ) ) { @ int octal = 0 ; @ int placeValue = 1 ; @ ; @ while ( ( *decimal ) != 0 ) { @ octal += ( ( *decimal ) % 8 ) * placeValue ; @ ( *decimal ) /= 8 ; @ placeValue *= 10 ; @ } @ int result = octal ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *numA ) , int ( *numB ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int sum = 0 ; @ ; @ ; @ while ( ( *numB ) > 0 ) { @ if ( ( *numB ) % 2 == 0 ) { @ ( *numA ) = ( *numA ) * 2 ; @ ( *numB ) = ( *numB ) / 2 ; @ } else { @ sum += ( *numA ) ; @ ( *numB ) -- ; @ } @ } ; @ { @ ( *temptemp1 ) = ( *numA ) ; @ ; @ } ; @ { @ ( *temptemp2 ) = ( *numB ) ; @ ; @ } ; @ { @ ( *temptemp3 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *dividend ) , int ( *divisor ) , int ( *temptemp1 ) ) { @ int remainder ; @ ; @ ; @ remainder = ( *dividend ) ; @ while ( remainder >= ( *divisor ) ) { @ remainder = remainder - ( *divisor ) ; @ } @ { @ ( *temptemp1 ) = remainder ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) ) { @ int temp ; @ int digit ; @ int reversed ; @ int num ; @ ; @ ; @ for ( num = ( *lower ) ; num <= ( *upper ) ; num++ ) { @ temp = num ; @ reversed = 0 ; @ while ( temp > 0 ) { @ digit = temp % 10 ; @ reversed = reversed * 10 + digit ; @ temp /= 10 ; @ } @ if ( num == reversed ) { @ { @ ( *temptemp1 ) = num ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ void value ( int x , int y ) ; @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int b = 8 ; @ int a = 5 ; @ { @ ( *temptemp1 ) = a ; @ ( *temptemp2 ) = b ; @ ; @ } @ value ( a , b ) ; @ { @ ( *temptemp3 ) = a ; @ ( *temptemp4 ) = b ; @ ; @ } @ return 0 ; @ } @ void value ( int x , int y ) { @ x++ ; @ y++ ; @ ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *principal ) , float ( *rate ) , float ( *year ) , @ float ( *temptemp1 ) ) { @ float ci ; @ ; @ ; @ ; @ ci = ( *principal ) * ( ( pow ( ( 1 + ( *rate ) / 100 ) , ( *year ) ) - 1 ) ) ; @ { @ ( *temptemp1 ) = ci ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , float ( *temptemp1 ) ) { @ int i ; @ float term ; @ float sum = 0.0 ; @ ; @ for ( i = 1 ; i <= 2 * ( *N ) ; i += 2 ) { @ term = i / ( float ) ( i * i ) ; @ sum += term ; @ } @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mps ) , float ( *temptemp1 ) ) { @ ; @ float mph = ( *mps ) * 2.236 ; @ { @ ( *temptemp1 ) = mph ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str ) ) { @ int flag = 0 ; @ int j = 0 ; @ int i = 0 ; @ ; @ while ( str [ j ] != '\0' ) { @ j++ ; @ } @ while ( i < j ) { @ j-- ; @ if ( str [ i ] != str [ j ] ) { @ flag = 1 ; @ break ; @ } @ i++ ; @ } @ if ( flag == 0 ) @ ; @ else @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number1 ) , int ( *number2 ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int isPrime ; @ int count = 0 ; @ int j ; @ int i ; @ ; @ if ( ( *number1 ) <= 2 ) { @ ; @ count = 1 ; @ ( *number1 ) = 3 ; @ } @ for ( i = ( *number1 ) ; i <= ( *number2 ) ; i += ( i % 2 == 0 ) ? 1 : 2 ) { @ isPrime = 1 ; @ for ( j = 3 ; j * j <= i ; j += 2 ) { @ if ( i % j == 0 ) { @ isPrime = 0 ; @ break ; @ } @ } @ if ( isPrime ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ count++ ; @ } @ } @ { @ ( *temptemp2 ) = ( *number1 ) ; @ ( *temptemp3 ) = ( *number2 ) ; @ ( *temptemp4 ) = count ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *num2 ) ) { @ ; @ ( *num1 ) = fabs ( ( *num1 ) ) ; @ ( *num2 ) = fabs ( ( *num2 ) ) ; @ int max = ( *num1 ) > ( *num2 ) ? ( *num1 ) : ( *num2 ) ; @ int min = ( *num1 ) < ( *num2 ) ? ( *num1 ) : ( *num2 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int sum = 0 ; @ int i = 1 ; @ ; @ while ( i < ( *num ) ) { @ if ( ( *num ) % i == 0 ) { @ sum += i ; @ } @ i++ ; @ } @ if ( sum == ( *num ) ) { @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int i = 0 ; @ int product = 1 ; @ int sum = 0 ; @ ; @ while ( i < 10 ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ i++ ; @ } @ i = 0 ; @ while ( i < 10 ) { @ sum += arr [ i ] ; @ product *= arr [ i ] ; @ i++ ; @ } @ { @ ( *temptemp2 ) = sum ; @ ; @ } @ { @ ( *temptemp3 ) = product ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ int counter = 0 ; @ int nthEven = 0 ; @ ; @ while ( counter < ( *n ) ) { @ nthEven += 2 ; @ counter++ ; @ } ; @ { @ ( *temptemp1 ) = nthEven ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *range ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i = 1 ; @ ; @ ; @ do { @ int multiplication = ( *num ) * i ; @ { @ ( *temptemp1 ) = ( *num ) ; @ ( *temptemp2 ) = i ; @ ( *temptemp3 ) = multiplication ; @ ; @ } @ i++ ; @ } while ( i <= ( *range ) ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *amount ) , float ( *rate ) , float ( *time ) , float ( *temptemp1 ) ) { @ float si ; @ ; @ si = ( ( *amount ) * ( *rate ) * ( *time ) ) / 100 ; @ { @ ( *temptemp1 ) = si ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) ) { @ int modulus ; @ int division ; @ int multiplication ; @ int subtraction ; @ int addition ; @ ; @ ; @ addition = ( *a ) + ( *b ) ; @ subtraction = ( *a ) - ( *b ) ; @ multiplication = ( *a ) * ( *b ) ; @ division = ( *a ) / ( *b ) ; @ modulus = ( *a ) % ( *b ) ; @ { @ ( *temptemp1 ) = addition ; @ ( *temptemp2 ) = subtraction ; @ ( *temptemp3 ) = multiplication ; @ ( *temptemp4 ) = division ; @ ( *temptemp5 ) = modulus ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ char str2 [ 100 ] ; @ char str1 [ 100 ] ; @ int index = 0 ; @ ; @ while ( str1 [ index ] != '\0' ) { @ str2 [ index ] = str1 [ index ] ; @ index++ ; @ } @ str2 [ index ] = '\0' ; @ ; @ { @ ( *temptemp1 ) = str1 ; @ ; @ } ; @ { @ ( *temptemp2 ) = str2 ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int addTwoNumbers ( int x , int y ) { return x + y ; } @ int entry_point ( int ( *temptemp1 ) ) { @ int sum = addTwoNumbers ( 10 , 20 ) ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str ) , char ( *temptemp1 ) ) { @ int j ; @ int i ; @ ; @ for ( i = 0 , j = 1 ; str [ j ] != '\0' ; j++ ) { @ if ( str [ j ] != str [ i ] ) { @ i++ ; @ str [ i ] = str [ j ] ; @ } @ } @ str [ i + 1 ] = '\0' ; @ ; @ { @ ( *temptemp1 ) = ( *str ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ result = ( *num ) / 10 ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *basicPay ) , float ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) ) { @ float employerFund ; @ float employeeFund ; @ ; @ employeeFund = ( *basicPay ) * 0.125 ; @ employerFund = ( *basicPay ) * 0.12 ; @ { @ ( *temptemp1 ) = ( *basicPay ) ; @ ; @ } @ { @ ( *temptemp2 ) = employeeFund ; @ ; @ } @ { @ ( *temptemp3 ) = employerFund ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *value ) , float ( *mean ) , float ( *stdDeviation ) , @ float ( *temptemp1 ) ) { @ ; @ ; @ ; @ { @ float zScore = ( ( *value ) - ( *mean ) ) / ( *stdDeviation ) ; @ ; @ { @ ( *temptemp1 ) = zScore ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ char ch [ 50 ] ; @ ; @ while ( ch [ count ] != '\0' ) { @ count++ ; @ } ; @ { @ ( *temptemp1 ) = ch ; @ ; @ } ; @ { @ ( *temptemp2 ) = count ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int sum_of_elements ( int *arr , int n ) { @ int i = 0 , sum = 0 ; @ for ( i = 0 ; i < n ; i++ ) { @ sum = sum + arr [ i ] ; @ } @ return sum ; @ } @ int entry_point ( int ( *temptemp1 ) ) { @ int total = 0 ; @ int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; @ total = sum_of_elements ( array , 9 ) ; @ { @ ( *temptemp1 ) = total ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *height ) , float ( *temptemp1 ) ) { @ float volume ; @ ; @ ; @ volume = 3.14159 * ( *radius ) * ( *radius ) * ( *height ) ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *height ) , @ float ( *temptemp1 ) ) { @ float surfaceArea ; @ float slantHeightW ; @ float slantHeightL ; @ ; @ ; @ ; @ slantHeightL = @ sqrt ( ( ( *length ) / 2 ) * ( ( *length ) / 2 ) + ( *height ) * ( *height ) ) ; @ slantHeightW = sqrt ( ( ( *width ) / 2 ) * ( ( *width ) / 2 ) + ( *height ) * ( *height ) ) ; @ surfaceArea = @ ( *length ) * ( *width ) + ( *length ) * slantHeightL + ( *width ) * slantHeightW ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *string ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i ; @ int others ; @ int digits ; @ int alphabets ; @ alphabets = digits = others = i = 0 ; @ ; @ while ( string [ i ] != '\0' ) { @ if ( ( string [ i ] >= 'a' && string [ i ] <= 'z' ) || @ ( string [ i ] >= 'A' && string [ i ] <= 'Z' ) ) { @ alphabets++ ; @ } else if ( string [ i ] >= '0' && string [ i ] <= '9' ) { @ digits++ ; @ } else { @ others++ ; @ } @ i++ ; @ } @ { @ ( *temptemp1 ) = alphabets ; @ ; @ } @ { @ ( *temptemp2 ) = digits ; @ ; @ } @ { @ ( *temptemp3 ) = others ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int nthOdd ; @ ; @ nthOdd = 1 + ( ( *n ) - 1 ) * 2 ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } ; @ { @ ( *temptemp2 ) = nthOdd ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *temptemp1 ) ) { @ float length = 5.0 ; @ float width = 3.0 ; @ float height = 2.0 ; @ float totalEdgeLength ; @ totalEdgeLength = 4 * ( length + width + height ) ; @ ; @ { @ ( *temptemp1 ) = totalEdgeLength ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *start ) , int ( *end ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , int ( *temptemp4 ) , @ int ( *temptemp5 ) , int ( *temptemp6 ) ) { @ int i ; @ ; @ ; @ ; @ if ( ( *start ) <= ( *end ) ) { @ for ( i = ( *start ) ; i <= ( *end ) ; i++ ) { @ int result = ( *num ) * i ; @ { @ ( *temptemp1 ) = ( *num ) ; @ ( *temptemp2 ) = i ; @ ( *temptemp3 ) = result ; @ ; @ } @ } @ } else { @ for ( i = ( *start ) ; i >= ( *end ) ; i-- ) { @ int result = ( *num ) * i ; @ { @ ( *temptemp4 ) = ( *num ) ; @ ( *temptemp5 ) = i ; @ ( *temptemp6 ) = result ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *array ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int j ; @ int i ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *n ) - 1 ; i++ ) { @ for ( j = 0 ; j < ( *n ) - 1 - i ; j++ ) { @ if ( array [ j ] > array [ j + 1 ] ) { @ int temp = array [ j ] ; @ array [ j ] = array [ j + 1 ] ; @ array [ j + 1 ] = temp ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp2 ) = array [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ int i = 1 ; @ ; @ while ( i * i * i <= ( *limit ) ) { @ count++ ; @ i++ ; @ } ; @ { @ ( *temptemp1 ) = ( *limit ) ; @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *pascals ) , float ( *temptemp1 ) ) { @ float atm ; @ ; @ atm = ( *pascals ) / 101325 ; @ { @ ( *temptemp1 ) = atm ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *gradians ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ ; @ float radians = ( *gradians ) * ( 3.14159 / 200 ) ; @ { @ ( *temptemp1 ) = ( *gradians ) ; @ ( *temptemp2 ) = radians ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *grade ) , float ( *temptemp1 ) ) { @ int totalCount = 0 ; @ int passCount = 0 ; @ float passPercentage ; @ while ( 1 ) { @ ; @ if ( ( *grade ) == -1 ) break ; @ if ( ( *grade ) >= 70 && ( *grade ) <= 100 ) passCount++ ; @ if ( ( *grade ) >= 0 && ( *grade ) <= 100 ) totalCount++ ; @ } @ if ( totalCount > 0 ) { @ passPercentage = ( float ) passCount / totalCount * 100 ; @ } else { @ passPercentage = 0 ; @ } @ { @ ( *temptemp1 ) = passPercentage ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ ; @ result = ( *a ) | ( *b ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) ) { @ int i ; @ int bin [ 32 ] = { 0 } ; @ ; @ for ( i = 0 ; i < 32 ; i++ ) { @ bin [ i ] = ( ( *number ) >> i ) & 1 ; @ } ; @ int startPrinting = 0 ; @ for ( i = 31 ; i >= 0 ; i-- ) { @ if ( bin [ i ] == 1 ) startPrinting = 1 ; @ if ( startPrinting ) { @ ( *temptemp1 ) = bin [ i ] ; @ ; @ } @ } ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ ; @ int i = ( *lower ) ; @ while ( i <= ( *upper ) ) { @ int fact = 1 ; @ int j = 2 ; @ while ( j <= i ) { @ fact *= j ; @ if ( fact < 0 ) { @ fact = -1 ; @ break ; @ } @ j++ ; @ } @ if ( fact > 0 && fact <= ( *upper ) ) { @ { @ ( *temptemp1 ) = i ; @ ( *temptemp2 ) = fact ; @ ; @ } @ } else { @ break ; @ } @ i++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *weight ) , float ( *height ) , float ( *temptemp1 ) ) { @ float bmi ; @ float squareMeterHeight ; @ float meterHeight ; @ ; @ ; @ meterHeight = ( *height ) / 100 ; @ squareMeterHeight = meterHeight * meterHeight ; @ bmi = ( *weight ) / squareMeterHeight ; @ ; @ { @ ( *temptemp1 ) = bmi ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ int dig ; @ ; @ int revNumber = 0 ; @ while ( ( *n ) > 0 ) { @ dig = ( *n ) % 10 ; @ revNumber *= 10 ; @ revNumber += dig ; @ ( *n ) /= 10 ; @ } ; @ { @ ( *temptemp1 ) = revNumber ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void getBinaryV1 ( int n ) { @ int bit ; @ for ( int i = 15 ; i >= 0 ; --i ) { @ bit = ( n >> i ) & 1 ; @ if ( bit == 1 ) @ ; @ else @ ; @ } @ } @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ ; @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ getBinaryV1 ( ( *num ) ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number1 ) , int ( *number2 ) ) { @ ; @ ; @ ; @ ; @ ; @ ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *num2 ) , int ( *temptemp1 ) ) { @ int remainder ; @ int temp2 ; @ int temp1 ; @ ; @ ( *num1 ) = fabs ( ( *num1 ) ) ; @ ( *num2 ) = fabs ( ( *num2 ) ) ; @ temp1 = ( *num1 ) ; @ temp2 = ( *num2 ) ; @ while ( temp2 != 0 ) { @ remainder = temp1 % temp2 ; @ temp1 = temp2 ; @ temp2 = remainder ; @ } @ { @ ( *temptemp1 ) = temp1 ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *decimal ) , int ( *temptemp1 ) ) { @ int octal = 0 ; @ int placeValue = 1 ; @ ; @ do { @ int lastDigit = ( *decimal ) % 8 ; @ octal += lastDigit * placeValue ; @ placeValue *= 10 ; @ ( *decimal ) /= 8 ; @ } while ( ( *decimal ) > 0 ) ; @ ; @ { @ ( *temptemp1 ) = octal ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *arr ) , int ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) ) { @ int i ; @ float stdDeviation ; @ float variance = 0 ; @ float mean ; @ float sum = 0 ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ sum += arr [ i ] ; @ } @ mean = sum / ( *n ) ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ variance += ( arr [ i ] - mean ) * ( arr [ i ] - mean ) ; @ } @ variance /= ( *n ) ; @ stdDeviation = sqrtf ( variance ) ; @ ; @ { @ ( *temptemp2 ) = mean ; @ ; @ } ; @ { @ ( *temptemp3 ) = variance ; @ ; @ } ; @ { @ ( *temptemp4 ) = stdDeviation ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *s ) , float ( *temptemp1 ) ) { @ float area ; @ float pi = 3.141592653589793 ; @ ; @ ; @ area = ( ( *n ) * ( *s ) * ( *s ) ) / ( 4 * tan ( pi / ( *n ) ) ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *grad ) , float ( *temptemp1 ) ) { @ float rad ; @ ; @ rad = ( *grad ) * ( 3.14 / 200.0 ) ; @ ; @ { @ ( *temptemp1 ) = rad ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int num ; @ float n ; @ ; @ ; @ num = ( *lower ) ; @ if ( num <= ( *upper ) ) { @ { @ ( *temptemp1 ) = ( *lower ) ; @ ( *temptemp2 ) = ( *upper ) ; @ ; @ } @ } @ do { @ n = ( -1 + sqrtf ( 1 + 8 * num ) ) / 2 ; @ if ( floorf ( n ) == n ) { @ { @ ( *temptemp3 ) = num ; @ ; @ } @ } @ num++ ; @ } while ( num <= ( *upper ) ) ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *principal ) , float ( *rate ) , float ( *year ) , @ float ( *temptemp1 ) ) { @ float ci ; @ float amount ; @ ; @ ; @ ; @ amount = ( *principal ) * pow ( ( 1 + ( *rate ) / 100 ) , ( *year ) ) ; @ ci = amount - ( *principal ) ; @ { @ ( *temptemp1 ) = ci ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *num2 ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) , @ float ( *temptemp6 ) ) { @ int sum ; @ float average ; @ ; @ ; @ sum = 0 ; @ sum += ( *num1 ) ; @ sum += ( *num2 ) ; @ average = sum / 2.0f ; @ { @ ( *temptemp1 ) = ( *num1 ) ; @ ( *temptemp2 ) = ( *num2 ) ; @ ( *temptemp3 ) = sum ; @ ; @ } @ { @ ( *temptemp4 ) = ( *num1 ) ; @ ( *temptemp5 ) = ( *num2 ) ; @ ( *temptemp6 ) = average ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int cnt ; @ int tNum ; @ ; @ cnt = 0 ; @ tNum = ( *num ) ; @ while ( tNum > 0 ) { @ cnt++ ; @ tNum /= 10 ; @ } @ { @ ( *temptemp1 ) = cnt ; @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void entry_point ( ) { @ int n = 3 ; @ ; @ ; @ ; @ ; @ ; @ ; @ ; @ ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float circumference ; @ ; @ circumference = 6.28318 * ( *radius ) ; @ ; @ { @ ( *temptemp1 ) = circumference ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp2 ) = i + 1 ; @ ; @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ if ( arr [ i ] < 0 ) { @ { @ ( *temptemp3 ) = arr [ i ] ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *meters ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float conversionFactor ; @ float feet ; @ ; @ conversionFactor = 3.28084f ; @ feet = ( *meters ) * conversionFactor ; @ { @ ( *temptemp1 ) = ( *meters ) ; @ ( *temptemp2 ) = feet ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ if ( ( *num ) % 2 == 0 ) { @ result = ( *num ) + 2 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ result = ( *num ) + 1 ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *r ) , float ( *h ) , float ( *temptemp1 ) ) { @ float area ; @ float v ; @ ; @ area = 3.14159 * ( *r ) * ( *r ) ; @ v = area * ( *h ) / 3 ; @ ; @ { @ ( *temptemp1 ) = v ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *year ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int result ; @ ; @ if ( ( *year ) % 400 == 0 ) { @ result = 1 ; @ { @ ( *temptemp1 ) = ( *year ) ; @ ; @ } @ } else if ( ( *year ) % 100 == 0 ) { @ result = 2 ; @ { @ ( *temptemp2 ) = ( *year ) ; @ ; @ } @ } else if ( ( *year ) % 4 == 0 ) { @ result = 3 ; @ { @ ( *temptemp3 ) = ( *year ) ; @ ; @ } @ } else { @ result = 4 ; @ { @ ( *temptemp4 ) = ( *year ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ for ( j = i + 1 ; j < ( *n ) ; j++ ) { @ if ( arr [ i ] == arr [ j ] ) { @ count++ ; @ break ; @ } @ } @ } @ { @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , float ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) ) { @ float root2 ; @ float root1 ; @ float discriminant ; @ ; @ discriminant = ( *b ) * ( *b ) - 4 * ( *a ) * ( *c ) ; @ if ( discriminant >= 0 ) { @ root1 = ( - ( *b ) + sqrt ( discriminant ) ) / ( 2 * ( *a ) ) ; @ root2 = ( - ( *b ) - sqrt ( discriminant ) ) / ( 2 * ( *a ) ) ; @ if ( discriminant > 0 ) { @ { @ ( *temptemp1 ) = root1 ; @ ( *temptemp2 ) = root2 ; @ ; @ } @ } else { @ { @ ( *temptemp3 ) = root1 ; @ ; @ } @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *sideLength ) , float ( *temptemp1 ) ) { @ ; @ ; @ { @ ( *temptemp1 ) = ( *sideLength ) * ( *sideLength ) * ( *sideLength ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <string.h> @ @ void check ( char [ ] , int ) ; @ int entry_point ( char ( *word ) ) { @ ; @ check ( ( *word ) , 0 ) ; @ return 0 ; @ } @ void check ( char word [ ] , int index ) { @ int len = strlen ( word ) - ( index + 1 ) ; @ if ( word [ index ] == word [ len ] ) { @ if ( index + 1 == len || index == len ) { @ ; @ return ; @ } @ check ( word , index + 1 ) ; @ } else { @ ; @ } @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int originalArray [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; @ int copyArray [ 10 ] ; @ int i ; @ ; @ for ( i = 0 ; i < 10 ; i++ ) { @ copyArray [ i ] = originalArray [ i ] ; @ { @ ( *temptemp1 ) = originalArray [ i ] ; @ ( *temptemp2 ) = copyArray [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) ) { @ int greatest ; @ ; @ ; @ ; @ greatest = ( *a ) ; @ if ( ( *b ) > greatest ) { @ greatest = ( *b ) ; @ } @ if ( ( *c ) > greatest ) { @ greatest = ( *c ) ; @ } @ { @ ( *temptemp1 ) = greatest ; @ ; @ } @ return 0 ; @ }
#include <stdbool.h> @ #include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int limit ; @ int i ; @ int num ; @ bool isPrime ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *lower ) ; @ ( *temptemp2 ) = ( *upper ) ; @ ; @ } @ for ( num = ( *lower ) ; num <= ( *upper ) ; num++ ) { @ if ( num <= 1 ) continue ; @ isPrime = true ; @ limit = num / 2 ; @ for ( i = 2 ; i <= limit ; i++ ) { @ if ( num % i == 0 ) { @ isPrime = false ; @ break ; @ } @ } @ if ( isPrime ) { @ { @ ( *temptemp3 ) = num ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int n ; @ int num ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *lower ) ; @ ( *temptemp2 ) = ( *upper ) ; @ ; @ } @ for ( num = ( *lower ) ; num <= ( *upper ) ; num++ ) { @ n = ( -1 + sqrt ( 1 + 8 * num ) / 2 ) ; @ if ( n == n ) { @ { @ ( *temptemp3 ) = num ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i ; @ int mul ; @ ; @ ; @ mul = 0 ; @ for ( i = 1 ; i <= ( *b ) ; i++ ) { @ mul += ( *a ) ; @ } @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = mul ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float area ; @ ; @ area = 3.14 * ( *radius ) * ( *radius ) ; @ ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } ; @ { @ ( *temptemp2 ) = ( *radius ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ unsigned long factorial ( int num ) { @ int i ; @ unsigned long fact = 1 ; @ for ( i = num ; i >= 1 ; i-- ) fact = fact * i ; @ return fact ; @ } @ int entry_point ( int ( *N ) , float ( *temptemp1 ) ) { @ int i ; @ float sum ; @ ; @ sum = 0.0f ; @ for ( i = 1 ; i <= ( *N ) ; i++ ) sum = sum + ( ( float ) ( i ) / ( float ) ( factorial ( i ) ) ) ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *seconds ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int remainder ; @ int minutes ; @ int hours ; @ ; @ hours = ( *seconds ) / 3600 ; @ remainder = ( *seconds ) % 3600 ; @ minutes = remainder / 60 ; @ ( *seconds ) = remainder % 60 ; @ { @ ( *temptemp1 ) = hours ; @ ( *temptemp2 ) = minutes ; @ ( *temptemp3 ) = ( *seconds ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mm ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float inches ; @ ; @ inches = ( *mm ) ; @ inches /= 25.4 ; @ { @ ( *temptemp1 ) = ( *mm ) ; @ ( *temptemp2 ) = inches ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int sum = 0 ; @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp2 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ sum = sum + arr [ i ] ; @ } @ { @ ( *temptemp3 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *target ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int primeFlag ; @ int divisor ; @ int latestPrime = 2 ; @ int currentNumber = 2 ; @ int primeCount = 0 ; @ ; @ while ( primeCount < ( *target ) ) { @ primeFlag = 1 ; @ for ( divisor = 2 ; divisor <= currentNumber / 2 ; divisor++ ) { @ if ( currentNumber % divisor == 0 ) { @ primeFlag = 0 ; @ break ; @ } @ } @ if ( primeFlag ) { @ latestPrime = currentNumber ; @ primeCount++ ; @ } @ currentNumber++ ; @ } @ { @ ( *temptemp1 ) = ( *target ) ; @ ( *temptemp2 ) = latestPrime ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int prime = 1 ; @ int i ; @ int limit ; @ ; @ if ( ( *n ) <= 1 ) prime = 0 ; @ limit = ( *n ) / 2 ; @ for ( i = 2 ; i <= limit ; i++ ) { @ if ( ( *n ) % i == 0 ) { @ prime = 0 ; @ break ; @ } @ } @ if ( prime ) { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *n ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *millimeters ) , float ( *temptemp1 ) ) { @ float centimeters ; @ ; @ centimeters = ( *millimeters ) / 10.0 ; @ { @ ( *temptemp1 ) = centimeters ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int temp ; @ int b = 20 ; @ int a = 10 ; @ { @ ( *temptemp1 ) = a ; @ ( *temptemp2 ) = b ; @ ; @ } @ temp = a ; @ a = b ; @ b = temp ; @ { @ ( *temptemp3 ) = a ; @ ( *temptemp4 ) = b ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *h ) , float ( *temptemp1 ) ) { @ float volume ; @ float sqrt3Over4 = sqrt ( 3 ) / 4.0f ; @ float oneThird = 1.0f / 3.0f ; @ ; @ ; @ volume = sqrt3Over4 * ( *a ) * ( *a ) * ( *h ) * oneThird ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mm ) , float ( *temptemp1 ) ) { @ float inches ; @ float toInches = 25.4 ; @ ; @ inches = ( *mm ) / toInches ; @ ; @ { @ ( *temptemp1 ) = inches ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int temp ; @ ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ temp = ( *a ) ; @ ( *a ) = ( *b ) ; @ ( *b ) = temp ; @ ; @ { @ ( *temptemp3 ) = ( *a ) ; @ ( *temptemp4 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void value ( int x , int y ) ; @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int b = 8 ; @ int a = 5 ; @ { @ ( *temptemp1 ) = a ; @ ( *temptemp2 ) = b ; @ ; @ } @ value ( a , b ) ; @ { @ ( *temptemp3 ) = a ; @ ( *temptemp4 ) = b ; @ ; @ } @ return 0 ; @ } @ void value ( int x , int y ) { @ x++ ; @ y++ ; @ ; @ }
#include <stdio.h> @ #include <string.h> @ @ int entry_point ( char ( *username ) , char ( *password ) ) { @ ; @ ; @ if ( strcmp ( ( *username ) , "admin" ) == 0 ) { @ if ( strcmp ( ( *password ) , "karunya" ) == 0 ) { @ ; @ } else { @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *breadth ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ ; @ ; @ area = ( *length ) * ( *breadth ) ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void readArray ( int a [ ] , int size ) { @ int i ; @ for ( i = 0 ; i < size ; i++ ) { @ ; @ } @ } @ void printArray ( int a [ ] , int size ) { @ int i ; @ for ( i = 0 ; i < size ; i++ ) @ ; @ } @ void addArray ( int a [ ] , int b [ ] , int c [ ] , int size ) { @ int i ; @ for ( i = 0 ; i < size ; i++ ) c [ i ] = a [ i ] + b [ i ] ; @ } @ void subArray ( int a [ ] , int b [ ] , int c [ ] , int size ) { @ int i ; @ for ( i = 0 ; i < size ; i++ ) c [ i ] = a [ i ] - b [ i ] ; @ } @ int entry_point ( int ( *n ) ) { @ int A [ 20 ] , B [ 20 ] , ADD [ 20 ] , SUB [ 20 ] ; @ int i ; @ ; @ ; @ readArray ( A , ( *n ) ) ; @ ; @ readArray ( B , ( *n ) ) ; @ addArray ( A , B , ADD , ( *n ) ) ; @ subArray ( A , B , SUB , ( *n ) ) ; @ ; @ printArray ( ADD , ( *n ) ) ; @ ; @ printArray ( SUB , ( *n ) ) ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *year ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int condition = ! ( ( *year ) % 4 ) && ( ( *year ) % 100 || ! ( ( *year ) % 400 ) ) ; @ switch ( condition ) { @ case 0: { @ ( *temptemp1 ) = ( *year ) ; @ ; @ } break ; @ default: { @ ( *temptemp2 ) = ( *year ) ; @ ; @ } break ; @ } ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *sideLength ) , float ( *height ) , float ( *temptemp1 ) ) { @ float volume ; @ float baseArea ; @ float pi = 3.14159 ; @ ; @ ; @ baseArea = ( 5 * ( *sideLength ) * ( *sideLength ) ) / ( 4 * tan ( pi / 5 ) ) ; @ volume = ( baseArea * ( *height ) ) / 3 ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ if ( ( *num ) > 0 ) { @ result = 1 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else if ( ( *num ) ) { @ result = -1 ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } else { @ result = 0 ; @ { ; } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ perimeter = ( *side ) + ( *side ) + ( *side ) + ( *side ) ; @ ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ char multiple [ ] = "CodezClub" ; @ char *p = &multiple [ 0 ] ; @ { @ ( *temptemp1 ) = p ; @ ; @ } @ p = multiple ; @ { @ ( *temptemp2 ) = p ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ if ( ( *c ) + ( *d ) == 0 ) { @ ; @ return -1 ; @ } @ result = ( ( *a ) * ( *b ) ) / ( ( *c ) + ( *d ) ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *lines ) , long int ( *temptemp1 ) ) { @ int j ; @ int i ; @ ; @ for ( i = 0 ; i < ( *lines ) ; i++ ) { @ ; @ long value = 1 ; @ for ( j = 0 ; j <= i ; j++ ) { @ { @ ( *temptemp1 ) = value ; @ ; @ } @ value = value * ( i - j ) / ( j + 1 ) ; @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *e ) , @ float ( *temptemp1 ) ) { @ float average ; @ ; @ average = ( ( *a ) + ( *b ) + ( *c ) + ( *d ) + ( *e ) ) / 5 ; @ { @ ( *temptemp1 ) = average ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int values [ 10 ] ; @ int max = 0 ; @ int count = 0 ; @ ; @ do { @ { @ ( *temptemp1 ) = count + 1 ; @ ; @ } @ if ( count == 0 || ( *number ) > max ) { @ max = ( *number ) ; @ } @ count++ ; @ } while ( count < 10 ) ; @ { @ ( *temptemp2 ) = max ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *array ) , int ( *search ) , int ( *temptemp1 ) ) { @ int i ; @ ; @ @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ if ( ( *search ) == array [ i ] ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ void printPattern ( int n , int patternType ) { @ for ( int row = 1 ; row <= n ; row++ ) { @ int start = ( patternType == 1 || patternType == 2 ) ? 1 : row ; @ int end = ( patternType == 1 ) ? row : ( patternType == 2 ) ? n - row + 1 : 1 ; @ int increment = ( patternType == 3 ) ? -1 : 1 ; @ for ( int num = start ; patternType != 3 ? num <= end : num >= end ; @ num += increment ) { @ ; @ } ; @ if ( patternType == 2 || patternType == 3 ) n-- ; @ } @ } @ int entry_point ( int ( *n ) ) { @ ; @ ; @ printPattern ( ( *n ) , 1 ) ; @ ; @ printPattern ( ( *n ) , 2 ) ; @ ; @ printPattern ( ( *n ) , 3 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) ) { @ int result ; @ ; @ result = ( *a ) + ( *b ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ result = ( *a ) - ( *b ) ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ result = ( *a ) * ( *b ) ; @ { @ ( *temptemp3 ) = result ; @ ; @ } @ if ( ( *b ) != 0 ) { @ result = ( *a ) / ( *b ) ; @ { @ ( *temptemp4 ) = result ; @ ; @ } @ result = ( *a ) % ( *b ) ; @ { @ ( *temptemp5 ) = result ; @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *lim_up ) , int ( *temptemp1 ) ) { @ int i = 0 ; @ int C ; @ int B = 1 ; @ int A = 0 ; @ ; @ ; @ while ( B <= ( *lim_up ) ) { @ if ( i <= 1 ) { @ C = i ; @ } else { @ C = A + B ; @ A = B ; @ B = C ; @ } @ { @ ( *temptemp1 ) = A ; @ ; @ } @ i++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int cnt = 0 ; @ ; @ for ( ; ( *num ) > 0 ; ( *num ) /= 10 ) { @ cnt++ ; @ } ; @ { @ ( *temptemp1 ) = cnt ; @ ; @ } ; @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int n ; @ int tempNumber ; @ int rem = 0 ; @ int sum = 0 ; @ ; @ for ( tempNumber = ( *number ) ; tempNumber != 0 ; tempNumber /= 10 ) { @ rem = tempNumber % 10 ; @ sum += rem * rem * rem ; @ } @ if ( sum == ( *number ) ) { @ ( *temptemp1 ) = ( *number ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *number ) ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ area = 2 * ( 1 + sqrt ( 2 ) ) * ( *side ) * ( *side ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ result = ( *a ) << 3 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) ) { @ int isDivisible ; @ int result ; @ ; @ isDivisible = ( ( *number ) % 3 == 0 ) ; @ if ( isDivisible ) { @ result = ( *number ) + 1 ; @ } else { @ result = ( *number ) + 2 ; @ } @ { @ ( *temptemp1 ) = result ; @ ; @ } @ if ( isDivisible ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *speed_kmph ) , float ( *temptemp1 ) ) { @ float speed_mph ; @ ; @ speed_mph = ( *speed_kmph ) * 0.6213712 ; @ { @ ( *temptemp1 ) = speed_mph ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *first ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int second [ 100 ] ; @ int i ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ second [ i ] = first [ i ] ; @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = first [ i ] ; @ ; @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp3 ) = second [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str ) , char ( *temptemp1 ) ) { @ int k = 0 ; @ int i ; @ ; @ for ( i = 1 ; str [ i ] != '\0' ; i++ ) { @ if ( str [ k ] != str [ i ] ) { @ k++ ; @ str [ k ] = str [ i ] ; @ } @ } @ str [ k + 1 ] = '\0' ; @ ; @ { @ ( *temptemp1 ) = ( *str ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *d ) , int ( *temptemp1 ) ) { @ int orResult ; @ ; @ orResult = ( *d ) | 2 ; @ { @ ( *temptemp1 ) = orResult ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *y ) , int ( *temptemp1 ) ) { @ int difference ; @ ; @ difference = ( *y ) - 3 ; @ ; @ { @ ( *temptemp1 ) = difference ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *inches ) , char ( *choice ) , float ( *temptemp1 ) ) { @ float feet ; @ do { @ ; @ feet = ( *inches ) / 12.0 ; @ ; @ { @ ( *temptemp1 ) = feet ; @ ; @ } ; @ } while ( ( *choice ) == 'y' || ( *choice ) == 'Y' ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *pascals ) , float ( *temptemp1 ) ) { @ float conversionFactor ; @ float atm ; @ conversionFactor = 101325 ; @ ; @ atm = ( *pascals ) / conversionFactor ; @ ; @ { @ ( *temptemp1 ) = atm ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int counter = 5 ; @ void incrementCounter ( ) ; @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int localCounter = 10 ; @ int anotherCounter = 15 ; @ { @ ( *temptemp1 ) = localCounter ; @ ( *temptemp2 ) = anotherCounter ; @ ; @ } @ incrementCounter ( ) ; @ { @ ( *temptemp3 ) = counter ; @ ; @ } @ { @ ( *temptemp4 ) = anotherCounter ; @ ; @ } @ return 0 ; @ } @ void incrementCounter ( ) { @ counter += 5 ; @ int tempCounter = 20 ; @ ; @ ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int nthTriangular ; @ ; @ if ( ( *n ) <= 0 ) { @ ; @ return 1 ; @ } @ nthTriangular = ( *n ) * ( ( *n ) + 1 ) / 2 ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = nthTriangular ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *rows ) , char ( *temptemp1 ) ) { @ int k ; @ int j ; @ int i ; @ ; @ for ( i = 1 ; i <= ( *rows ) ; i++ ) { @ char line [ 200 ] = { 0 } ; @ k = 0 ; @ for ( j = 1 ; j <= ( *rows ) - i ; j++ , k++ ) { @ line [ k ] = ' ' ; @ } @ for ( j = 1 ; j <= i ; j++ , k += 2 ) { @ line [ k ] = '*' ; @ if ( j < i ) { @ line [ k + 1 ] = ' ' ; @ } @ } @ { @ ( *temptemp1 ) = line ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int array [ 100 ] ; @ int k ; @ int j ; @ int i ; @ int swap ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = 0 ; i < ( *n ) - 1 ; i++ ) { @ for ( j = 0 ; j < ( *n ) - i - 1 ; j++ ) { @ if ( array [ j ] > array [ j + 1 ] ) { @ swap = array [ j ] ; @ array [ j ] = array [ j + 1 ] ; @ array [ j + 1 ] = swap ; @ } @ } @ } ; @ for ( k = 0 ; k < ( *n ) ; k++ ) { @ ( *temptemp2 ) = array [ k ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int countBit ( int ) ; @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ ; @ { @ ( *temptemp1 ) = countBit ( ( *num ) ) ; @ ; @ } @ return 0 ; @ } @ int countBit ( int n ) { @ int count = 0 , i ; @ if ( n == 0 ) return 0 ; @ for ( i = 0 ; i < 32 ; i++ ) { @ if ( ( 1 << i ) & n ) count = i ; @ } @ return ++count ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int j = 1 ; @ int i = 0 ; @ int low ; @ ; @ for ( i = 0 ; i < 10 ; i++ , j++ ) { @ { @ ( *temptemp1 ) = j ; @ ; @ } @ } @ low = num [ 0 ] ; @ i = 0 , j = 1 ; @ for ( ; i < 9 ; i++ ) { @ if ( low > num [ i + 1 ] ) { @ low = num [ i + 1 ] ; @ } @ } @ { @ ( *temptemp2 ) = low ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *year ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int leap = @ ( ( *year ) % 4 == 0 ) && ( ( ( *year ) % 100 != 0 ) || ( ( *year ) % 400 == 0 ) ) ; @ switch ( leap ) { @ case 0: { @ ( *temptemp1 ) = ( *year ) ; @ ; @ } break ; @ case 1: { @ ( *temptemp2 ) = ( *year ) ; @ ; @ } break ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *kmph ) , float ( *temptemp1 ) ) { @ float mph ; @ ; @ mph = ( *kmph ) / 1.609 ; @ { @ ( *temptemp1 ) = mph ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float piValue ; @ float circum ; @ float area ; @ piValue = 3.142 ; @ ; @ area = piValue * ( *radius ) * ( *radius ) ; @ circum = 2 * piValue * ( *radius ) ; @ float finalArea = area ; @ float finalCircum = circum ; @ ; @ { @ ( *temptemp1 ) = finalArea ; @ ; @ } ; @ { @ ( *temptemp2 ) = finalCircum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void simpleFun ( int rollno , char *name , float marks ) { @ ; @ ; @ ; @ } @ int entry_point ( ) { @ int Roll = 100 ; @ float marks = 50.5 ; @ char name [ 20 ] = "Ram srivastav" ; @ simpleFun ( Roll , name , marks ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *meters ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float yards ; @ ; @ yards = ( *meters ) * 1.09 ; @ { @ ( *temptemp1 ) = ( *meters ) ; @ ( *temptemp2 ) = yards ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ char str2 [ 20 ] ; @ char str1 [ 20 ] ; @ int length2 = 0 ; @ int length1 = 0 ; @ int i ; @ ; @ ; @ for ( i = 0 ; str1 [ i ] != '\0' ; i++ ) length1++ ; @ for ( i = 0 ; str2 [ i ] != '\0' ; i++ ) length2++ ; @ if ( length1 != length2 ) { @ ; @ return 0 ; @ } @ for ( i = 0 ; i < length1 ; i++ ) { @ if ( str1 [ i ] != str2 [ i ] ) { @ ; @ return 0 ; @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *gradians ) , float ( *temptemp1 ) ) { @ float conversionFactor ; @ float degrees ; @ conversionFactor = 180.0 / 200.0 ; @ ; @ degrees = ( *gradians ) * conversionFactor ; @ ; @ { @ ( *temptemp1 ) = degrees ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *distanceInKilometers ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ float distanceInMiles ; @ ; @ ; @ distanceInMiles = ( *distanceInKilometers ) * 0.621371 ; @ { @ ( *temptemp1 ) = ( *distanceInKilometers ) ; @ ( *temptemp2 ) = distanceInMiles ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int i ; @ int smallest ; @ int largest ; @ ; @ for ( i = 0 ; i < 10 ; i++ ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ } @ largest = smallest = arr [ 0 ] ; @ for ( i = 1 ; i < 10 ; i++ ) { @ largest = ( arr [ i ] > largest ) ? arr [ i ] : largest ; @ smallest = ( arr [ i ] < smallest ) ? arr [ i ] : smallest ; @ } @ { @ ( *temptemp2 ) = largest ; @ ; @ } @ { @ ( *temptemp3 ) = smallest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ ; @ perimeter = 2 * ( ( *length ) + ( *width ) ) ; @ ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) ) { @ int count = 0 ; @ int square = 1 ; @ int i ; @ ; @ for ( i = 1 ; square <= ( *limit ) ; i++ ) { @ square = i * i ; @ if ( square <= ( *limit ) ) { @ count = count + 1 ; @ } else { @ break ; @ } @ } @ { @ ( *temptemp1 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *base ) , float ( *height ) , float ( *temptemp1 ) ) { @ ; @ ; @ { @ ( *temptemp1 ) = 0.5 * ( *base ) * ( *height ) ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *principal ) , float ( *rate ) , float ( *time ) , @ float ( *temptemp1 ) ) { @ float ci ; @ ; @ ; @ ; @ float amount = ( *principal ) * pow ( ( 1 + ( *rate ) / 100 ) , ( *time ) ) ; @ ci = amount - ( *principal ) ; @ { @ ( *temptemp1 ) = ci ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int sum ; @ int j ; @ int i ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *lower ) ; @ ( *temptemp2 ) = ( *upper ) ; @ ; @ } @ for ( i = ( *lower ) ; i <= ( *upper ) ; i++ ) { @ sum = 0 ; @ for ( j = 1 ; j <= i / 2 ; j++ ) { @ if ( i % j == 0 ) { @ sum += j ; @ } @ } @ if ( sum == i && i != 0 ) { @ { @ ( *temptemp3 ) = i ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ void attemptSwap ( int x , int y ) ; @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int b = 8 ; @ int a = 5 ; @ { @ ( *temptemp1 ) = a ; @ ( *temptemp2 ) = b ; @ ; @ } @ attemptSwap ( a , b ) ; @ { @ ( *temptemp3 ) = a ; @ ( *temptemp4 ) = b ; @ ; @ } @ return 0 ; @ } @ void attemptSwap ( int x , int y ) { @ int temp = x ; @ x = y ; @ y = temp ; @ ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *h ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ ; @ ; @ area = ( ( *a ) + ( *b ) ) * ( *h ) / 2 ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int result = ( ( *num ) ^ 1 ) & 1 ; @ if ( result == 0 ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *first ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int second [ 100 ] ; @ int i ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ i = 0 ; @ while ( i < ( *size ) ) { @ second [ i ] = first [ i ] ; @ i++ ; @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = first [ i ] ; @ ; @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp3 ) = second [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ ( *a ) = ( *a ) ^ ( *b ) ; @ ( *b ) = ( *a ) ^ ( *b ) ; @ ( *a ) = ( *a ) ^ ( *b ) ; @ { @ ( *temptemp3 ) = ( *a ) ; @ ( *temptemp4 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *diag1 ) , float ( *diag2 ) , float ( *temptemp1 ) ) { @ float area ; @ float product ; @ ; @ ; @ product = ( *diag1 ) * ( *diag2 ) ; @ area = product / 2 ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *cm ) , float ( *temptemp1 ) ) { @ float m ; @ ; @ m = ( *cm ) / 100 ; @ { @ ( *temptemp1 ) = m ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mm ) , float ( *temptemp1 ) ) { @ float inches ; @ ; @ inches = ( *mm ) / 25.4 ; @ ; @ { @ ( *temptemp1 ) = inches ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) ) { @ ; @ ; @ ; @ if ( ( *a ) > ( *b ) && ( *a ) > ( *c ) ) { @ ; @ } else if ( ( *b ) > ( *a ) && ( *b ) > ( *c ) ) { @ ; @ } else if ( ( *c ) > ( *a ) && ( *c ) > ( *b ) ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *x ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float d ; @ float s ; @ float e_neg ; @ float e_pos ; @ ; @ e_pos = expf ( ( *x ) ) ; @ e_neg = expf ( - ( *x ) ) ; @ s = e_pos + e_neg ; @ d = e_pos - e_neg ; @ { @ ( *temptemp1 ) = s ; @ ; @ } @ { @ ( *temptemp2 ) = d ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ long find_ncr ( int n , int r ) { @ long result = 1 ; @ int i ; @ for ( i = 1 ; i <= r ; ++i ) { @ result *= n - r + i ; @ result /= i ; @ } @ return result ; @ } @ long find_npr ( int n , int r ) { @ long result = 1 ; @ int i ; @ for ( i = 0 ; i < r ; ++i ) { @ result *= n - i ; @ } @ return result ; @ } @ int entry_point ( int ( *n ) , int ( *r ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ long int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) , @ long int ( *temptemp6 ) ) { @ long ncr , npr ; @ ; @ ; @ ncr = find_ncr ( ( *n ) , ( *r ) ) ; @ npr = find_npr ( ( *n ) , ( *r ) ) ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = ( *r ) ; @ ( *temptemp3 ) = ncr ; @ ; @ } @ { @ ( *temptemp4 ) = ( *n ) ; @ ( *temptemp5 ) = ( *r ) ; @ ( *temptemp6 ) = npr ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ if ( ( *n ) > 0 ) { @ result = ( 3 * ( *n ) * ( *n ) - ( *n ) ) / 2 ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } else { @ ; @ return 1 ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int isDivisible = 0 ; @ ; @ if ( ( *num ) % 7 == 0 ) { @ isDivisible = 1 ; @ } @ if ( ( *num ) % 3 == 0 ) { @ isDivisible = 1 ; @ } @ if ( isDivisible ) { @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ if ( ( *number ) % 3 == 0 ) { @ result = ( *number ) + 1 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ result = ( *number ) + 2 ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) ) { @ int maxCols ; @ ; @ if ( ( *maxRows ) < 1 ) { @ ; @ exit ( 0 ) ; @ } @ maxCols = ( *maxRows ) + 1 ; @ puts ( "\n--------------------------------------------\n" ) ; @ int vary = 1 ; @ int row = 1 ; @ { @ int col = 1 ; @ { @ if ( col == 1 || col == vary || col == maxCols + 1 - vary || @ col == maxCols ) @ ; @ else @ ; @ } @ row < maxCols / 2 ? vary++ : vary-- ; @ if ( ( *maxRows ) % 2 == 0 && row == maxCols / 2 ) vary++ ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ void Strfun ( ) { @ char buff [ 20 ] = "Hello Function" ; @ int i = 0 ; @ ; @ while ( buff [ i ] != '\0' ) { @ ; @ i++ ; @ } @ } @ int entry_point ( ) { @ Strfun ( ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *m1 ) , float ( *m2 ) , float ( *m3 ) , float ( *m4 ) , float ( *m5 ) ) { @ ; @ int isPass = @ ( *m1 ) > 32 && ( *m2 ) > 32 && ( *m3 ) > 32 && ( *m4 ) > 32 && ( *m5 ) > 32 ; @ if ( isPass ) @ ; @ else @ ; @ ; @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int sum = 0 ; @ ; @ if ( ( *n ) < 0 ) { @ ; @ exit ( 0 ) ; @ } @ int i = 1 ; @ sum += i ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = sum ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *arr1 ) , int ( *arr2 ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int arr3 [ 10 ] ; @ int i ; @ ; @ for ( i = 0 ; i < 5 ; ++i ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } ; @ for ( i = 0 ; i < 5 ; ++i ) { @ { @ ( *temptemp2 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < 5 ; ++i ) { @ arr3 [ i ] = arr1 [ i ] ; @ arr3 [ i + 5 ] = arr2 [ i ] ; @ } ; @ for ( i = 0 ; i < 10 ; ++i ) { @ { @ ( *temptemp3 ) = i ; @ ( *temptemp4 ) = arr3 [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radians ) , float ( *temptemp1 ) ) { @ float degrees ; @ ; @ degrees = ( *radians ) * ( 180.0 / 3.14 ) ; @ { @ ( *temptemp1 ) = degrees ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radians ) , float ( *temptemp1 ) ) { @ float degrees ; @ float PI = 3.14f ; @ ; @ degrees = ( *radians ) * ( 180.0f / PI ) ; @ ; @ { @ ( *temptemp1 ) = degrees ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ float ( *temptemp3 ) ) { @ float rem ; @ ; @ ; @ rem = ( *a ) ; @ while ( rem >= ( *b ) ) { @ rem = rem - ( *b ) ; @ } @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = rem ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) , @ float ( *temptemp6 ) ) { @ int sum ; @ float avg ; @ ; @ ; @ sum = ( *a ) + ( *b ) ; @ avg = ( float ) ( ( *a ) + ( *b ) ) / 2 ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = sum ; @ ; @ } @ { @ ( *temptemp4 ) = ( *a ) ; @ ( *temptemp5 ) = ( *b ) ; @ ( *temptemp6 ) = avg ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *height ) , float ( *temptemp1 ) ) { @ float totalSurfaceArea ; @ float sideArea ; @ float circleArea ; @ ; @ ; @ circleArea = 3.14159 * ( *radius ) * ( *radius ) ; @ sideArea = 2 * 3.14159 * ( *radius ) * ( *height ) ; @ totalSurfaceArea = 2 * circleArea + sideArea ; @ { @ ( *temptemp1 ) = totalSurfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void PrintPrimeFactors ( int n ) { @ int i = 2 ; @ while ( n != 1 ) { @ while ( n % i == 0 ) { @ ; @ n = n / i ; @ } @ i++ ; @ } @ } @ int entry_point ( int ( *num ) ) { @ ; @ ; @ PrintPrimeFactors ( ( *num ) ) ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *degrees ) , float ( *temptemp1 ) ) { @ float gradians ; @ ; @ gradians = ( *degrees ) * 1.11111111 ; @ { @ ( *temptemp1 ) = gradians ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *num2 ) , int ( *temptemp1 ) ) { @ ; @ ( *num1 ) = fabs ( ( *num1 ) ) ; @ ( *num2 ) = fabs ( ( *num2 ) ) ; @ int max = ( *num1 ) > ( *num2 ) ? ( *num1 ) : ( *num2 ) ; @ int min = ( *num1 ) < ( *num2 ) ? ( *num1 ) : ( *num2 ) ; @ int hcf ; @ int remainder ; @ do { @ remainder = ( *num1 ) % ( *num2 ) ; @ ( *num1 ) = ( *num2 ) ; @ ( *num2 ) = remainder ; @ } while ( remainder ) ; @ hcf = ( *num1 ) ; @ { @ ( *temptemp1 ) = hcf ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ #include <string.h> @ @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) , char ( *temptemp3 ) , @ char ( *temptemp4 ) , int ( *temptemp5 ) ) { @ char buffer [ 10 ] = { 0 } ; @ int i ; @ { @ ( *temptemp1 ) = buffer ; @ ; @ } @ memset ( buffer , ' ' , 9 ) ; @ { @ ( *temptemp2 ) = buffer ; @ ; @ } @ memset ( buffer , 'x' , 9 ) ; @ { @ ( *temptemp3 ) = buffer ; @ ; @ } @ memset ( buffer , 15 , 9 ) ; @ { @ ( *temptemp4 ) = buffer ; @ ; @ } ; @ for ( i = 0 ; i < 10 ; i++ ) { @ { @ ( *temptemp5 ) = buffer [ i ] ; @ ; @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *inches ) , float ( *temptemp1 ) ) { @ float feet ; @ ; @ feet = ( *inches ) / 12.0 ; @ { @ ( *temptemp1 ) = feet ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ ; @ area = ( *length ) * ( *width ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *sides ) , float ( *sideLength ) , float ( *temptemp1 ) ) { @ float piOverN ; @ float area ; @ ; @ ; @ piOverN = M_PI / ( *sides ) ; @ area = ( ( *sides ) * ( *sideLength ) * ( *sideLength ) ) / ( 4 * tan ( piOverN ) ) ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int tally ; @ int flag = 0 ; @ ; @ for ( tally = 2 ; tally < ( ( *number ) / 2 ) ; tally++ ) { @ if ( ( *number ) % tally == 0 ) { @ flag = 1 ; @ break ; @ } @ } @ if ( flag == 0 ) { @ ( *temptemp1 ) = ( *number ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *number ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int j ; @ int i ; @ int count = 0 ; @ int isComposite ; @ ; @ if ( ( *n ) > 2 ) count = ( ( *n ) - 2 ) / 2 ; @ for ( i = 3 ; i <= ( *n ) ; i += 2 ) { @ isComposite = 0 ; @ for ( j = 3 ; j * j <= i ; j += 2 ) { @ if ( i % j == 0 ) { @ isComposite = 1 ; @ break ; @ } @ } @ if ( isComposite ) { @ count++ ; @ } else if ( i == 2 ) { @ } @ } @ count += ( ( *n ) >= 2 ) ? 1 : 0 ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *s ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ ; @ perimeter = ( *n ) * ( *s ) ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ if ( ( *b ) != 0 ) { @ ( *a ) = ( *a ) * ( *b ) ; @ ( *b ) = ( *a ) / ( *b ) ; @ ( *a ) = ( *a ) / ( *b ) ; @ } @ { @ ( *temptemp3 ) = ( *a ) ; @ ( *temptemp4 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) ) { @ int maxCols ; @ ; @ if ( ( *maxRows ) < 1 ) { @ ; @ exit ( 0 ) ; @ } @ maxCols = ( *maxRows ) * 2 - 1 ; @ puts ( "\n--------------------------------------------\n" ) ; @ int spacesInCurrentRow ; @ int colsInCurrentRow ; @ int row = 1 ; @ { @ spacesInCurrentRow = ( ( *maxRows ) - row ) * 2 ; @ colsInCurrentRow = maxCols - spacesInCurrentRow ; @ int space = 1 ; @ ; @ int col = 1 ; @ ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int temp ; @ ; @ temp = ( ( *num ) / 2 ) * 2 ; @ if ( temp == ( *num ) ) { @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ void multiply ( int x , int y ) { @ x *= 2 ; @ y *= 3 ; @ ; @ } @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int b = 5 ; @ int a = 4 ; @ { @ ( *temptemp1 ) = a ; @ ( *temptemp2 ) = b ; @ ; @ } @ multiply ( a , b ) ; @ { @ ( *temptemp3 ) = a ; @ ( *temptemp4 ) = b ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str ) , char ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i = 0 ; @ ; @ while ( str [ i ] != '\0' ) i++ ; @ { @ ( *temptemp1 ) = ( *str ) ; @ ( *temptemp2 ) = i ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *speedOfVehicle ) , float ( *timeOfTravel ) , @ float ( *temptemp1 ) ) { @ float distanceTravelled ; @ ; @ ; @ distanceTravelled = ( *speedOfVehicle ) * ( *timeOfTravel ) ; @ { @ ( *temptemp1 ) = distanceTravelled ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ float value = 255 ; @ int intValue = ( int ) value ; @ { @ ( *temptemp1 ) = intValue ; @ ; @ } @ { @ ( *temptemp2 ) = intValue ; @ ; @ } @ { @ ( *temptemp3 ) = intValue ; @ ; @ } @ { @ ( *temptemp4 ) = intValue ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void add ( int x , int y ) { @ x += 5 ; @ y += 10 ; @ ; @ } @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int b = 2 ; @ int a = 3 ; @ { @ ( *temptemp1 ) = a ; @ ( *temptemp2 ) = b ; @ ; @ } @ add ( a , b ) ; @ { @ ( *temptemp3 ) = a ; @ ( *temptemp4 ) = b ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ ; @ int flag ; @ int i ; @ int num = ( *n ) + 1 ; @ while ( 1 ) { @ if ( num < 2 ) { @ num++ ; @ continue ; @ } @ flag = 1 ; @ for ( i = 2 ; i <= sqrt ( num ) ; i++ ) { @ if ( num % i == 0 ) { @ flag = 0 ; @ break ; @ } @ } @ if ( flag ) { @ { @ ( *temptemp1 ) = num ; @ ; @ } @ break ; @ } @ num++ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int diff ; @ ; @ ; @ diff = ( ( *a ) > ( *b ) ) ? ( ( *a ) - ( *b ) ) : ( ( *b ) - ( *a ) ) ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ; @ } ; @ { @ ( *temptemp2 ) = ( *b ) ; @ ; @ } ; @ { @ ( *temptemp3 ) = diff ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *lim_up ) , int ( *temptemp1 ) ) { @ int C ; @ int B = 1 ; @ int A = 0 ; @ ; @ ; @ while ( A < ( *lim_up ) ) { @ { @ ( *temptemp1 ) = A ; @ ; @ } @ C = A + B ; @ A = B ; @ B = C ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int j ; @ int i ; @ int count = 1 ; @ for ( i = 0 ; i <= 8 ; i++ ) { @ ; @ for ( j = 0 ; j < i ; j++ ) { @ { @ ( *temptemp1 ) = count ; @ ; @ } @ count++ ; @ } @ } @ return ( 0 ) ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ int j ; @ int i ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ } @ for ( i = 0 ; i < ( *n ) - 1 ; i++ ) { @ for ( j = i + 1 ; j < ( *n ) ; j++ ) { @ if ( arr [ i ] == arr [ j ] ) { @ count++ ; @ break ; @ } @ } @ } @ { @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *degrees ) , float ( *temptemp1 ) ) { @ float gradians ; @ ; @ gradians = ( *degrees ) * ( 200.0 / 180.0 ) ; @ { @ ( *temptemp1 ) = gradians ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *b ) , float ( *s ) , float ( *temptemp1 ) ) { @ float p ; @ ; @ ; @ p = 2 * ( ( *b ) + ( *s ) ) ; @ { @ ( *temptemp1 ) = p ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ int i ; @ int factorial = 1 ; @ ; @ if ( ( *n ) < 0 ) { @ ; @ } else { @ for ( i = 1 ; i <= ( *n ) ; ++i ) { @ factorial = factorial * i ; @ } @ { @ ( *temptemp1 ) = factorial ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int k ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 1 ; i <= ( *n ) ; i++ ) { @ for ( k = ( *n ) ; k > i ; k-- ) { @ ; @ } @ for ( j = 1 ; j <= i ; j++ ) { @ { @ ( *temptemp1 ) = j ; @ ; @ } @ } ; @ } ; @ for ( i = ( *n ) ; i >= 1 ; i-- ) { @ for ( k = ( *n ) ; k > i ; k-- ) { @ ; @ } @ for ( j = 1 ; j <= i ; j++ ) { @ { @ ( *temptemp2 ) = j ; @ ; @ } @ } ; @ } ; @ for ( i = 1 ; i <= ( *n ) ; i++ ) { @ for ( k = 1 ; k < i ; k++ ) { @ ; @ } @ for ( j = i ; j >= 1 ; j-- ) { @ { @ ( *temptemp3 ) = j ; @ ; @ } @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) ) { @ ; @ if ( ( *n ) < 1 ) { @ ; @ return 0 ; @ } @ puts ( "\ ( *n ) --------------------------------------------\ ( *n ) " ) ; @ int row = 0 ; @ while ( row < ( *n ) ) { @ int space = 0 ; @ while ( space < row ) { @ ; @ space++ ; @ } @ int star = ( 2 * ( ( *n ) - row ) - 1 ) ; @ while ( star > 0 ) { @ ; @ star-- ; @ } ; @ row++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *temptemp1 ) , float ( *temptemp2 ) , float ( *temptemp3 ) , @ float ( *temptemp4 ) ) { @ float a = 5.0 ; @ float b = 10.0 ; @ float sum = a + b ; @ float diff = a - b ; @ float product = a * b ; @ float quotient = a / b ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ { @ ( *temptemp2 ) = diff ; @ ; @ } @ { @ ( *temptemp3 ) = product ; @ ; @ } @ { @ ( *temptemp4 ) = quotient ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ perimeter = 4 * ( *side ) ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *ch ) , char ( *temptemp1 ) , char ( *temptemp2 ) , @ char ( *temptemp3 ) ) { @ ; @ if ( ( ( *ch ) >= 'A' && ( *ch ) <= 'Z' ) || ( ( *ch ) >= 'a' && ( *ch ) <= 'z' ) ) { @ switch ( ( *ch ) ) { @ case 'A': @ case 'E': @ case 'I': @ case 'O': @ case 'U': @ case 'a': @ case 'e': @ case 'i': @ case 'o': @ case 'u': { @ ( *temptemp1 ) = ( *ch ) ; @ ; @ } break ; @ default : { @ ( *temptemp2 ) = ( *ch ) ; @ ; @ } @ } @ } else { @ { @ ( *temptemp3 ) = ( *ch ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *total ) , int ( *elements ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int exchange ; @ int y ; @ int x ; @ ; @ for ( x = 0 ; x < ( *total ) ; x++ ) { @ { @ ( *temptemp1 ) = x + 1 ; @ ; @ } @ } @ for ( x = 0 ; x < ( *total ) - 1 ; x++ ) { @ for ( y = 0 ; y < ( *total ) - x - 1 ; y++ ) { @ if ( elements [ y ] < elements [ y + 1 ] ) { @ exchange = elements [ y ] ; @ elements [ y ] = elements [ y + 1 ] ; @ elements [ y + 1 ] = exchange ; @ } @ } @ } ; @ for ( x = 0 ; x < ( *total ) ; x++ ) { @ ( *temptemp2 ) = elements [ x ] ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , float ( *temptemp2 ) ) { @ int i ; @ int j ; @ float result ; @ ; @ ; @ for ( j = ( *lower ) ; j <= ( *upper ) && j >= 0 ; j++ ) { @ i = 2 ; @ result = 1.0 ; @ while ( i <= j && result <= ( *upper ) ) { @ result *= i ; @ if ( result < 0 ) { @ result = -1 ; @ break ; @ } @ i++ ; @ } @ if ( result <= ( *upper ) && result > 0 ) { @ { @ ( *temptemp1 ) = j ; @ ( *temptemp2 ) = result ; @ ; @ } @ } else { @ break ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *amount ) , float ( *rate ) , float ( *time ) , float ( *temptemp1 ) ) { @ ; @ ; @ ; @ ( *amount ) = ( ( *amount ) * ( *rate ) * ( *time ) ) / 100 ; @ { @ ( *temptemp1 ) = ( *amount ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *octal ) , int ( *temptemp1 ) ) { @ int base = 1 ; @ int decimal = 0 ; @ int reverse = 0 ; @ ; @ while ( ( *octal ) != 0 ) { @ reverse = reverse * 10 + ( ( *octal ) % 10 ) ; @ ( *octal ) /= 10 ; @ } @ while ( reverse != 0 ) { @ decimal += ( reverse % 10 ) * base ; @ base *= 8 ; @ reverse /= 10 ; @ } @ { @ ( *temptemp1 ) = decimal ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void swap ( int* a , int* b ) ; @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ swap ( & ( *a ) , & ( *b ) ) ; @ { @ ( *temptemp3 ) = ( *a ) ; @ ( *temptemp4 ) = ( *b ) ; @ ; @ } @ return 0 ; @ } @ void swap ( int* a , int* b ) { @ *a = *a ^ *b ; @ *b = *a ^ *b ; @ *a = *a ^ *b ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int step = 1 ; @ int value = 100 ; @ if ( step == 1 ) { @ { @ ( *temptemp1 ) = value ; @ ; @ } @ step++ ; @ } @ if ( step == 2 ) { @ value = 200 ; @ { @ ( *temptemp2 ) = value ; @ ; @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) , float ( *temptemp3 ) , float ( *temptemp4 ) , @ float ( *temptemp5 ) , float ( *temptemp6 ) , float ( *temptemp7 ) , @ float ( *temptemp8 ) , float ( *temptemp9 ) ) { @ float imaginaryPart ; @ float r2 ; @ float r1 ; @ float disc ; @ ; @ if ( ! ( *a ) ) { @ ; @ exit ( 0 ) ; @ } @ disc = ( *b ) * ( *b ) - 4 * ( *a ) * ( *c ) ; @ { @ ( *temptemp1 ) = disc ; @ ; @ } @ switch ( disc > 0 ) { @ case 1: ; @ r1 = ( - ( *b ) + sqrt ( disc ) ) / ( 2 * ( *a ) ) ; @ r2 = ( - ( *b ) - sqrt ( disc ) ) / ( 2 * ( *a ) ) ; @ { @ ( *temptemp2 ) = r1 ; @ ( *temptemp3 ) = r2 ; @ ; @ } @ break ; @ case 0: @ switch ( disc < 0 ) { @ case 0: ; @ r1 = r2 = - ( *b ) / ( 2 * ( *a ) ) ; @ { @ ( *temptemp4 ) = r1 ; @ ( *temptemp5 ) = r1 ; @ ; @ } @ break ; @ case 1: ; @ r1 = - ( *b ) / ( 2 * ( *a ) ) ; @ imaginaryPart = sqrt ( -disc ) / ( 2 * ( *a ) ) ; @ { @ ( *temptemp6 ) = r1 ; @ ( *temptemp7 ) = imaginaryPart ; @ ( *temptemp8 ) = r1 ; @ ( *temptemp9 ) = imaginaryPart ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) ) { @ int j ; @ int i = 10 ; @ char ch = '*' ; @ while ( i >= 0 ) { @ j = 0 ; @ ; @ while ( j < i ) { @ { @ ( *temptemp1 ) = ch ; @ ; @ } @ j++ ; @ } @ i-- ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ i = ( *n ) ; @ while ( i >= 1 ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ i-- ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int tempNumber ; @ int rem = 0 ; @ int sum = 0 ; @ ; @ tempNumber = ( *number ) ; @ do { @ rem = tempNumber % 10 ; @ sum = sum + ( rem * rem * rem ) ; @ tempNumber /= 10 ; @ } while ( tempNumber != 0 ) ; @ if ( sum == ( *number ) ) { @ ( *temptemp1 ) = ( *number ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *number ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *kmph ) , float ( *temptemp1 ) ) { @ float knots ; @ ; @ knots = ( *kmph ) / 1.852 ; @ { @ ( *temptemp1 ) = knots ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ result = ( *a ) * ( *b ) * ( *c ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float perimeter = 4 * ( *side ) ; @ ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ result = ( *a ) | 1 ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *breadth ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ float sum_of_sides ; @ float perimeter ; @ float area ; @ ; @ ; @ sum_of_sides = ( *length ) + ( *breadth ) ; @ area = sum_of_sides * ( *breadth ) ; @ perimeter = 2 * sum_of_sides ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ { @ ( *temptemp2 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *atm ) , float ( *temptemp1 ) ) { @ float mmHg ; @ ; @ mmHg = ( *atm ) * 760 ; @ { @ ( *temptemp1 ) = mmHg ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float celsius = 36.6f ; @ float fahrenheit ; @ fahrenheit = ( celsius * 9 / 5 ) + 32 ; @ { @ ( *temptemp1 ) = celsius ; @ ; @ } @ { @ ( *temptemp2 ) = fahrenheit ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , long int ( *temptemp1 ) ) { @ int i ; @ unsigned long sum ; @ ; @ sum = 0 ; @ for ( i = 1 ; i <= ( *N ) ; i++ ) sum = sum + ( i * i ) ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *input ) , int ( *temptemp1 ) ) { @ int shiftResult ; @ ; @ shiftResult = ( ( *input ) << 1 ) + 5 ; @ { @ ( *temptemp1 ) = shiftResult ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *lim_up ) , int ( *temptemp1 ) ) { @ int B = 1 ; @ int A = 0 ; @ ; @ ; @ while ( A <= ( *lim_up ) ) { @ { @ ( *temptemp1 ) = A ; @ ; @ } @ B = B + A ; @ A = B - A ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ ; @ float radiusSquared = ( *radius ) * ( *radius ) ; @ float surfaceArea = 4 * M_PI * radiusSquared ; @ ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *degrees ) , float ( *temptemp1 ) ) { @ float conversionFactor = 200.0 / 180.0 ; @ float gradians ; @ ; @ gradians = ( *degrees ) * conversionFactor ; @ { @ ( *temptemp1 ) = gradians ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *gradians ) , float ( *temptemp1 ) ) { @ float degrees ; @ ; @ degrees = ( *gradians ) * 0.9 ; @ ; @ { @ ( *temptemp1 ) = degrees ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ area = ( 1.73205f / 2 * 3 ) * ( ( *side ) * ( *side ) ) ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , int ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float perimeter = 0 ; @ int i = 0 ; @ while ( i < 4 ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ perimeter += ( *side ) ; @ i++ ; @ } @ { @ ( *temptemp2 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int array [ 100 ] , array1 [ 100 ] ; @ void entry_point ( int ( *n ) , int ( *array ) , int ( *temptemp1 ) ) { @ int temp ; @ int k ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ array1 [ i ] = array [ i ] ; @ } @ for ( k = 0 ; k < 3 ; k++ ) { @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ for ( j = i + 1 ; j < ( *n ) ; j++ ) { @ if ( ( array [ i ] % 10 ) > ( array [ j ] % 10 ) ) { @ temp = array [ i ] ; @ array [ i ] = array [ j ] ; @ array [ j ] = temp ; @ temp = array1 [ i ] ; @ array1 [ i ] = array1 [ j ] ; @ array1 [ j ] = temp ; @ } @ } @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ array [ i ] = array [ i ] / 10 ; @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = array1 [ i ] ; @ ; @ } @ } @ }
#include <stdio.h> @ @ int entry_point ( char ( *str ) , char ( *temptemp1 ) ) { @ char text [ 100 ] ; @ int j = 0 ; @ int i = 0 ; @ ; @ while ( str [ i ] != '\0' ) i++ ; @ while ( i > 0 ) { @ text [ j ] = str [ --i ] ; @ ++j ; @ } @ text [ j ] = '\0' ; @ ; @ for ( i = 0 ; text [ i ] != '\0' ; i++ ) { @ if ( text [ i + 1 ] == ' ' || text [ i + 1 ] == NULL ) { @ for ( j = i ; j >= 0 && text [ j ] != ' ' ; j-- ) { @ ( *temptemp1 ) = text [ j ] ; @ ; @ } ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *pos ) , int ( *val ) , int ( *temptemp1 ) ) { @ int i = 0 ; @ ; @ while ( i < ( *n ) ) { @ i++ ; @ } ; @ ; @ i = ( *n ) ; @ while ( i >= ( *pos ) ) { @ arr [ i ] = arr [ i - 1 ] ; @ i-- ; @ } @ arr [ ( *pos ) - 1 ] = ( *val ) ; @ ( *n ) ++ ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = arr [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) ) { @ int largest ; @ ; @ ; @ ; @ largest = ( *a ) ; @ if ( ( *b ) > largest ) { @ largest = ( *b ) ; @ } @ if ( ( *c ) > largest ) { @ largest = ( *c ) ; @ } @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) , int ( *temptemp5 ) ) { @ char x = 'C' ; @ int y = 678 ; @ float z = 789.01f ; @ float q = 4567.89f ; @ char greeting [ ] = "Hello , C!" ; @ int size_x = sizeof ( x ) ; @ int size_y = sizeof ( y ) ; @ int size_z = sizeof ( z ) ; @ int size_q = sizeof ( q ) ; @ int size_greeting = sizeof ( greeting ) ; @ { @ ( *temptemp1 ) = size_x ; @ ( *temptemp2 ) = size_y ; @ ( *temptemp3 ) = size_z ; @ ( *temptemp4 ) = size_q ; @ ( *temptemp5 ) = size_greeting ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void arrayfun ( int* ptr , int count ) { @ int i = 0 ; @ for ( i = 0 ; i < count ; i++ ) { @ ; @ } @ } @ int entry_point ( ) { @ int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; @ arrayfun ( array , 9 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ void displayStudentInfo ( int rollno , char *name , float marks ) { @ ; @ ; @ float roundedMarks = ( int ) ( marks * 100 + 0.5 ) / 100.0 ; @ ; @ } @ int entry_point ( ) { @ displayStudentInfo ( 101 , "Shyam Verma" , 75.25 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mps ) ) { @ float mph ; @ ; @ mph = ( *mps ) * 2.236 ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int j ; @ int i ; @ int count = 1 ; @ for ( i = 1 ; i <= 8 ; i++ ) { @ ; @ for ( j = 1 ; j <= i ; j++ , count = !count ) { @ { @ ( *temptemp1 ) = count ; @ ; @ } @ } @ count = i % 2 ? 0 : 1 ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str ) , char ( *temptemp1 ) ) { @ int counter ; @ ; @ for ( counter = 0 ; str [ counter ] != NULL ; counter++ ) { @ if ( str [ counter ] >= 'A' && str [ counter ] <= 'Z' ) @ str [ counter ] = str [ counter ] + 32 ; @ else if ( str [ counter ] >= 'a' && str [ counter ] <= 'z' ) @ str [ counter ] = str [ counter ] - 32 ; @ } @ { @ ( *temptemp1 ) = ( *str ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *line ) , long int ( *temptemp1 ) ) { @ int k ; @ int j ; @ int i ; @ ; @ for ( i = 0 ; i < ( *line ) ; i++ ) { @ for ( j = 1 ; j < ( *line ) - i ; j++ ) { @ ; @ } @ long value = 1 ; @ for ( j = 0 ; j <= i ; j++ ) { @ if ( j > 0 ) { @ value = value * ( i - j + 1 ) / j ; @ } @ { @ ( *temptemp1 ) = value ; @ ; @ } @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radians ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float degrees ; @ ; @ degrees = ( *radians ) * 57.2957795 ; @ { @ ( *temptemp1 ) = ( *radians ) ; @ ( *temptemp2 ) = degrees ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( double ( *a ) , double ( *b ) , float ( *temptemp1 ) ) { @ double circumference ; @ ; @ circumference = 2 * 3.141592 * sqrt ( ( ( *a ) * ( *a ) + ( *b ) * ( *b ) ) / 2 ) ; @ { @ ( *temptemp1 ) = circumference ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str ) , char ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i = 0 ; @ int flag = 0 ; @ int wc = 0 ; @ ; @ while ( str [ i ] != '\0' ) { @ if ( str [ i ] == ' ' || str [ i ] == '\n' || str [ i ] == '\t' ) @ flag = 0 ; @ else if ( flag == 0 ) { @ flag = 1 ; @ ++wc ; @ } @ ++i ; @ } @ { @ ( *temptemp1 ) = ( *str ) ; @ ( *temptemp2 ) = wc ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *values ) , int ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) , float ( *temptemp5 ) ) { @ int i ; @ float cubeDiffSum = 0 ; @ float skew ; @ float stdDev ; @ float var = 0 ; @ float avg ; @ float total = 0 ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ total += values [ i ] ; @ } @ avg = total / ( *n ) ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ var += pow ( values [ i ] - avg , 2 ) ; @ } @ var = var / ( *n ) ; @ stdDev = sqrt ( var ) ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ cubeDiffSum += pow ( values [ i ] - avg , 3 ) ; @ } @ skew = ( ( *n ) / ( ( ( *n ) - 1.0f ) * ( ( *n ) - 2.0f ) ) ) * ( cubeDiffSum / ( *n ) ) / @ pow ( stdDev , 3 ) ; @ ; @ { @ ( *temptemp2 ) = avg ; @ ; @ } ; @ { @ ( *temptemp3 ) = var ; @ ; @ } ; @ { @ ( *temptemp4 ) = stdDev ; @ ; @ } ; @ { @ ( *temptemp5 ) = skew ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *base ) , float ( *height ) , float ( *temptemp1 ) ) { @ float area ; @ float areaFactor = 0.5 ; @ ; @ ; @ area = areaFactor * ( *base ) * ( *height ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *powerWatts ) , float ( *temptemp1 ) ) { @ float powerHorsepower ; @ float conversionFactor = 746.0f ; @ ; @ powerHorsepower = ( *powerWatts ) / conversionFactor ; @ { @ ( *temptemp1 ) = powerHorsepower ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *value ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ ; @ float floorValue = floor ( ( *value ) ) ; @ float ceilValue = ceil ( ( *value ) ) ; @ ; @ { @ ( *temptemp1 ) = floorValue ; @ ; @ } ; @ { @ ( *temptemp2 ) = ceilValue ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number_of_elements ) , int ( *array ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) ) { @ int compare_index ; @ int current_index ; @ int temp ; @ ; @ for ( current_index = 0 ; current_index < ( *number_of_elements ) ; @ current_index++ ) { @ { @ ( *temptemp1 ) = current_index + 1 ; @ ; @ } @ } @ for ( current_index = 1 ; current_index < ( *number_of_elements ) ; @ current_index++ ) { @ temp = array [ current_index ] ; @ compare_index = current_index - 1 ; @ while ( compare_index >= 0 && array [ compare_index ] > temp ) { @ array [ compare_index + 1 ] = array [ compare_index ] ; @ compare_index-- ; @ } @ array [ compare_index + 1 ] = temp ; @ } ; @ for ( current_index = 0 ; current_index < ( *number_of_elements ) ; @ current_index++ ) { @ { @ ( *temptemp2 ) = array [ current_index ] ; @ ; @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i ; @ int found = 0 ; @ ; @ for ( i = 0 ; i * i <= ( *num ) ; i++ ) { @ if ( i * i == ( *num ) ) { @ found = 1 ; @ break ; @ } @ } @ if ( found == 1 ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int nthOdd = 0 ; @ int i = 1 ; @ int counter = 0 ; @ ; @ while ( counter < ( *n ) ) { @ if ( i % 2 != 0 ) { @ nthOdd = i ; @ counter++ ; @ } @ i++ ; @ } ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } ; @ { @ ( *temptemp2 ) = nthOdd ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *array ) , int ( *temptemp1 ) , float ( *temptemp2 ) ) { @ int index ; @ float temp ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( index = 0 ; index < ( *n ) ; index++ ) { @ } @ index = 0 ; @ while ( index < ( *n ) ) { @ if ( index == 0 || array [ index - 1 ] <= array [ index ] ) { @ index++ ; @ } else { @ temp = array [ index ] ; @ array [ index ] = array [ index - 1 ] ; @ array [ index - 1 ] = temp ; @ index-- ; @ } @ } ; @ for ( index = 0 ; index < ( *n ) ; index++ ) { @ { @ ( *temptemp2 ) = array [ index ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int i ; @ int product ; @ int sum ; @ ; @ for ( i = 0 ; i < 10 ; i++ ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ } @ sum = 0 ; @ product = 1 ; @ for ( i = 0 ; i < 10 ; i++ ) { @ sum = sum + arr [ i ] ; @ product = product * arr [ i ] ; @ } @ { @ ( *temptemp2 ) = sum ; @ ; @ } @ { @ ( *temptemp3 ) = product ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *dividend ) , int ( *divisor ) , int ( *temptemp1 ) ) { @ int remainder ; @ int tempDividend ; @ ; @ ; @ tempDividend = ( *dividend ) ; @ while ( tempDividend >= ( *divisor ) ) { @ tempDividend -= ( *divisor ) ; @ } @ remainder = tempDividend ; @ { @ ( *temptemp1 ) = remainder ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *temptemp1 ) ) { @ int i = 1 ; @ float sum = 0 ; @ ; @ do { @ sum += i ; @ i++ ; @ } while ( i <= ( *n ) ) ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float sumCD ; @ float sumAB ; @ float result ; @ ; @ sumAB = ( *a ) + ( *b ) ; @ sumCD = ( *c ) + ( *d ) ; @ if ( sumCD == 0 ) { @ ; @ return -1 ; @ } @ result = sumAB / sumCD ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *temptemp1 ) ) { @ float total_perimeter ; @ ; @ total_perimeter = 8.0f * ( *length ) ; @ ; @ { @ ( *temptemp1 ) = total_perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *millimeters ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ ; @ { @ ( *temptemp1 ) = ( *millimeters ) ; @ ; @ } @ float centimeters = ( *millimeters ) / 10.0 ; @ ; @ { @ ( *temptemp2 ) = centimeters ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ ; @ int isEven = ( *num ) % 2 == 0 ? 1 : 0 ; @ if ( isEven ) { @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ { @ ( *temptemp2 ) = ( *num ) + 2 ; @ ; @ } @ } else { @ { @ ( *temptemp3 ) = ( *num ) ; @ ; @ } @ { @ ( *temptemp4 ) = ( *num ) + 2 ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ float half ; @ ; @ half = ( *num ) / 2.0f ; @ if ( ( half - ( int ) half ) == 0 ) { @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ if ( ( *num ) % 2 ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *d ) , int ( *e ) , int ( *f ) , @ int ( *temptemp1 ) ) { @ int x ; @ ; @ ; @ ; @ ; @ ; @ ; @ x = ( ( *a ) + ( *b ) ) * ( *c ) / ( *d ) * ( ( *e ) - ( *f ) ) ; @ { @ ( *temptemp1 ) = x ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float circum ; @ float area ; @ ; @ area = 3.142 * ( *radius ) * ( *radius ) ; @ circum = 2 * 3.142 * ( *radius ) ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } ; @ { @ ( *temptemp2 ) = circum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void f ( int n ) ; @ int entry_point ( int ( *num ) ) { @ ; @ f ( ( *num ) ) ; @ return 0 ; @ } @ void f ( int n ) { @ if ( n == 0 ) return ; @ f ( n / 10 ) ; @ switch ( n % 10 ) { @ ; @ ; @ ; @ ; @ ; @ ; @ ; @ ; @ ; @ ; @ } @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } ; @ int sum = 0 ; @ int i = 0 ; @ while ( i < 9 ) { @ sum += array [ i ] ; @ i++ ; @ } @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *base ) , float ( *h ) , float ( *temptemp1 ) ) { @ float vol ; @ ; @ ; @ vol = ( ( *base ) * ( *base ) * ( *h ) ) / 3.0f ; @ ; @ { @ ( *temptemp1 ) = vol ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *a ) , int ( *m ) , int ( *temptemp1 ) ) { @ int c = 0 ; @ int i ; @ ; @ ; @ for ( i = 0 ; i <= ( *n ) - 1 ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } ; @ for ( i = 0 ; i <= ( *n ) - 1 ; i++ ) { @ if ( a [ i ] == ( *m ) ) { @ c = 1 ; @ break ; @ } @ } @ if ( c == 0 ) @ ; @ else @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *yards ) , float ( *temptemp1 ) ) { @ float miles ; @ ; @ miles = ( *yards ) / 1760.0 ; @ { @ ( *temptemp1 ) = miles ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int findHcf ( int a , int b ) { @ int temp ; @ if ( a == 0 || b == 0 ) return 0 ; @ while ( b != 0 ) { @ temp = a % b ; @ a = b ; @ b = temp ; @ } @ return a ; @ } @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int hcf ; @ ; @ ; @ hcf = findHcf ( ( *a ) , ( *b ) ) ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = hcf ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ int i ; @ char ch [ 50 ] ; @ ; @ for ( i = 0 ; ch [ i ] != '\0' ; i++ ) { @ count++ ; @ } ; @ { @ ( *temptemp1 ) = ch ; @ ; @ } ; @ { @ ( *temptemp2 ) = count ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ void findMinimum ( ) { @ int array [ 6 ] = { 22 , 45 , 3 , 8 , 19 , 12 } ; @ int min = array [ 0 ] ; @ int i ; @ for ( i = 1 ; i < 6 ; i++ ) { @ if ( array [ i ] < min ) { @ min = array [ i ] ; @ } @ } ; @ } @ int entry_point ( ) { @ findMinimum ( ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *pi ) , float ( *radians ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ float degrees ; @ ; @ ; @ degrees = ( *radians ) * ( 180.0 / ( *pi ) ) ; @ { @ ( *temptemp1 ) = ( *radians ) ; @ ( *temptemp2 ) = degrees ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *x ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float difference ; @ float sum ; @ float exp_neg ; @ float exp_pos ; @ ; @ exp_pos = expf ( ( *x ) ) ; @ exp_neg = expf ( - ( *x ) ) ; @ sum = exp_pos + exp_neg ; @ difference = exp_pos - exp_neg ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ { @ ( *temptemp2 ) = difference ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *outerRadius ) , float ( *innerRadius ) , float ( *temptemp1 ) ) { @ float area ; @ float innerArea ; @ float outerArea ; @ float pi ; @ pi = 3.14159 ; @ ; @ ; @ outerArea = pi * ( *outerRadius ) * ( *outerRadius ) ; @ innerArea = pi * ( *innerRadius ) * ( *innerRadius ) ; @ area = outerArea - innerArea ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ ; @ surfaceArea = 4 * M_PI * ( ( *radius ) * ( *radius ) ) ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *inputNumber ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int currentDigit ; @ int totalSum = 0 ; @ int totalProduct = 1 ; @ ; @ for ( ; ( *inputNumber ) > 0 ; ( *inputNumber ) /= 10 ) { @ currentDigit = ( *inputNumber ) % 10 ; @ totalSum += currentDigit ; @ totalProduct *= currentDigit ; @ } @ { @ ( *temptemp1 ) = totalSum ; @ ; @ } @ { @ ( *temptemp2 ) = totalProduct ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *temptemp1 ) ) { @ ; @ float temp = ( *length ) * ( *length ) ; @ float area = temp ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *meters ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float kilometers ; @ ; @ kilometers = ( *meters ) / 1000 ; @ ; @ { @ ( *temptemp1 ) = ( *meters ) ; @ ; @ } ; @ { @ ( *temptemp2 ) = kilometers ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ result = ( *a ) >> 2 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ result = ( *a ) * ( *b ) + ( *c ) * ( *d ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *bLength ) , float ( *hgt ) , float ( *temptemp1 ) ) { @ float vlm ; @ ; @ vlm = ( ( *bLength ) * ( *bLength ) * ( *hgt ) ) / 3.0f ; @ ; @ { @ ( *temptemp1 ) = vlm ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int validateDate ( int d , int m , int y ) { @ if ( y >= 1800 && y <= 2999 ) { @ if ( m >= 1 && m <= 12 ) { @ if ( d >= 1 && d <= 31 ) { @ if ( ( d >= 1 && d <= 30 ) && ( m == 4 || m == 6 || m == 9 || m == 11 ) ) @ return 1 ; @ else if ( ( d >= 1 && d <= 30 ) && ( m == 1 || m == 3 || m == 5 || m == 7 || @ m == 8 || m == 10 || m == 12 ) ) @ return 1 ; @ else if ( ( d >= 1 && d <= 28 ) && ( m == 2 ) ) @ return 1 ; @ else if ( d == 29 && m == 2 && @ ( ( y % 400 == 0 ) || ( y % 4 == 0 && y % 100 != 0 ) ) ) @ return 1 ; @ else @ return 0 ; @ } else { @ return 0 ; @ } @ } else { @ return 0 ; @ } @ } else { @ return 0 ; @ } @ } @ int wd ( int year , int month , int day ) { @ int wday = 0 ; @ wday = ( day + ( ( 153 * ( month + 12 * ( ( 14 - month ) / 12 ) - 3 ) + 2 ) / 5 ) + @ ( 365 * ( year + 4800 - ( ( 14 - month ) / 12 ) ) ) + @ ( ( year + 4800 - ( ( 14 - month ) / 12 ) ) / 4 ) - @ ( ( year + 4800 - ( ( 14 - month ) / 12 ) ) / 100 ) + @ ( ( year + 4800 - ( ( 14 - month ) / 12 ) ) / 400 ) - 32045 ) % @ 7 ; @ return wday ; @ } @ int entry_point ( int ( *day ) , int ( *month ) , int ( *year ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , char ( *temptemp4 ) ) { @ int wDayNo = 0 ; @ char dayNames [ ] [ 12 ] = { "Monday" , "Tuesday" , "Wednesday" , "Thursday" , @ "Friday" , "Saturday" , "Sunday" } ; @ ; @ if ( validateDate ( ( *day ) , ( *month ) , ( *year ) ) == 1 ) { @ { @ ( *temptemp1 ) = ( *day ) ; @ ( *temptemp2 ) = ( *month ) ; @ ( *temptemp3 ) = ( *year ) ; @ ; @ } @ wDayNo = wd ( ( *year ) , ( *month ) , ( *day ) ) ; @ { @ ( *temptemp4 ) = dayNames [ wDayNo ] ; @ ; @ } @ } else @ ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float volume ; @ ; @ volume = ( 4.0 / 3.0 ) * M_PI * ( ( *radius ) * ( *radius ) * ( *radius ) ) ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ int j ; @ int i ; @ ; @ for ( i = 0 ; i <= ( *num ) ; i++ ) { @ for ( j = 0 ; j < i ; j++ ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ } ; @ } @ return ( 0 ) ; @ }
#include <stdbool.h> @ #include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i ; @ int num ; @ bool isPrime ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *lower ) ; @ ( *temptemp2 ) = ( *upper ) ; @ ; @ } @ for ( num = ( *lower ) ; num <= ( *upper ) ; num++ ) { @ if ( num <= 1 ) continue ; @ isPrime = true ; @ for ( i = 2 ; i * i <= num ; i++ ) { @ if ( num % i == 0 ) { @ isPrime = false ; @ break ; @ } @ } @ if ( isPrime ) { @ { @ ( *temptemp3 ) = num ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ ; @ ; @ ; @ ; @ ; @ ; @ ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) ) { @ int isNegative ; @ int isPositive ; @ ; @ isPositive = ( *num ) > 0 ; @ isNegative = ( *num ) < 0 ; @ if ( isPositive ) { @ ; @ } else if ( isNegative ) { @ ; @ } else { @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *string ) , char ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int frequency [ 255 ] ; @ int max ; @ int i = 0 ; @ int ascii ; @ ; @ for ( i = 0 ; i < 255 ; i++ ) { @ frequency [ i ] = 0 ; @ } @ i = 0 ; @ while ( string [ i ] != '\0' ) { @ ascii = ( int ) string [ i ] ; @ frequency [ ascii ] += 1 ; @ i++ ; @ } @ max = 0 ; @ for ( i = 0 ; i < 255 ; i++ ) { @ if ( frequency [ i ] > frequency [ max ] ) max = i ; @ } @ { @ ( *temptemp1 ) = max ; @ ( *temptemp2 ) = frequency [ max ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int findHcf ( int a , int b ) { @ int temp ; @ if ( a == 0 || b == 0 ) return 0 ; @ while ( b != 0 ) { @ temp = a % b ; @ a = b ; @ b = temp ; @ } @ return a ; @ } @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int hcf ; @ ; @ ; @ hcf = findHcf ( ( *a ) , ( *b ) ) ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = hcf ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ ; @ ; @ ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ void entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = 1 ; i <= ( *n ) ; ++i ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ { @ ( *temptemp3 ) = i ; @ ; @ } @ { @ ( *temptemp4 ) = i ; @ ; @ } @ } @ }
#include <stdio.h> @ @ int entry_point ( int ( *x ) , int ( *y ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int temp ; @ ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *x ) ; @ ( *temptemp2 ) = ( *y ) ; @ ; @ } @ temp = ( *x ) ; @ ( *x ) = ( *y ) ; @ ( *y ) = temp ; @ ; @ { @ ( *temptemp3 ) = ( *x ) ; @ ( *temptemp4 ) = ( *y ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , int ( *temptemp2 ) ) { @ char string [ 100 ] ; @ int frequency [ 255 ] ; @ int ascii ; @ int min ; @ int i ; @ ; @ for ( i = 0 ; i < 255 ; i++ ) { @ frequency [ i ] = 0 ; @ } @ for ( i = 0 ; string [ i ] != '\0' ; i++ ) { @ ascii = string [ i ] ; @ frequency [ ascii ] ++ ; @ } @ min = 0 ; @ for ( i = 1 ; i < 255 ; i++ ) { @ if ( frequency [ i ] < frequency [ min ] && frequency [ i ] != 0 || @ frequency [ min ] == 0 ) { @ min = i ; @ } @ } @ { @ ( *temptemp1 ) = min ; @ ( *temptemp2 ) = frequency [ min ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *grade ) , int ( *temptemp1 ) , float ( *temptemp2 ) ) { @ int score ; @ int sum = 0 ; @ int gradeNum = 0 ; @ float avg = 0 ; @ int pass = 0 ; @ int totalGrades = 0 ; @ while ( ( *grade ) != -1 ) { @ if ( ( *grade ) <= 100 && ( *grade ) >= 70 ) { @ pass = pass + 1 ; @ { @ ( *temptemp1 ) = pass ; @ ; @ } @ } @ if ( ( *grade ) >= 0 && ( *grade ) <= 100 ) { @ totalGrades = totalGrades + 1 ; @ } ; @ } @ avg = 100 * pass / totalGrades ; @ { @ ( *temptemp2 ) = avg ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float numbers [ 5 ] = { 1.0 , 2.0 , 3.0 , 4.0 , 5.0 } ; @ float total = 0.0 ; @ float average ; @ int i ; @ for ( i = 0 ; i < 5 ; i++ ) { @ total += numbers [ i ] ; @ } @ average = total / 5 ; @ { @ ( *temptemp1 ) = total ; @ ; @ } @ { @ ( *temptemp2 ) = average ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side1 ) , float ( *side2 ) , float ( *temptemp1 ) ) { @ float perim ; @ ; @ ; @ perim = 2 * ( ( *side1 ) + ( *side2 ) ) ; @ ; @ { @ ( *temptemp1 ) = perim ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int x = 15 ; @ void display ( ) ; @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int x = 25 ; @ int y = 35 ; @ { @ ( *temptemp1 ) = x ; @ ( *temptemp2 ) = y ; @ ; @ } @ display ( ) ; @ { @ ( *temptemp3 ) = y ; @ ; @ } @ return 0 ; @ } @ void display ( ) { @ int y = 45 ; @ ; @ ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *R ) , float ( *r ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ float factor ; @ ; @ ; @ factor = 3.14159265358979323846 * 3.14159265358979323846 ; @ surfaceArea = factor * 4 * ( *R ) * ( *r ) ; @ ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *x ) , int ( *y ) , int ( *temptemp1 ) , float ( *temptemp2 ) ) { @ int addition ; @ float average ; @ ; @ ; @ addition = ( *x ) + ( *y ) ; @ average = addition / 2.0f ; @ { @ ( *temptemp1 ) = addition ; @ ; @ } @ { @ ( *temptemp2 ) = average ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str ) , char ( *temptemp1 ) ) { @ int len1 ; @ int len ; @ int j ; @ int i ; @ ; @ for ( len = 0 ; str [ len ] != '\0' ; len++ ) @ ; @ len1 = 0 ; @ for ( i = 0 ; i < ( len - len1 ) ; ) { @ if ( str [ i ] == str [ i + 1 ] ) { @ for ( j = i ; j < ( len - len1 ) ; j++ ) str [ j ] = str [ j + 1 ] ; @ len1++ ; @ } else { @ i++ ; @ } @ } @ { @ ( *temptemp1 ) = ( *str ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *s1 ) , char ( *temptemp1 ) ) { @ char i ; @ char s2 [ 100 ] ; @ ; @ for ( i = 0 ; s1 [ i ] != '\0' ; ++i ) { @ s2 [ i ] = s1 [ i ] ; @ } @ s2 [ i ] = '\0' ; @ { @ ( *temptemp1 ) = s2 ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *b ) , int ( *a ) ) { @ ; @ ; @ if ( ( *b ) == 'M' || ( *b ) == 'm' ) { @ if ( ( *a ) <= 25 ) { @ ; @ } else { @ ; @ } @ } else if ( ( *b ) == 'F' || ( *b ) == 'f' ) { @ if ( ( *a ) <= 20 ) { @ ; @ } else { @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *centimeters ) , float ( *temptemp1 ) ) { @ float meters ; @ ; @ meters = ( *centimeters ) / 100.0 ; @ { @ ( *temptemp1 ) = meters ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , unsigned int ( *temptemp3 ) ) { @ int a [ 3 ] = { 11 , 22 , 33 } ; @ int i = 0 ; @ while ( i < 3 ) { @ int value = a [ i ] ; @ unsigned int address = ( unsigned int ) &a [ i ] ; @ { @ ( *temptemp1 ) = i ; @ ( *temptemp2 ) = value ; @ ( *temptemp3 ) = address ; @ ; @ } @ i++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *pos ) , int ( *val ) , int ( *temptemp1 ) ) { @ int i ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ } ; @ ; @ for ( i = ( *n ) ; i >= ( *pos ) ; --i ) { @ arr [ i ] = arr [ i - 1 ] ; @ } @ arr [ ( *pos ) - 1 ] = ( *val ) ; @ ++ ( *n ) ; @ ; @ for ( i = 0 ; i < ( *n ) ; ++i ) { @ { @ ( *temptemp1 ) = arr [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *height ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ ; @ area = 3.14159 * ( *radius ) * @ ( ( *radius ) + sqrt ( ( *radius ) * ( *radius ) + ( *height ) * ( *height ) ) ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ long find_ncr ( int n , int r ) { @ long n_fact = 1 , r_fact = 1 , n_r_fact = 1 ; @ int i ; @ for ( i = 1 ; i <= n ; i++ ) { @ n_fact *= i ; @ if ( i <= r ) r_fact *= i ; @ if ( i <= n - r ) n_r_fact *= i ; @ } @ return n_fact / ( r_fact * n_r_fact ) ; @ } @ long find_npr ( int n , int r ) { @ long n_fact = 1 , n_r_fact = 1 ; @ int i ; @ for ( i = 1 ; i <= n ; i++ ) { @ n_fact *= i ; @ if ( i <= n - r ) n_r_fact *= i ; @ } @ return n_fact / n_r_fact ; @ } @ int entry_point ( int ( *n ) , int ( *r ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ long int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) , @ long int ( *temptemp6 ) ) { @ long ncr , npr ; @ ; @ ; @ ncr = find_ncr ( ( *n ) , ( *r ) ) ; @ npr = find_npr ( ( *n ) , ( *r ) ) ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = ( *r ) ; @ ( *temptemp3 ) = ncr ; @ ; @ } @ { @ ( *temptemp4 ) = ( *n ) ; @ ( *temptemp5 ) = ( *r ) ; @ ( *temptemp6 ) = npr ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *e ) , @ float ( *temptemp1 ) ) { @ float product ; @ ; @ product = ( *a ) * ( *b ) * ( *c ) * ( *d ) * ( *e ) ; @ { @ ( *temptemp1 ) = product ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) ) { @ int Mod ; @ int D ; @ int M ; @ int S ; @ int A ; @ ; @ ; @ A = ( *a ) + ( *b ) ; @ S = ( *a ) - ( *b ) ; @ M = ( *a ) * ( *b ) ; @ D = ( *a ) / ( *b ) ; @ Mod = ( *a ) % ( *b ) ; @ { @ ( *temptemp1 ) = A ; @ ; @ } @ { @ ( *temptemp2 ) = S ; @ ; @ } @ { @ ( *temptemp3 ) = M ; @ ; @ } @ { @ ( *temptemp4 ) = D ; @ ; @ } @ { @ ( *temptemp5 ) = Mod ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void cyclicSwap ( int *a , int *b , int *c ) ; @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) , @ int ( *temptemp6 ) ) { @ ; @ ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = ( *c ) ; @ ; @ } @ cyclicSwap ( & ( *a ) , & ( *b ) , & ( *c ) ) ; @ ; @ { @ ( *temptemp4 ) = ( *a ) ; @ ( *temptemp5 ) = ( *b ) ; @ ( *temptemp6 ) = ( *c ) ; @ ; @ } @ return 0 ; @ } @ void cyclicSwap ( int *a , int *b , int *c ) { @ int temp ; @ temp = *b ; @ *b = *a ; @ *a = *c ; @ *c = temp ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *option ) , float ( *temperatureF ) , float ( *temperatureC ) , @ float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ ; @ ; @ ; @ if ( ( *option ) == 'F' || ( *option ) == 'f' ) { @ ; @ ( *temperatureC ) = ( ( *temperatureF ) - 32 ) * 5.0 / 9.0 ; @ { @ ( *temptemp1 ) = ( *temperatureC ) ; @ ; @ } @ } else if ( ( *option ) == 'C' || ( *option ) == 'c' ) { @ ; @ ( *temperatureF ) = ( ( *temperatureC ) * 9.0 / 5.0 ) + 32 ; @ { @ ( *temptemp2 ) = ( *temperatureF ) ; @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *weight ) , float ( *heightCm ) , float ( *temptemp1 ) ) { @ float bmi ; @ float heightM ; @ ; @ ; @ heightM = ( *heightCm ) / 100 ; @ bmi = ( *weight ) / ( heightM * heightM ) ; @ ; @ { @ ( *temptemp1 ) = bmi ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i ; @ int nthCubic = 1 ; @ ; @ if ( ( *n ) <= 0 ) { @ ; @ return 1 ; @ } @ for ( i = 0 ; i < 3 ; ++i ) { @ nthCubic *= ( *n ) ; @ } @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = nthCubic ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *name ) , float ( *basic ) , float ( *hra ) , float ( *da ) , @ char ( *temptemp1 ) , float ( *temptemp2 ) , float ( *temptemp3 ) , @ float ( *temptemp4 ) , float ( *temptemp5 ) , float ( *temptemp6 ) ) { @ float gross ; @ float pf ; @ ; @ ; @ ; @ ; @ pf = ( ( *basic ) * 12 ) / 100 ; @ gross = ( *basic ) + ( *da ) + ( *hra ) + pf ; @ { @ ( *temptemp1 ) = ( *name ) ; @ ( *temptemp2 ) = ( *basic ) ; @ ( *temptemp3 ) = ( *hra ) ; @ ( *temptemp4 ) = ( *da ) ; @ ( *temptemp5 ) = pf ; @ ( *temptemp6 ) = gross ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void Strfun ( char **ptr , int count ) { @ int i = 0 ; @ for ( i = 0 ; i < count ; i++ ) { @ ; @ } @ } @ int entry_point ( ) { @ char *buff [ 4 ] = { "Hello function" , "How are you?" , "Catch some strings" } ; @ Strfun ( buff , 3 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radians ) , float ( *temptemp1 ) ) { @ ; @ ; @ { @ ( *temptemp1 ) = ( float ) ( ( *radians ) * ( 180.0f / 3.14f ) ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int addTwoNumbers ( int x , int y ) { return x + y ; } @ int entry_point ( int ( *temptemp1 ) ) { @ int b = 20 ; @ int a = 10 ; @ int result = addTwoNumbers ( a , b ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *numbers ) , int ( *temptemp1 ) ) { @ int swapped ; @ int temp ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ } @ for ( i = 0 ; i < ( *n ) - 1 ; i++ ) { @ swapped = 0 ; @ for ( j = 0 ; j < ( *n ) - i - 1 ; j++ ) { @ if ( numbers [ j ] > numbers [ j + 1 ] ) { @ temp = numbers [ j ] ; @ numbers [ j ] = numbers [ j + 1 ] ; @ numbers [ j + 1 ] = temp ; @ swapped = 1 ; @ } @ } @ if ( !swapped ) { @ break ; @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = numbers [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n1 ) , int ( *n2 ) , int ( *n3 ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) ) { @ int smallest ; @ int largest ; @ ; @ ; @ ; @ if ( ( *n1 ) >= ( *n2 ) ) { @ if ( ( *n1 ) >= ( *n3 ) ) { @ largest = ( *n1 ) ; @ } else { @ largest = ( *n3 ) ; @ } @ } else { @ if ( ( *n2 ) >= ( *n3 ) ) { @ largest = ( *n2 ) ; @ } else { @ largest = ( *n3 ) ; @ } @ } @ if ( ( *n1 ) <= ( *n2 ) ) { @ if ( ( *n1 ) <= ( *n3 ) ) { @ smallest = ( *n1 ) ; @ } else { @ smallest = ( *n3 ) ; @ } @ } else { @ if ( ( *n2 ) <= ( *n3 ) ) { @ smallest = ( *n2 ) ; @ } else { @ smallest = ( *n3 ) ; @ } @ } @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ { @ ( *temptemp2 ) = smallest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mm ) , float ( *temptemp1 ) ) { @ float conversionFactor = 25.4 ; @ float inches ; @ ; @ inches = ( *mm ) / conversionFactor ; @ ; @ { @ ( *temptemp1 ) = inches ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *meters ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float feet ; @ ; @ feet = ( *meters ) * 3.28 ; @ { @ ( *temptemp1 ) = ( *meters ) ; @ ( *temptemp2 ) = feet ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *name ) , float ( *basic ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ float net ; @ float gross ; @ float tax ; @ float pf ; @ float hra ; @ float da ; @ ; @ ; @ pf = ( *basic ) * 0.08 ; @ if ( ( *basic ) < 5000 ) { @ da = ( *basic ) * 0.3 ; @ hra = ( *basic ) * 0.08 ; @ } else { @ da = ( *basic ) < 10000 ? ( *basic ) * 0.4 : ( *basic ) * 0.5 ; @ hra = ( *basic ) < 10000 ? ( *basic ) * 0.1 : ( *basic ) * 0.2 ; @ } @ gross = ( *basic ) + da + hra ; @ tax = gross * 0.05 ; @ net = gross - tax - pf ; @ { @ ( *temptemp1 ) = gross ; @ ; @ } @ { @ ( *temptemp2 ) = net ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *outerRadius ) , float ( *innerRadius ) , float ( *temptemp1 ) ) { @ float area ; @ float piValue = 3.14159 ; @ float innerSquare ; @ float outerSquare ; @ ; @ ; @ outerSquare = ( *outerRadius ) * ( *outerRadius ) ; @ innerSquare = ( *innerRadius ) * ( *innerRadius ) ; @ area = piValue * ( outerSquare - innerSquare ) ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *base ) , float ( *side ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ ; @ perimeter = 2 * ( ( *base ) + ( *side ) ) ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ result = ( ( *a ) - ( *b ) ) / ( ( *c ) - ( *d ) ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int factorial ( int n ) { @ int result = 1 ; @ int i ; @ for ( i = 2 ; i <= n ; ++i ) { @ result *= i ; @ if ( result < 0 ) { @ return -1 ; @ } @ } @ return result ; @ } @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int j ; @ ; @ ; @ for ( j = ( *lower ) ; j <= ( *upper ) && j >= 0 ; j++ ) { @ int fact = factorial ( j ) ; @ if ( fact <= ( *upper ) && fact > 0 ) { @ { @ ( *temptemp1 ) = j ; @ ( *temptemp2 ) = fact ; @ ; @ } @ } else { @ break ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , float ( *temptemp1 ) ) { @ int i ; @ float sum = 0.0 ; @ ; @ for ( i = 1 ; i <= ( *N ) ; i++ ) { @ float odd = 2 * i - 1 ; @ sum += odd / ( odd * odd ) ; @ } @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int sum ; @ int j ; @ int i ; @ int count = 0 ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ i = 1 ; @ do { @ sum = 0 ; @ j = 1 ; @ do { @ if ( i % j == 0 ) { @ sum += j ; @ } @ j++ ; @ } while ( j <= i / 2 ) ; @ if ( sum == i ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ count++ ; @ } @ i++ ; @ } while ( i <= ( *n ) ) ; @ { @ ( *temptemp3 ) = ( *n ) ; @ ( *temptemp4 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mm ) , float ( *temptemp1 ) ) { @ float inches ; @ ; @ inches = ( *mm ) / 25.4 ; @ { @ ( *temptemp1 ) = inches ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void PrintPrimeFactors ( int n ) { @ while ( n % 2 == 0 ) { @ ; @ n /= 2 ; @ } @ for ( int i = 3 ; i <= n ; i += 2 ) { @ while ( n % i == 0 ) { @ ; @ n /= i ; @ } @ } @ } @ int entry_point ( int ( *num ) ) { @ ; @ ; @ PrintPrimeFactors ( ( *num ) ) ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ ; @ ( *a ) = ( *a ) * ( *b ) ; @ ( *b ) = ( *a ) / ( *b ) ; @ ( *a ) = ( *a ) / ( *b ) ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *height ) , float ( *temptemp1 ) ) { @ float baseArea ; @ float volume ; @ ; @ baseArea = 3.14159 * pow ( ( *radius ) , 2 ) ; @ volume = baseArea * ( *height ) / 3 ; @ ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *hour ) , float ( *minute ) , float ( *second ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ ; @ if ( ( *hour ) >= 0 && ( *hour ) <= 23 && ( *minute ) >= 0 && ( *minute ) <= 59 && @ ( *second ) >= 0 && ( *second ) <= 59 ) { @ { @ ( *temptemp1 ) = ( int ) ( *hour ) ; @ ( *temptemp2 ) = ( int ) ( *minute ) ; @ ( *temptemp3 ) = ( int ) ( *second ) ; @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int temp ; @ int result ; @ ; @ temp = ( *number ) ; @ while ( temp >= 7 ) { @ temp -= 7 ; @ } @ if ( temp == 0 ) { @ result = ( *number ) + 1 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ result = ( *number ) + 2 ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int result = ( *number ) & 1 ; @ if ( result == 0 ) { @ { @ ( *temptemp1 ) = ( *number ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *number ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int temp ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ temp = ( *a ) ; @ ( *a ) = ( *b ) ; @ ( *b ) = temp ; @ { @ ( *temptemp3 ) = ( *a ) ; @ ( *temptemp4 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *num2 ) , char ( *ch ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , float ( *temptemp4 ) , @ int ( *temptemp5 ) ) { @ float result ; @ ; @ ; @ ; @ switch ( ( *ch ) ) { @ case '+': @ result = ( *num1 ) + ( *num2 ) ; @ { @ ( *temptemp1 ) = ( int ) result ; @ ; @ } @ break ; @ case '-': @ result = ( *num1 ) - ( *num2 ) ; @ { @ ( *temptemp2 ) = ( int ) result ; @ ; @ } @ break ; @ case '*': @ result = ( *num1 ) * ( *num2 ) ; @ { @ ( *temptemp3 ) = ( int ) result ; @ ; @ } @ break ; @ case '/': @ if ( ( *num2 ) != 0 ) { @ result = ( float ) ( *num1 ) / ( float ) ( *num2 ) ; @ { @ ( *temptemp4 ) = result ; @ ; @ } @ } else { @ ; @ } @ break ; @ case '%': @ if ( ( *num2 ) != 0 ) { @ result = ( *num1 ) % ( *num2 ) ; @ { @ ( *temptemp5 ) = ( int ) result ; @ ; @ } @ } else { @ ; @ } @ break ; @ default: ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) ) { @ int sum = 0 ; @ int temp ; @ int r ; @ ; @ temp = ( *n ) ; @ while ( ( *n ) != 0 ) { @ r = ( *n ) % 10 ; @ sum = sum + ( r * r * r ) ; @ ( *n ) = ( *n ) / 10 ; @ } @ if ( temp == sum ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *gradians ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float radians ; @ ; @ radians = ( *gradians ) * 0.015707963267948966 ; @ { @ ( *temptemp1 ) = ( *gradians ) ; @ ( *temptemp2 ) = radians ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *x ) , int ( *y ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int result = 0 ; @ ; @ ; @ for ( ; ( *y ) > 0 ; ( *y ) -- ) { @ result += ( *x ) ; @ } ; @ { @ ( *temptemp1 ) = ( *x ) ; @ ; @ } ; @ { @ ( *temptemp2 ) = ( *y ) ; @ ; @ } ; @ { @ ( *temptemp3 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *age ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result1 ; @ ; @ ; @ if ( ( *age ) > 18 ) { @ result1 = 1 ; @ { @ ( *temptemp1 ) = result1 ; @ ; @ } @ } else { @ result1 = 0 ; @ { @ ( *temptemp2 ) = result1 ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int var2 = 200 ; @ int var1 = 100 ; @ int temp ; @ { @ ( *temptemp1 ) = var1 ; @ ( *temptemp2 ) = var2 ; @ ; @ } @ temp = var1 ; @ var1 = var2 ; @ var2 = temp ; @ { @ ( *temptemp3 ) = var1 ; @ ( *temptemp4 ) = var2 ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int b = 1 ; @ int a = 0 ; @ int sum = 0 ; @ int count = 0 ; @ ; @ if ( ( *limit ) < 1 ) { @ { @ ( *temptemp1 ) = ( *limit ) ; @ ; @ } @ return 0 ; @ } @ if ( ( *limit ) >= 1 ) { @ count++ ; @ } @ while ( sum <= ( *limit ) ) { @ sum = a + b ; @ a = b ; @ b = sum ; @ if ( sum <= ( *limit ) ) { @ count++ ; @ } @ } @ { @ ( *temptemp2 ) = ( *limit ) ; @ ( *temptemp3 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , unsigned long int ( *temptemp1 ) ) { @ int i = 1 ; @ unsigned long sum = 0 ; @ ; @ while ( i <= ( *N ) ) { @ sum += i * i ; @ i++ ; @ } @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void printDetails ( int rollno , char name [ ] , float marks ) { @ ; @ ; @ ; @ ; @ } @ int entry_point ( ) { @ char studentName [ ] = "Geeta Kumari" ; @ printDetails ( 102 , studentName , 82.75 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *choice ) , float ( *temperature ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ float convertedTemperature ; @ ; @ ; @ ; @ if ( ( *choice ) == 1 ) { @ ; @ convertedTemperature = ( ( *temperature ) - 32 ) / 1.8 ; @ { @ ( *temptemp1 ) = convertedTemperature ; @ ; @ } @ } else if ( ( *choice ) == 2 ) { @ ; @ convertedTemperature = ( ( *temperature ) * 1.8 ) + 32 ; @ { @ ( *temptemp2 ) = convertedTemperature ; @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ ; @ result = ( *a ) & ( *b ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ char str2 [ 20 ] ; @ char str1 [ 20 ] ; @ int isEqual = 1 ; @ int i = 0 ; @ ; @ ; @ ; @ { @ ( *temptemp1 ) = str1 ; @ ; @ } @ { @ ( *temptemp2 ) = str2 ; @ ; @ } @ while ( str1 [ i ] != '\0' || str2 [ i ] != '\0' ) { @ if ( str1 [ i ] != str2 [ i ] ) { @ isEqual = 0 ; @ break ; @ } @ i++ ; @ } @ if ( isEqual ) @ ; @ else @ ; @ return 0 ; @ }
#include <stdio.h> @ @ unsigned int revBits ( unsigned int data ) { @ unsigned char totalBits = sizeof ( data ) * 8 ; @ unsigned int revNum = 0 , i , temp ; @ for ( i = 0 ; i < totalBits ; i++ ) { @ temp = ( data & ( 1 << i ) ) ; @ if ( temp ) revNum |= ( 1 << ( ( totalBits - 1 ) - i ) ) ; @ } @ return revNum ; @ } @ int entry_point ( unsigned int ( *temptemp1 ) ) { @ unsigned int num = 0x4 ; @ { @ ( *temptemp1 ) = revBits ( num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void hanoi_tower ( char , char , char , int ) ; @ void hanoi_tower ( char peg1 , char peg2 , char peg3 , int n ) { @ if ( n <= 0 ) @ ; @ if ( n == 1 ) @ ; @ else { @ hanoi_tower ( peg1 , peg3 , peg2 , n - 1 ) ; @ hanoi_tower ( peg1 , peg2 , peg3 , 1 ) ; @ hanoi_tower ( peg2 , peg1 , peg3 , n - 1 ) ; @ } @ } @ void entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ hanoi_tower ( 'x' , 'y' , 'z' , ( *n ) ) ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int isUnique ; @ int k ; @ int j ; @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *size ) ; @ ; @ } @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ isUnique = 1 ; @ for ( j = i + 1 ; j < ( *size ) ; j++ ) { @ if ( arr [ i ] == arr [ j ] ) { @ for ( k = j ; k < ( *size ) - 1 ; k++ ) { @ arr [ k ] = arr [ k + 1 ] ; @ } @ ( *size ) -- ; @ j-- ; @ isUnique = 0 ; @ } @ } @ if ( isUnique != 1 ) { @ for ( j = i ; j < ( *size ) - 1 ; j++ ) { @ arr [ j ] = arr [ j + 1 ] ; @ } @ ( *size ) -- ; @ i-- ; @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp3 ) = arr [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *e ) , @ float ( *temptemp1 ) ) { @ float result ; @ ; @ if ( ( *e ) == 0 ) { @ ; @ return 1 ; @ } @ result = ( ( *a ) + ( *b ) ) * ( ( *c ) - ( *d ) ) / ( *e ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int odd = 1 ; @ int square = 0 ; @ while ( ( *num ) >= odd ) { @ ( *num ) -= odd ; @ odd += 2 ; @ square++ ; @ } @ if ( ( *num ) == 0 ) { @ ( *temptemp1 ) = square * square ; @ ; @ } else { @ ( *temptemp2 ) = square * square + ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int freq [ 100 ] ; @ int count ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ freq [ i ] = -1 ; @ } @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ count = 1 ; @ for ( j = i + 1 ; j < ( *size ) ; j++ ) { @ if ( arr [ i ] == arr [ j ] ) { @ count++ ; @ freq [ j ] = 0 ; @ } @ } @ if ( freq [ i ] != 0 ) { @ freq [ i ] = count ; @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ if ( freq [ i ] != 0 ) { @ { @ ( *temptemp2 ) = arr [ i ] ; @ ( *temptemp3 ) = freq [ i ] ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int a = 7 ; @ void process ( ) ; @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int a = 12 ; @ int b = 22 ; @ int sum ; @ sum = a + b ; @ { @ ( *temptemp1 ) = a ; @ ( *temptemp2 ) = b ; @ ( *temptemp3 ) = sum ; @ ; @ } @ process ( ) ; @ sum = b - a ; @ { @ ( *temptemp4 ) = sum ; @ ; @ } @ return 0 ; @ } @ void process ( ) { @ int b = 32 ; @ int diff ; @ diff = b - a ; @ ; @ ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *height ) , @ float ( *temptemp1 ) ) { @ float surfaceArea ; @ float area3 ; @ float area2 ; @ float area1 ; @ ; @ ; @ ; @ area1 = ( *length ) * ( *width ) ; @ area2 = ( *width ) * ( *height ) ; @ area3 = ( *height ) * ( *length ) ; @ surfaceArea = 2 * ( area1 + area2 + area3 ) ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *r ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i ; @ int fact_nr ; @ int fact_n ; @ int permutation ; @ ; @ ; @ fact_n = 1 ; @ fact_nr = 1 ; @ for ( i = 1 ; i <= ( *n ) ; i++ ) { @ fact_n *= i ; @ if ( i == ( ( *n ) - ( *r ) ) ) { @ fact_nr = fact_n ; @ } @ } @ permutation = fact_n / fact_nr ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = ( *r ) ; @ ( *temptemp3 ) = permutation ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *gradians ) , float ( *temptemp1 ) ) { @ float radians ; @ ; @ ; @ radians = ( *gradians ) * ( 3.14159 / 200 ) ; @ ; @ { @ ( *temptemp1 ) = radians ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ ; @ ; @ ; @ result = ( *a ) * ( *b ) * ( *c ) * ( *d ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *operation ) , float ( *num1 ) , float ( *num2 ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) , float ( *temptemp3 ) , float ( *temptemp4 ) ) { @ float result ; @ ; @ ; @ ; @ switch ( ( *operation ) ) { @ case '+': @ result = ( *num1 ) + ( *num2 ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ break ; @ case '-': @ result = ( *num1 ) - ( *num2 ) ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ break ; @ case '*': @ result = ( *num1 ) * ( *num2 ) ; @ { @ ( *temptemp3 ) = result ; @ ; @ } @ break ; @ case '/': @ if ( ( *num2 ) != 0.0f ) { @ result = ( *num1 ) / ( *num2 ) ; @ { @ ( *temptemp4 ) = result ; @ ; @ } @ } else { @ ; @ } @ break ; @ default: ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int decValue = 1024 ; @ int octValue = 1024 ; @ int hexValueSmall = 1024 ; @ int hexValueCapital = 1024 ; @ { @ ( *temptemp1 ) = decValue ; @ ; @ } @ { @ ( *temptemp2 ) = octValue ; @ ; @ } @ { @ ( *temptemp3 ) = hexValueSmall ; @ ; @ } @ { @ ( *temptemp4 ) = hexValueCapital ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ ; @ perimeter = 2 * ( ( *length ) + ( *width ) ) ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mps ) , float ( *temptemp1 ) ) { @ float knots ; @ ; @ knots = ( *mps ) * 1.94384 ; @ ; @ { @ ( *temptemp1 ) = knots ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radians ) , float ( *temptemp1 ) ) { @ float degrees ; @ ; @ degrees = ( *radians ) * ( 180.0f / 3.14f ) ; @ ; @ { @ ( *temptemp1 ) = degrees ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *gender ) , int ( *age ) ) { @ ; @ switch ( ( *gender ) ) { @ case 'M': @ case 'm': @ if ( ( *age ) > 21 ) { @ ; @ } else { @ ; @ } @ break ; @ case 'F': @ case 'f': @ if ( ( *age ) > 21 ) { @ ; @ } else { @ ; @ } @ break ; @ default: ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ double totalGrades = 0 ; @ double pass = 0 ; @ double avg = 0 ; @ double gradeNum = 0 ; @ double grade = 0 ; @ double sum = 0 ; @ double score ; @ while ( grade != -1 ) { @ ; @ if ( grade <= 100 && grade >= 70 ) { @ pass++ ; @ { @ ( *temptemp1 ) = pass ; @ ; @ } @ } @ if ( grade >= 100 ) { @ ; @ } @ if ( grade >= 0 && grade <= 100 ) { @ totalGrades++ ; @ } @ } @ avg = ( pass / totalGrades ) * 100 ; @ { @ ( *temptemp2 ) = avg ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ int i ; @ ; @ if ( ( *n ) < 0 ) { @ ; @ return 1 ; @ } @ if ( ( *n ) == 0 ) { @ ; @ return 0 ; @ } else if ( ( *n ) == 1 ) { @ ; @ return 0 ; @ } @ int prev = 0 ; @ int curr = 1 ; @ int next ; @ for ( i = 2 ; i <= ( *n ) ; i++ ) { @ next = prev + curr ; @ prev = curr ; @ curr = next ; @ } @ { @ ( *temptemp1 ) = curr ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *sides ) , float ( *length ) , float ( *temptemp1 ) ) { @ ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *sides ) * ( *length ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ ; @ int reduced = ( *num ) % 10 ; @ int result = ( *num ) - reduced ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int rem ; @ ; @ ; @ rem = ( *a ) - ( ( *a ) / ( *b ) ) * ( *b ) ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = rem ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *x ) , int ( *y ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ ; @ ; @ { @ ( *temptemp1 ) = ( *x ) ; @ ( *temptemp2 ) = ( *y ) ; @ ; @ } @ ( *x ) = ( *x ) - ( *y ) ; @ ( *y ) = ( *x ) + ( *y ) ; @ ( *x ) = ( *y ) - ( *x ) ; @ { @ ( *temptemp3 ) = ( *x ) ; @ ( *temptemp4 ) = ( *y ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *basicPay ) , float ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) ) { @ float employerFund ; @ float employeeFund ; @ ; @ employeeFund = ( ( *basicPay ) / 100 ) * 12.5f ; @ employerFund = ( ( *basicPay ) / 100 ) * 12.0f ; @ { @ ( *temptemp1 ) = ( *basicPay ) ; @ ; @ } @ { @ ( *temptemp2 ) = employeeFund ; @ ; @ } @ { @ ( *temptemp3 ) = employerFund ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) ) { @ int largest ; @ ; @ ; @ ; @ largest = ( *a ) ; @ if ( ( *b ) > largest ) { @ largest = ( *b ) ; @ } @ if ( ( *c ) > largest ) { @ largest = ( *c ) ; @ } @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ void insert ( ) ; @ void delete ( ) ; @ void display ( ) ; @ int queue_array [ 50 ] ; @ int rear = -1 ; @ int front = -1 ; @ int entry_point ( int ( *choice ) ) { @ while ( 1 ) { @ ; @ ; @ ; @ ; @ ; @ switch ( ( *choice ) ) { @ case 1: @ insert ( ) ; @ break ; @ case 2: @ delete ( ) ; @ break ; @ case 3: @ display ( ) ; @ break ; @ case 4: @ exit ( 1 ) ; @ default: ; @ } @ } @ return 0 ; @ } @ void insert ( ) { @ int add_item ; @ if ( rear == 50 - 1 ) @ ; @ else { @ if ( front == -1 ) front = 0 ; @ ; @ rear = rear + 1 ; @ queue_array [ rear ] = add_item ; @ } @ } @ void delete ( ) { @ if ( front == -1 || front > rear ) { @ ; @ return ; @ } else { @ ; @ front = front + 1 ; @ } @ } @ void display ( ) { @ int i ; @ if ( front == -1 ) @ ; @ else { @ ; @ for ( i = front ; i <= rear ; i++ ) @ ; @ ; @ } @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int sum = 0 ; @ int i = 1 ; @ { @ if ( i % 8 == 0 ) { @ sum++ ; @ } @ } @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void readArray ( int arr [ ] , int size ) { @ int i = 0 ; @ ; @ for ( i = 0 ; i < size ; i++ ) { @ ; @ } @ } @ void printArray ( int arr [ ] , int size ) { @ int i = 0 ; @ ; @ for ( i = 0 ; i < size ; i++ ) { @ ; @ } ; @ } @ int entry_point ( ) { @ int arr [ 10 ] ; @ readArray ( arr , 10 ) ; @ printArray ( arr , 10 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int prime ( int num ) ; @ int entry_point ( int ( *temptemp1 ) ) { @ int j ; @ int i ; @ int num = 2 ; @ for ( i = 0 ; i < 5 ; i++ ) { @ ; @ for ( j = 0 ; j <= i ; j++ ) { @ while ( !prime ( num ) ) { @ num++ ; @ } @ { @ ( *temptemp1 ) = num++ ; @ ; @ } @ } @ } @ return ( 0 ) ; @ } @ int prime ( int num ) { @ int i , flag ; @ for ( i = 2 ; i < num ; i++ ) { @ if ( num % i != 0 ) @ flag = 1 ; @ else { @ flag = 0 ; @ break ; @ } @ } @ if ( flag == 1 || num == 2 ) @ return ( 1 ) ; @ else @ return ( 0 ) ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int diff ; @ ; @ ; @ if ( ( *a ) > ( *b ) ) @ diff = ( *a ) - ( *b ) ; @ else @ diff = ( *b ) - ( *a ) ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = diff ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *distance ) , float ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) ) { @ float meter ; @ float feet ; @ float inches ; @ float centimeter ; @ ; @ meter = ( *distance ) * 1000 ; @ feet = ( *distance ) * 3280.84 ; @ inches = ( *distance ) * 39370.1 ; @ centimeter = ( *distance ) * 100000 ; @ { @ ( *temptemp1 ) = meter ; @ ; @ } @ { @ ( *temptemp2 ) = feet ; @ ; @ } @ { @ ( *temptemp3 ) = inches ; @ ; @ } @ { @ ( *temptemp4 ) = centimeter ; @ ; @ } @ return 0 ; @ }
