▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ read Array ▁ ( ▁int ▁ a ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁find E lement ▁ ( ▁int ▁ a ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ , ▁int ▁i tem ▁ ) ▁ { ▁ @ ▁int ▁i ▁ , ▁ pos ▁= ▁ - 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ a ▁ [ ▁i ▁ ] ▁= = ▁i tem ▁ ) ▁ { ▁ @ ▁ pos ▁= ▁i ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁ pos ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* i tem ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁arr ▁ [ ▁20 ▁ ] ▁ ; ▁ @ ▁int ▁ pos ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ read Array ▁ ( ▁arr ▁ , ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ pos ▁= ▁find E lement ▁ ( ▁arr ▁ , ▁ ( ▁* n ▁ ) ▁ , ▁ ( ▁* i tem ▁ ) ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ pos ▁= = ▁ - 1 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* i tem ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* i tem ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ pos ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* ma r k s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ pas s ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ma r k s ▁ [ ▁i ▁ ] ▁< = ▁32 ▁ ) ▁ pas s ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ pas s ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* d im e n s io n ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁temp ▁= ▁ ( ▁* d im e n s io n ▁ ) ▁* ▁ ( ▁* d im e n s io n ▁ ) ▁ ; ▁ @ ▁result ▁= ▁temp ▁* ▁ 6 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁convert ▁ ( ▁int ▁ , ▁int ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁convert ▁ ( ▁ ( ▁* num ▁ ) ▁ , ▁ 2 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁convert ▁ ( ▁ ( ▁* num ▁ ) ▁ , ▁ 8 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁convert ▁ ( ▁ ( ▁* num ▁ ) ▁ , ▁ 1 6 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁convert ▁ ( ▁int ▁ num ▁ , ▁int ▁ base ▁ ) ▁ { ▁ @ ▁int ▁rem ▁= ▁ num ▁ % ▁ base ▁ ; ▁ @ ▁ if ▁ ( ▁ num ▁= = ▁0 ▁ ) ▁re tur n ▁ ; ▁ @ ▁convert ▁ ( ▁ num ▁ / ▁ base ▁ , ▁ base ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁rem ▁< ▁10 ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁fl ag ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁freq ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁freq ▁ [ ▁i ▁ ] ▁= ▁ 1 ▁ ; ▁ @ ▁fl ag ▁ [ ▁i ▁ ] ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁arr ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁freq ▁ [ ▁i ▁ ] ▁ ++ ▁ ; ▁ @ ▁fl ag ▁ [ ▁j ▁ ] ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁fl ag ▁ [ ▁i ▁ ] ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁freq ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* b s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ g s ▁ ; ▁ @ ▁float ▁ c v ▁ ; ▁ @ ▁float ▁da ▁ ; ▁ @ ▁float ▁ hra ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b s ▁ ) ▁ > = ▁500 0 ▁ ) ▁ { ▁ @ ▁da ▁= ▁ 1 1 0 ▁* ▁ ( ▁* b s ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ hra ▁= ▁20 ▁* ▁ ( ▁* b s ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ c v ▁= ▁500 ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* b s ▁ ) ▁ > = ▁300 0 ▁& & ▁ ( ▁* b s ▁ ) ▁< ▁500 0 ▁ ) ▁ { ▁ @ ▁da ▁= ▁100 ▁* ▁ ( ▁* b s ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ hra ▁= ▁ 1 5 ▁* ▁ ( ▁* b s ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ c v ▁= ▁ 4 00 ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* b s ▁ ) ▁< ▁300 0 ▁ ) ▁ { ▁ @ ▁da ▁= ▁ 9 0 ▁* ▁ ( ▁* b s ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ hra ▁= ▁10 ▁* ▁ ( ▁* b s ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ c v ▁= ▁300 ▁ ; ▁ @ ▁ } ▁ @ ▁ g s ▁= ▁ ( ▁* b s ▁ ) ▁+ ▁da ▁+ ▁ hra ▁+ ▁ c v ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁da ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ hra ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ c v ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ g s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁cube R o o t ▁ ; ▁ @ ▁int ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁cube R o o t ▁= ▁pow ▁ ( ▁ ( ▁* limit ▁ ) ▁ , ▁1.0 ▁ / ▁3.0 ▁ ) ▁ ; ▁ @ ▁count ▁= ▁ ( ▁int ▁ ) ▁cube R o o t ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁ m o d if i ed Num ▁= ▁ ( ▁ ( ▁ ( ▁* num ▁ ) ▁ - ▁ 1 ▁ ) ▁* ▁ 2 ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ if ▁ ( ▁ m o d if i ed Num ▁! = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ sides ▁= ▁5.0 ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁total Per imeter ▁= ▁ sides ▁* ▁ ( ▁* side L ength ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁total Per imeter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁i mag P art ▁ ; ▁ @ ▁float ▁re al P art ▁ ; ▁ @ ▁float ▁disc rim in ant ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁disc rim in ant ▁= ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ - ▁ 4 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁re al P art ▁= ▁ - ▁ ( ▁* b ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁disc rim in ant ▁ > = ▁0 ▁ ) ▁ { ▁ @ ▁i mag P art ▁= ▁sqrt ▁ ( ▁ f a b s ▁ ( ▁disc rim in ant ▁ ) ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁re al P art ▁+ ▁i mag P art ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁re al P art ▁ - ▁i mag P art ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁i mag P art ▁= ▁sqrt ▁ ( ▁ - d i s c rim in ant ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁re al P art ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁i mag P art ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁re al P art ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁i mag P art ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁* ▁ 2 ▁ - ▁ 1 ▁ ; ▁ @ ▁put s ▁ ( ▁"\ n --------------- --------------- --------------\ n " ▁ ) ▁ ; ▁ @ ▁int ▁space sIn C urrent Row ▁ ; ▁ @ ▁int ▁col sIn C urrent Row ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁space sIn C urrent Row ▁= ▁ ( ▁ row ▁ - ▁ 1 ▁ ) ▁* ▁ 2 ▁ ; ▁ @ ▁col sIn C urrent Row ▁= ▁max Col s ▁ - ▁space sIn C urrent Row ▁ ; ▁ @ ▁int ▁space ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁col ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* divi d end ▁ ) ▁ , ▁int ▁ ( ▁* divisor ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ divi s io n R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ divi s io n R esult ▁= ▁ ( ▁float ▁ ) ▁ ( ▁* divi d end ▁ ) ▁ / ▁ ( ▁* divisor ▁ ) ▁ ; ▁ @ ▁int ▁floor Value ▁= ▁floor ▁ ( ▁ divi s io n R esult ▁ ) ▁ ; ▁ @ ▁int ▁re ma inde r ▁= ▁ ( ▁* divi d end ▁ ) ▁ - ▁ ( ▁floor Value ▁* ▁ ( ▁* divisor ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁re ma inde r ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁small est ▁ ; ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁large st ▁= ▁ @ ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁ ) ▁ ? ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* c ▁ ) ▁ ? ▁ ( ▁* a ▁ ) ▁ : ▁ ( ▁* c ▁ ) ▁ ) ▁ : ▁ ( ▁ ( ▁* b ▁ ) ▁ > ▁ ( ▁* c ▁ ) ▁ ? ▁ ( ▁* b ▁ ) ▁ : ▁ ( ▁* c ▁ ) ▁ ) ▁ ; ▁ @ ▁small est ▁= ▁ @ ▁ ( ▁ ( ▁* a ▁ ) ▁< ▁ ( ▁* b ▁ ) ▁ ) ▁ ? ▁ ( ▁ ( ▁* a ▁ ) ▁< ▁ ( ▁* c ▁ ) ▁ ? ▁ ( ▁* a ▁ ) ▁ : ▁ ( ▁* c ▁ ) ▁ ) ▁ : ▁ ( ▁ ( ▁* b ▁ ) ▁< ▁ ( ▁* c ▁ ) ▁ ? ▁ ( ▁* b ▁ ) ▁ : ▁ ( ▁* c ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁small est ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* k mph ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁ ; ▁ @ ▁float ▁knots ▁ ; ▁ @ ▁ c onversion Factor ▁= ▁ 1 . 8 5 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁knots ▁= ▁ ( ▁* k mph ▁ ) ▁ / ▁ c onversion Factor ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁factor i al ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁factor i al ▁* = ▁i ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁factor i al ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ~ ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁result ▁= ▁result ▁& ▁0 x F F ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁min ▁ ; ▁ @ ▁int ▁hcf ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁min ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁< ▁ ( ▁* b ▁ ) ▁ ) ▁ ? ▁ ( ▁* a ▁ ) ▁ : ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁hcf ▁= ▁min ▁ ; ▁hcf ▁ > = ▁ 1 ▁ ; ▁hcf - - ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ % ▁hcf ▁= = ▁0 ▁& & ▁ ( ▁* b ▁ ) ▁ % ▁hcf ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁hcf ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ > = ▁ ( ▁* b ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ > = ▁ ( ▁* c ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁ > = ▁ ( ▁* c ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁is Divi s ible ▁= ▁ ( ▁* number ▁ ) ▁ % ▁ 5 ▁ ; ▁ @ ▁int ▁result ▁= ▁is Divi s ible ▁ ? ▁ ( ▁* number ▁ ) ▁+ ▁ 2 ▁ : ▁ ( ▁* number ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁char ▁* m e s s a ge ▁= ▁is Divi s ible ▁ ? ▁ " i s ▁ n o t ▁ divi s ible ▁ b y ▁ 5 . " ▁ : ▁ " i s ▁ divi s ible ▁ b y ▁ 5 . " ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ m e s s a ge ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* x ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁ ( ▁* x ▁ ) ▁+ ▁ 5 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁pi ▁= ▁3.14 1 6 ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁pi ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* grade ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁totalCount ▁= ▁0 ▁ ; ▁ @ ▁int ▁passCount ▁= ▁0 ▁ ; ▁ @ ▁float ▁ pas s Per c entag e ▁ ; ▁ @ ▁w h ile ▁ ( ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* grade ▁ ) ▁= = ▁ - 1 ▁ ) ▁ brea k ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* grade ▁ ) ▁< ▁0 ▁ | | ▁ ( ▁* grade ▁ ) ▁ > ▁100 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ cont in ue ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* grade ▁ ) ▁ > = ▁ 7 0 ▁ ) ▁passCount ++ ▁ ; ▁ @ ▁totalCount ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ pas s Per c entag e ▁= ▁totalCount ▁ > ▁0 ▁ ? ▁ ( ▁float ▁ ) ▁passCount ▁ / ▁totalCount ▁* ▁100 ▁ : ▁0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ pas s Per c entag e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* grad ian s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ radi an s ▁= ▁ ( ▁* grad ian s ▁ ) ▁* ▁ ( ▁3.14 ▁ / ▁ 2 00.0 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ surface A rea ▁= ▁ 2 ▁* ▁ ( ▁ ( ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* w id th ▁ ) ▁ ) ▁+ ▁ ( ▁ ( ▁* w id th ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ) ▁+ ▁ @ ▁ ( ▁ ( ▁* height ▁ ) ▁* ▁ ( ▁* length ▁ ) ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* e ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* c ▁ ) ▁ ) ▁ - ▁ ( ▁ ( ▁* d ▁ ) ▁+ ▁ ( ▁* e ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁& ▁ 1 ▁ ? ▁ ( ▁* max Row s ▁ ) ▁ : ▁ ( ▁ ( ▁* max Row s ▁ ) ▁+ = ▁ 1 ▁ ) ▁ ; ▁ @ ▁put s ▁ ( ▁"\ n --------------- --------------- --------------\ n " ▁ ) ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁int ▁col ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ if ▁ ( ▁col ▁= = ▁ ( ▁max Col s ▁+ ▁ 1 ▁ ) ▁ / ▁ 2 ▁ | | ▁ row ▁= = ▁ ( ▁max Col s ▁+ ▁ 1 ▁ ) ▁ / ▁ 2 ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* x ▁ ) ▁ , ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁pow ▁ ( ▁ ( ▁double ▁ ) ▁ ( ▁* x ▁ ) ▁ , ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* user ▁ ) ▁ , ▁int ▁ ( ▁* input ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ pas s wo rd ▁= ▁ 1 2 3 4 ▁ ; ▁ @ ▁char ▁ user n ame ▁ [ ▁ ] ▁= ▁ " a d m in " ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁str c mp ▁ ( ▁ ( ▁* user ▁ ) ▁ , ▁ user n ame ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* input ▁ ) ▁= = ▁ pas s wo rd ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* k m ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁mile ▁ ; ▁ @ ▁ ; ▁ @ ▁mile ▁= ▁ ( ▁* k m ▁ ) ▁ / ▁1.6 0 9 3 4 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* k m ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁mile ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ge nde r ▁ ) ▁ , ▁int ▁ ( ▁* a ge ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' M ' ▁ | | ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' m ' ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* a ge ▁ ) ▁< ▁18 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' F ' ▁ | | ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' f ' ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* a ge ▁ ) ▁< ▁18 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁ ) ▁ @ ▁ d if f ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁ d if f ▁= ▁ ( ▁* b ▁ ) ▁ - ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ fun 1 ▁ ( ▁vo id ▁ ) ▁ { ▁ @ ▁int ▁array ▁ [ ▁10 ▁ ] ▁= ▁ { ▁ 1 ▁ , ▁ 2 ▁ , ▁ 3 ▁ , ▁ 4 ▁ , ▁ 5 ▁ , ▁ 6 ▁ } ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ , ▁sum ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 6 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁= ▁sum ▁+ ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁ fun 1 ▁ ( ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁hcf ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁hcf ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁< ▁ ( ▁* b ▁ ) ▁ ) ▁ ? ▁ ( ▁* a ▁ ) ▁ : ▁ ( ▁* b ▁ ) ▁ ; ▁hcf ▁ > ▁0 ▁ ; ▁hcf - - ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ % ▁hcf ▁= = ▁0 ▁& & ▁ ( ▁* b ▁ ) ▁ % ▁hcf ▁= = ▁0 ▁ ) ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁hcf ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* t ext ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count S ▁ ; ▁ @ ▁int ▁count U ▁ ; ▁ @ ▁int ▁count L ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* t ext ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count L ▁= ▁count U ▁= ▁count S ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁ t ext ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁ t ext ▁ [ ▁i ▁ ] ▁ > = ▁ ' A ' ▁& & ▁ t ext ▁ [ ▁i ▁ ] ▁< = ▁ ' Z ' ▁ ) ▁ | | ▁ @ ▁ ( ▁ t ext ▁ [ ▁i ▁ ] ▁ > = ▁ ' a ' ▁& & ▁ t ext ▁ [ ▁i ▁ ] ▁< = ▁ ' z ' ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁ t ext ▁ [ ▁i ▁ ] ▁ > = ▁ ' A ' ▁& & ▁ t ext ▁ [ ▁i ▁ ] ▁< = ▁ ' Z ' ▁ ) ▁ ) ▁ { ▁ @ ▁count U ++ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁count L ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁count S ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count U ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁count L ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁count S ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁ ; ▁ @ ▁put s ▁ ( ▁"\ n --------------- --------------- --------------\ n " ▁ ) ▁ ; ▁ @ ▁int ▁space sIn C urrent Row ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁space sIn C urrent Row ▁= ▁ row ▁ - ▁ 1 ▁ ; ▁ @ ▁int ▁space ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁col ▁= ▁ row ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁col ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* b ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁temp ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁temp ▁ % ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* a ▁ ) ▁ > = ▁ ( ▁* b ▁ ) ▁& & ▁ ( ▁* a ▁ ) ▁ > = ▁ ( ▁* c ▁ ) ▁ ) ▁ ) ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁ ( ▁* b ▁ ) ▁ > = ▁ ( ▁* a ▁ ) ▁& & ▁ ( ▁* b ▁ ) ▁ > = ▁ ( ▁* c ▁ ) ▁ ) ▁ ) ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number 1 ▁ ) ▁ , ▁int ▁ ( ▁* number 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁fl ag ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* number 2 ▁ ) ▁< ▁ 2 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number 2 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁temp ▁= ▁ ( ▁* number 1 ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* number 1 ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* number 1 ▁ ) ▁= ▁ ( ▁* number 1 ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* number 1 ▁ ) ▁ ; ▁i ▁< = ▁ ( ▁* number 2 ▁ ) ▁ ; ▁i ▁= ▁i ▁+ ▁ 2 ▁ ) ▁ { ▁ @ ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 2 ▁ ; ▁j ▁< = ▁i ▁ / ▁ 2 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁i ▁ % ▁j ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fl ag ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ▁= ▁count ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁temp ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* number 2 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁int ▁multiplier ▁ ; ▁ @ ▁int ▁ base ▁ ; ▁ @ ▁fo r ▁ ( ▁ base ▁= ▁ 1 ▁ ; ▁ base ▁< = ▁10 ▁ ; ▁ base ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁multiplier ▁= ▁ 1 ▁ ; ▁multiplier ▁< = ▁ base ▁ ; ▁multiplier ++ ▁ ) ▁ { ▁ @ ▁result ▁= ▁ base ▁* ▁multiplier ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ square ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ square ▁< = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ square ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ square ▁= ▁i ▁* ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁fact ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁fact ▁* = ▁i ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁float ▁fact G e n era l ▁= ▁fact ▁ ; ▁ @ ▁float ▁fact S ci ent if ic ▁= ▁fact ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁fact G e n era l ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁fact S ci ent if ic ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁float ▁ square ▁ ; ▁ @ ▁ ; ▁ @ ▁ square ▁= ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁ ; ▁ @ ▁vol um e ▁= ▁ square ▁* ▁ ( ▁* side L ength ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* shift ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁result ▁= ▁ ( ▁* a ▁ ) ▁< < ▁ ( ▁* shift ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ge nde r ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' M ' ▁ | | ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' m ' ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' F ' ▁ | | ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' f ' ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁small est ▁ ; ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁large st ▁= ▁small est ▁= ▁arr ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ > ▁large st ▁ ) ▁ { ▁ @ ▁large st ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁< ▁small est ▁ ) ▁ { ▁ @ ▁small est ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁small est ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* p ▁ ) ▁ , ▁float ▁ ( ▁* q ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* p ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* q ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* p ▁ ) ▁! = ▁0 ▁& & ▁ ( ▁* q ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* p ▁ ) ▁= ▁ ( ▁* p ▁ ) ▁* ▁ ( ▁* q ▁ ) ▁ ; ▁ @ ▁ ( ▁* q ▁ ) ▁= ▁ ( ▁* p ▁ ) ▁ / ▁ ( ▁* q ▁ ) ▁ ; ▁ @ ▁ ( ▁* p ▁ ) ▁= ▁ ( ▁* p ▁ ) ▁ / ▁ ( ▁* q ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* p ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* q ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁loop ▁ ; ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁loop ▁= ▁ 1 ▁ ; ▁loop ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁loop ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁loop ▁= = ▁0 ▁ ) ▁sum ▁+ = ▁loop ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* input Value ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result S h if t ▁ ; ▁ @ ▁ ; ▁ @ ▁result S h if t ▁= ▁ ( ▁* input Value ▁ ) ▁< < ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result S h if t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ch ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* ch ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ ' a ' : ▁ @ ▁ case ▁ ' A ' : ▁ @ ▁ case ▁ ' e ' : ▁ @ ▁ case ▁ ' E ' : ▁ @ ▁ case ▁ ' i ' : ▁ @ ▁ case ▁ ' I ' : ▁ @ ▁ case ▁ ' o ' : ▁ @ ▁ case ▁ ' O ' : ▁ @ ▁ case ▁ ' u ' : ▁ @ ▁ case ▁ ' U ' : ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁default : ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* l ▁ ) ▁ , ▁float ▁ ( ▁* w ▁ ) ▁ , ▁float ▁ ( ▁* h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁* l ▁ ) ▁* ▁ ( ▁* w ▁ ) ▁ ; ▁ @ ▁vol ▁= ▁ ( ▁area ▁* ▁ ( ▁* h ▁ ) ▁ ) ▁ / ▁3.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁j ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁j ▁< = ▁i ▁ / ▁ 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁j ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* de ci mal ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ octa l ▁= ▁0 ▁ ; ▁ @ ▁int ▁ place Value ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ ; ▁ ( ▁* de ci mal ▁ ) ▁ > ▁0 ▁ ; ▁ ( ▁* de ci mal ▁ ) ▁ / = ▁ 8 ▁ ) ▁ { ▁ @ ▁ octa l ▁+ = ▁ ( ▁ ( ▁* de ci mal ▁ ) ▁ % ▁ 8 ▁ ) ▁* ▁ place Value ▁ ; ▁ @ ▁ place Value ▁* = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁result ▁= ▁ octa l ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁circum ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁3.14 2 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁circum ▁= ▁ 2 ▁* ▁3.14 2 ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁area R esult ▁= ▁area ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁float ▁circum R esult ▁= ▁circum ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁circum R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* li m _ u p ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ n ▁ ; ▁ @ ▁int ▁ prime ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* li m _ u p ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ n ▁= ▁ 1 ▁ ; ▁ n ▁< ▁ ( ▁* li m _ u p ▁ ) ▁ ; ▁ n ++ ▁ ) ▁ { ▁ @ ▁ prime ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< ▁ n ▁ ; ▁i ++ ▁ ) ▁ @ ▁ if ▁ ( ▁ n ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ prime ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ prime ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ n ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁arr an ge ▁ ( ▁int ▁ , ▁int ▁ ) ▁ ; ▁ @ ▁int ▁array ▁ [ ▁100 ▁ ] ▁ , ▁array 1 ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁i ▁ , ▁j ▁ , ▁temp ▁ , ▁max ▁ , ▁count ▁ , ▁max digit s ▁= ▁0 ▁ , ▁ c ▁= ▁0 ▁ ; ▁ @ ▁vo id ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* count ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ n ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ t ▁ ; ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁int ▁ t 2 ▁ ; ▁ @ ▁int ▁ t 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁array 1 ▁ [ ▁i ▁ ] ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ t ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁w h ile ▁ ( ▁ t ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ c ++ ▁ ; ▁ @ ▁ t ▁= ▁ t ▁ / ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁max digit s ▁< ▁ c ▁ ) ▁max digit s ▁= ▁ c ▁ ; ▁ @ ▁ c ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁ - - max digit s ▁ ) ▁ n ▁= ▁ n ▁* ▁10 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁max ▁= ▁array ▁ [ ▁i ▁ ] ▁ / ▁ n ▁ ; ▁ @ ▁ t ▁= ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁max ▁ > ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ / ▁ n ▁ ) ▁ ) ▁ { ▁ @ ▁max ▁= ▁array ▁ [ ▁j ▁ ] ▁ / ▁ n ▁ ; ▁ @ ▁ t ▁= ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁temp ▁= ▁array 1 ▁ [ ▁ t ▁ ] ▁ ; ▁ @ ▁array 1 ▁ [ ▁ t ▁ ] ▁= ▁array 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁array 1 ▁ [ ▁i ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁temp ▁= ▁array ▁ [ ▁ t ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁ t ▁ ] ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁i ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁ n ▁ > = ▁ 1 ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁ ) ▁ { ▁ @ ▁ t 1 ▁= ▁array ▁ [ ▁i ▁ ] ▁ / ▁ n ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ t 1 ▁= = ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ / ▁ n ▁ ) ▁ ; ▁j ++ ▁ ) ▁ @ ▁ ; ▁ @ ▁arr an ge ▁ ( ▁i ▁ , ▁j ▁ ) ▁ ; ▁ @ ▁i ▁= ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁ n ▁= ▁ n ▁ / ▁10 ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁array 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁arr an ge ▁ ( ▁int ▁ k ▁ , ▁int ▁ n ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ k ▁ ; ▁i ▁< ▁ n ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ n ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array 1 ▁ [ ▁i ▁ ] ▁ > ▁array 1 ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁array 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁array 1 ▁ [ ▁i ▁ ] ▁= ▁array 1 ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array 1 ▁ [ ▁j ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁temp ▁= ▁ ( ▁array ▁ [ ▁i ▁ ] ▁ % ▁10 ▁ ) ▁ ; ▁ @ ▁array ▁ [ ▁i ▁ ] ▁= ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ % ▁10 ▁ ) ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* sides ▁ ) ▁ , ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁tan Value ▁ ; ▁ @ ▁float ▁ po l y g o n A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁tan Value ▁= ▁tan ▁ ( ▁ M _ P I ▁ / ▁ ( ▁* sides ▁ ) ▁ ) ▁ ; ▁ @ ▁ po l y g o n A rea ▁= ▁ ( ▁ ( ▁* sides ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁ ) ▁ / ▁ ( ▁ 4 ▁* ▁tan Value ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ po l y g o n A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* input S p e ed ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ converted S p e ed ▁ ; ▁ @ ▁ ; ▁ @ ▁ converted S p e ed ▁= ▁ ( ▁* input S p e ed ▁ ) ▁* ▁0 . 6 2 1 3 7 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ converted S p e ed ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁float ▁pi ▁= ▁3.14159 ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁4.0 ▁ / ▁3.0 ▁ ) ▁* ▁pi ▁* ▁ ( ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁char ▁ b u f f ▁ [ ▁ 3 ▁ ] ▁ [ ▁50 ▁ ] ▁= ▁ { ▁ " He l lo ▁func tion " ▁ , ▁ " Ho w ▁ are ▁ y o u ? " ▁ , ▁ " C a tch ▁ s o m e ▁ string s " ▁ } ▁ ; ▁ @ ▁vo id ▁ Str fun ▁ ( ▁int ▁count ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁count ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁put s ▁ ( ▁ b u f f ▁ [ ▁i ▁ ] ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁ Str fun ▁ ( ▁ 3 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁swap p ed ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁swap p ed ▁= ▁0 ▁ ; ▁ @ ▁j ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁j ▁< ▁ ( ▁* num ▁ ) ▁ - ▁i ▁ - ▁ 1 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ > ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁swap p ed ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁j ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁swap p ed ▁= = ▁0 ▁ ) ▁ brea k ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ s o u r ce Array ▁ [ ▁10 ▁ ] ▁= ▁ { ▁ 5 ▁ , ▁10 ▁ , ▁ 1 5 ▁ , ▁20 ▁ , ▁25 ▁ , ▁30 ▁ , ▁ 3 5 ▁ , ▁ 4 0 ▁ , ▁ 4 5 ▁ , ▁50 ▁ } ▁ ; ▁ @ ▁int ▁ d est in ation Array ▁ [ ▁10 ▁ ] ▁ ; ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁ 9 ▁ ; ▁ k ▁ > = ▁0 ▁ ; ▁ k - - ▁ ) ▁ { ▁ @ ▁ d est in ation Array ▁ [ ▁ 9 ▁ - ▁ k ▁ ] ▁= ▁ s o u r ce Array ▁ [ ▁ k ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁0 ▁ ; ▁ k ▁< ▁10 ▁ ; ▁ k ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ k ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ d est in ation Array ▁ [ ▁ k ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁fl ag ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ - ▁i ▁ - ▁ 1 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ > ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fl ag ▁= = ▁0 ▁ ) ▁ brea k ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 5 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁fib 1 ▁= ▁0 ▁ ; ▁ @ ▁int ▁fib 2 ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁fib N ext ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* l ower ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁fib 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* upper ▁ ) ▁= = ▁0 ▁ ) ▁re tur n ▁0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁fib 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* l ower ▁ ) ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁fib 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fib N ext ▁= ▁fib 1 ▁+ ▁fib 2 ▁ ; ▁ @ ▁w h ile ▁ ( ▁fib N ext ▁< = ▁ ( ▁* upper ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁fib N ext ▁ > = ▁ ( ▁* l ower ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁fib N ext ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fib 1 ▁= ▁fib 2 ▁ ; ▁ @ ▁fib 2 ▁= ▁fib N ext ▁ ; ▁ @ ▁fib N ext ▁= ▁fib 1 ▁+ ▁fib 2 ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁& & ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* c ▁ ) ▁ ) ▁ @ ▁large st ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁ > ▁ ( ▁* a ▁ ) ▁& & ▁ ( ▁* b ▁ ) ▁ > ▁ ( ▁* c ▁ ) ▁ ) ▁ @ ▁large st ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁large st ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁ divi s ible ▁= ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 5 ▁= = ▁0 ▁ ) ▁ ? ▁ 1 ▁ : ▁0 ▁ ; ▁ @ ▁int ▁result ▁= ▁ divi s ible ▁ ? ▁ ( ▁* number ▁ ) ▁+ ▁ 1 ▁ : ▁ ( ▁* number ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ if ▁ ( ▁ divi s ible ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁original Array ▁ [ ▁10 ▁ ] ▁= ▁ { ▁ 1 ▁ , ▁ 2 ▁ , ▁ 3 ▁ , ▁ 4 ▁ , ▁ 5 ▁ , ▁ 6 ▁ , ▁ 7 ▁ , ▁ 8 ▁ , ▁ 9 ▁ , ▁10 ▁ } ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ copy Array ▁ [ ▁10 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁original Array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ copy Array ▁ [ ▁i ▁ ] ▁= ▁original Array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ copy Array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁circum fer e nce ▁= ▁ @ ▁ 3 .141592653589793 2 384 6 ▁* ▁ @ ▁ ( ▁ 3 ▁* ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ) ▁ - ▁sqrt ▁ ( ▁ ( ▁ 3 ▁* ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ) ▁* ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ 3 ▁* ▁ ( ▁* b ▁ ) ▁ ) ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* dd ▁ ) ▁ , ▁int ▁ ( ▁* mm ▁ ) ▁ , ▁int ▁ ( ▁* y y ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁isValid Dat e ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* y y ▁ ) ▁ > = ▁ 1 9 00 ▁& & ▁ ( ▁* y y ▁ ) ▁< = ▁ 9 9 9 9 ▁ ) ▁ { ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* mm ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ 1 : ▁ @ ▁ case ▁ 3 : ▁ @ ▁ case ▁ 5 : ▁ @ ▁ case ▁ 7 : ▁ @ ▁ case ▁ 8 : ▁ @ ▁ case ▁10 : ▁ @ ▁ case ▁ 1 2 : ▁ @ ▁isValid Dat e ▁= ▁ ( ▁* dd ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* dd ▁ ) ▁< = ▁ 3 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 4 : ▁ @ ▁ case ▁ 6 : ▁ @ ▁ case ▁ 9 : ▁ @ ▁ case ▁ 1 1 : ▁ @ ▁isValid Dat e ▁= ▁ ( ▁* dd ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* dd ▁ ) ▁< = ▁30 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 2 : ▁ @ ▁isValid Dat e ▁= ▁ ( ▁ ( ▁* dd ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* dd ▁ ) ▁< = ▁ 2 8 ▁ ) ▁ | | ▁ @ ▁ ( ▁ ( ▁* dd ▁ ) ▁= = ▁ 2 9 ▁& & ▁ ( ▁ ( ▁* y y ▁ ) ▁ % ▁ 4 00 ▁= = ▁0 ▁ | | ▁ @ ▁ ( ▁ ( ▁* y y ▁ ) ▁ % ▁ 4 ▁= = ▁0 ▁& & ▁ ( ▁* y y ▁ ) ▁ % ▁100 ▁! = ▁0 ▁ ) ▁ ) ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ @ ▁isValid Dat e ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁isValid Dat e ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* search Digit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁temp ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁ if ▁ ( ▁temp ▁ % ▁10 ▁= = ▁ ( ▁* search Digit ▁ ) ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁temp ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁temp ▁ > ▁0 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* search Digit ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 7 ▁= = ▁0 ▁ ) ▁ | | ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 3 ▁= = ▁0 ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mm ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ inches ▁= ▁ ( ▁* mm ▁ ) ▁ / ▁25 . 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* mm ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁float ▁sum ▁= ▁ 0.0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* N ▁ ) ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁1.0 ▁ / ▁i ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁float ▁av g ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁av g ▁= ▁ ( ▁float ▁ ) ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁av g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁ c ▁= ▁0 ▁ ; ▁ @ ▁int ▁ b ▁= ▁ 2 ▁ ; ▁ @ ▁int ▁ a ▁= ▁ 1 ▁ ; ▁ @ ▁ if ▁ ( ▁ a < b ▁ , ▁ b > ▁ c ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ radius Cub ed ▁ ; ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ radius Cub ed ▁= ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁4.0 f ▁ / ▁3.0 f ▁ ) ▁* ▁ M _ P I ▁* ▁ radius Cub ed ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* upper ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁i ▁< = ▁ ( ▁* upper ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁int ▁ n ▁= ▁0 ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁int ▁temp ▁= ▁i ▁ ; ▁ @ ▁w h ile ▁ ( ▁temp ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁temp ▁ / = ▁10 ▁ ; ▁ @ ▁ n ++ ▁ ; ▁ @ ▁ } ▁ @ ▁temp ▁= ▁i ▁ ; ▁ @ ▁w h ile ▁ ( ▁temp ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁re ma inde r ▁= ▁temp ▁ % ▁10 ▁ ; ▁ @ ▁sum ▁+ = ▁pow ▁ ( ▁re ma inde r ▁ , ▁ n ▁ ) ▁ ; ▁ @ ▁temp ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁float ▁sum ▁= ▁ 0.0 ▁ ; ▁ @ ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁sum ▁+ = ▁1.0 ▁ / ▁i ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* N ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* start ▁ ) ▁ , ▁int ▁ ( ▁* end ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁i ▁< = ▁ ( ▁* end ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ / ▁ 2 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁sum ▁= ▁sum ▁+ ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁i ▁& & ▁i ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁count ▁= ▁count ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* m ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ y ▁ ; ▁ @ ▁ ; ▁ @ ▁ y ▁= ▁ ( ▁* m ▁ ) ▁* ▁1.0 9 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* m ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ y ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ queue ▁ [ ▁50 ▁ ] ▁ ; ▁ @ ▁int ▁re ar ▁= ▁ - 1 ▁ ; ▁ @ ▁int ▁front ▁= ▁ - 1 ▁ ; ▁ @ ▁vo id ▁ e n queue ▁ ( ▁int ▁ value ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁re ar ▁< ▁50 ▁ - ▁ 1 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁front ▁= = ▁ - 1 ▁ ) ▁front ▁= ▁0 ▁ ; ▁ @ ▁re ar ++ ▁ ; ▁ @ ▁ queue ▁ [ ▁re ar ▁ ] ▁= ▁ value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁ de queue ▁ ( ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁front ▁= = ▁ - 1 ▁ | | ▁front ▁ > ▁re ar ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁front ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁ s h o w Q ue ue ▁ ( ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁front ▁= = ▁ - 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁int ▁i ▁= ▁front ▁ ; ▁i ▁< = ▁re ar ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* ch oi ce ▁ ) ▁ , ▁int ▁ ( ▁* value ▁ ) ▁ ) ▁ { ▁ @ ▁do ▁ { ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* ch oi ce ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ 1 : ▁ ; ▁ @ ▁ e n queue ▁ ( ▁ ( ▁* value ▁ ) ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 2 : ▁ @ ▁ de queue ▁ ( ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 3 : ▁ @ ▁ s h o w Q ue ue ▁ ( ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 4 : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁w h ile ▁ ( ▁ ( ▁* ch oi ce ▁ ) ▁! = ▁ 4 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁arr ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁dig ▁ ; ▁ @ ▁int ▁ rev Number ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ ; ▁ ( ▁* n ▁ ) ▁ > ▁0 ▁ ; ▁ ( ▁* n ▁ ) ▁ / = ▁10 ▁ ) ▁ { ▁ @ ▁dig ▁= ▁ ( ▁* n ▁ ) ▁ % ▁10 ▁ ; ▁ @ ▁ rev Number ▁= ▁ rev Number ▁* ▁10 ▁+ ▁dig ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ rev Number ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁total E d ge L ength ▁ ; ▁ @ ▁ ; ▁ @ ▁total E d ge L ength ▁= ▁ 4 ▁* ▁ ( ▁ ( ▁* length ▁ ) ▁+ ▁ ( ▁* w id th ▁ ) ▁+ ▁ ( ▁* height ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁total E d ge L ength ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* count ▁ ) ▁ , ▁int ▁ ( ▁* num s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ y ▁ ; ▁ @ ▁int ▁ x ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ x ▁= ▁0 ▁ ; ▁ x ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁ x ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ x ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ x ▁= ▁ 1 ▁ ; ▁ x ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁ x ++ ▁ ) ▁ { ▁ @ ▁temp ▁= ▁ num s ▁ [ ▁ x ▁ ] ▁ ; ▁ @ ▁fo r ▁ ( ▁ y ▁= ▁ x ▁ ; ▁ y ▁ > ▁0 ▁& & ▁ num s ▁ [ ▁ y ▁ - ▁ 1 ▁ ] ▁ > ▁temp ▁ ; ▁ y - - ▁ ) ▁ { ▁ @ ▁ num s ▁ [ ▁ y ▁ ] ▁= ▁ num s ▁ [ ▁ y ▁ - ▁ 1 ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ num s ▁ [ ▁ y ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁ x ▁= ▁0 ▁ ; ▁ x ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁ x ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ num s ▁ [ ▁ x ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁is T riangular ▁ ( ▁int ▁ num ▁ ) ▁ { ▁ @ ▁int ▁ n ▁ ; ▁ @ ▁ if ▁ ( ▁ num ▁< ▁0 ▁ ) ▁re tur n ▁0 ▁ ; ▁ @ ▁ n ▁= ▁ ( ▁ - 1 ▁+ ▁sqrt ▁ ( ▁ 1 ▁+ ▁ 8 ▁* ▁ num ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁re tur n ▁ n ▁= = ▁ ( ▁int ▁ ) ▁ n ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* upper ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ num ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ num ▁< = ▁ ( ▁* upper ▁ ) ▁ ; ▁ num ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁is T riangular ▁ ( ▁ num ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* e ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ - ▁ ( ▁* c ▁ ) ▁ - ▁ ( ▁* d ▁ ) ▁ - ▁ ( ▁* e ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ d if f ▁= ▁ a b s ▁ ( ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* ki lo meters ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁mile s ▁= ▁ ( ▁* ki lo meters ▁ ) ▁* ▁0 . 6 2 1 3 7 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* ki lo meters ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁print U pper C a se ▁ ( ▁ ) ▁ { ▁ @ ▁char ▁ ch ▁= ▁ ' A ' ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ch ▁< = ▁ ' Z ' ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ch ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁print Lower C a se ▁ ( ▁ ) ▁ { ▁ @ ▁char ▁ ch ▁= ▁ ' a ' ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ch ▁< = ▁ ' z ' ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ch ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁print U pper C a se ▁ ( ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁print Lower C a se ▁ ( ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁char ▁ b u f f ▁ [ ▁20 ▁ ] ▁= ▁ " He l lo ▁ Fun c tion " ▁ ; ▁ @ ▁vo id ▁ Str fun ▁ ( ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁ Str fun ▁ ( ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁ u nsi gn ed ▁ long ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ u nsi gn ed ▁ long ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁ ( ▁ ( ▁* N ▁ ) ▁* ▁ ( ▁ ( ▁* N ▁ ) ▁+ ▁ 1 ▁ ) ▁* ▁ ( ▁ 2 ▁* ▁ ( ▁* N ▁ ) ▁+ ▁ 1 ▁ ) ▁ ) ▁ / ▁ 6 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c o e f f i ci ent ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ c o e f f i ci ent ▁= ▁ 2 ▁* ▁ ( ▁ 1 ▁+ ▁sqrt ▁ ( ▁ 2 ▁ ) ▁ ) ▁ ; ▁ @ ▁area ▁= ▁ ( ▁* side ▁ ) ▁* ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁area ▁* = ▁ c o e f f i ci ent ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* a ▁ ) ▁! = ▁ ( ▁* b ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ - ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁char ▁ ( ▁* ch ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁0 ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* ch ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ ' + ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁+ ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' - ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁ - ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁'*' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁* ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' / ' : ▁ @ ▁result ▁= ▁ ( ▁float ▁ ) ▁ ( ▁* num 1 ▁ ) ▁ / ▁ ( ▁float ▁ ) ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' % ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁ % ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mph ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁knots ▁= ▁ ( ▁* mph ▁ ) ▁* ▁0 . 8 6 8 9 7 6 f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* n ame ▁ ) ▁ , ▁int ▁ ( ▁* a ge ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁disc ount ▁= ▁0 . 7 f ▁ ; ▁ @ ▁float ▁pri ce ▁= ▁ 6 00.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ge ▁ ) ▁< ▁ 6 ▁ | | ▁ ( ▁* a ge ▁ ) ▁ > = ▁ 6 0 ▁ ) ▁ { ▁ @ ▁pri ce ▁* = ▁disc ount ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁pri ce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁cube ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁cube ▁< = ▁ ( ▁* limit ▁ ) ▁& & ▁cube ▁ > ▁0 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁cube ▁= ▁i ▁* ▁i ▁* ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁cube ▁< = ▁ ( ▁* limit ▁ ) ▁& & ▁cube ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁count ▁= ▁count ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* arr 1 ▁ ) ▁ , ▁int ▁ ( ▁* arr 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁arr 3 ▁ [ ▁10 ▁ ] ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁arr 3 ▁ [ ▁i ▁ ] ▁= ▁arr 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁arr 3 ▁ [ ▁i ▁+ ▁ 5 ▁ ] ▁= ▁arr 2 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁arr 3 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 7 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 5 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁temp ▁= ▁ ( ▁* num ▁ ) ▁ - ▁ 1 ▁ ; ▁ @ ▁temp ▁= ▁temp ▁+ ▁ 1 ▁ ; ▁ @ ▁ if ▁ ( ▁temp ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁temp ▁ - ▁ ( ▁* num ▁ ) ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁1.0 ▁ / ▁ 3 ▁ ) ▁* ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ ge t B in a ry V 3 ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁i ▁= ▁ 1 5 ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁ - - i ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ge t B in a ry V 3 ▁ ( ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁mid ▁ ; ▁ @ ▁int ▁small est ▁ ; ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁mid ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁ > ▁mid ▁ ) ▁mid ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁ > ▁mid ▁ ) ▁ @ ▁large st ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁large st ▁= ▁mid ▁ ; ▁ @ ▁mid ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁< ▁mid ▁ ) ▁mid ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁< ▁mid ▁ ) ▁ @ ▁small est ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁small est ▁= ▁mid ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁small est ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* height M ▁ ) ▁ , ▁float ▁ ( ▁* w eight ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ b mi ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ( ▁* height M ▁ ) ▁= ▁ ( ▁* height M ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ b mi ▁= ▁ ( ▁* w eight ▁ ) ▁ / ▁ ( ▁ ( ▁* height M ▁ ) ▁* ▁ ( ▁* height M ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ b mi ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ b mi ▁< = ▁18 .5 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ b mi ▁ > ▁18 .5 ▁& & ▁ b mi ▁< = ▁ 2 4 . 9 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ b mi ▁ > = ▁25 ▁& & ▁ b mi ▁< = ▁ 2 9 . 9 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁j ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁ > = ▁ 1 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁j ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁ > = ▁ 1 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁ ; ▁j ▁ > = ▁ 1 ▁ ; ▁j - - ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁j ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* count ▁ ) ▁ , ▁int ▁ ( ▁* num s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁swap ▁ ; ▁ @ ▁int ▁ l ▁ ; ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁0 ▁ ; ▁ k ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁ k ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ k ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁0 ▁ ; ▁ k ▁< ▁ ( ▁* count ▁ ) ▁ - ▁ 1 ▁ ; ▁ k ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁ l ▁= ▁0 ▁ ; ▁ l ▁< ▁ ( ▁* count ▁ ) ▁ - ▁ k ▁ - ▁ 1 ▁ ; ▁ l ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num s ▁ [ ▁ l ▁ ] ▁< ▁ num s ▁ [ ▁ l ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁swap ▁= ▁ num s ▁ [ ▁ l ▁ ] ▁ ; ▁ @ ▁ num s ▁ [ ▁ l ▁ ] ▁= ▁ num s ▁ [ ▁ l ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ num s ▁ [ ▁ l ▁+ ▁ 1 ▁ ] ▁= ▁swap ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁0 ▁ ; ▁ k ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁ k ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ num s ▁ [ ▁ k ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ digit ▁ ; ▁ @ ▁int ▁reverse d ▁ ; ▁ @ ▁int ▁ num ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁original Num ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ num ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ num ▁< = ▁ ( ▁* upper ▁ ) ▁ ; ▁ num ++ ▁ ) ▁ { ▁ @ ▁reverse d ▁= ▁0 ▁ ; ▁ @ ▁original Num ▁= ▁ num ▁ ; ▁ @ ▁temp ▁= ▁ num ▁ ; ▁ @ ▁w h ile ▁ ( ▁temp ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ digit ▁= ▁temp ▁ % ▁10 ▁ ; ▁ @ ▁reverse d ▁= ▁reverse d ▁* ▁10 ▁+ ▁ digit ▁ ; ▁ @ ▁temp ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁original Num ▁= = ▁reverse d ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁original Num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ~ ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁mul ▁= ▁0 ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁count ▁< ▁ ( ▁* b ▁ ) ▁ ) ▁ { ▁ @ ▁mul ▁+ = ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁mul ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* sides Count ▁ ) ▁ , ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ po l y g o n Per imeter ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ po l y g o n Per imeter ▁= ▁ ( ▁* sides Count ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ po l y g o n Per imeter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ base _ size ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ size _ char ▁= ▁ base _ size ▁ ; ▁ @ ▁int ▁ size _ int ▁= ▁ size of ▁ ( ▁int ▁ ) ▁ / ▁ size _ char ▁ ; ▁ @ ▁int ▁ size _ f lo at ▁= ▁ size of ▁ ( ▁float ▁ ) ▁ / ▁ size _ char ▁ ; ▁ @ ▁int ▁ size _ long _ int ▁= ▁ size of ▁ ( ▁ long ▁int ▁ ) ▁ / ▁ size _ char ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ size _ char ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ size _ int ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ size _ f lo at ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ size _ long _ int ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* start ▁ ) ▁ , ▁int ▁ ( ▁* end ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁i ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* end ▁ ) ▁ ) ▁ { ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ / ▁ 2 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁sum ▁+ = ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁i ▁& & ▁i ▁! = ▁0 ▁ ) ▁count ++ ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* square Side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁ square A rea ▁= ▁ ( ▁* square Side ▁ ) ▁* ▁ ( ▁* square Side ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ square A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* e ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁+ ▁ ( ▁* e ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius 1 ▁ ) ▁ , ▁float ▁ ( ▁* radius 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁total ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁total ▁= ▁ 2 ▁* ▁3.14159 ▁* ▁ ( ▁* radius 1 ▁ ) ▁+ ▁ 2 ▁* ▁3.14159 ▁* ▁ ( ▁* radius 2 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁total ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁cnt ▁ ; ▁ @ ▁int ▁oct ▁ [ ▁32 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁cnt ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* number ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁oct ▁ [ ▁cnt ▁ ] ▁= ▁ ( ▁* number ▁ ) ▁ % ▁ 8 ▁ ; ▁ @ ▁ ( ▁* number ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ / ▁ 8 ▁ ; ▁ @ ▁cnt ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁cnt ▁ - ▁ 1 ▁ ) ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁oct ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number O f C onversion s ▁ ) ▁ , ▁float ▁ ( ▁* feet ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ inches ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* number O f C onversion s ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ inches ▁= ▁ ( ▁* feet ▁ ) ▁* ▁12.0 f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* at m ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁ ; ▁ @ ▁float ▁ mm H g ▁ ; ▁ @ ▁ c onversion Factor ▁= ▁ 7 6 0.0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ mm H g ▁= ▁ ( ▁* at m ▁ ) ▁* ▁ c onversion Factor ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 7 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* con f i r m ▁ ) ▁ , ▁float ▁ ( ▁* inches ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* con f i r m ▁ ) ▁= = ▁ ' y ' ▁ | | ▁ ( ▁* con f i r m ▁ ) ▁= = ▁ ' Y ' ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ feet ▁= ▁ ( ▁* inches ▁ ) ▁ / ▁12.0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ feet ▁= ▁ ( ▁* meters ▁ ) ▁ / ▁0 . 3 0 4 8 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁odd ▁ ; ▁ @ ▁int ▁even ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ / ▁2.0 ▁ - ▁ ( ▁* num ▁ ) ▁ / ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁even ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁even ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁odd ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁odd ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁float ▁pi ▁= ▁3.14159 ▁ ; ▁ @ ▁ ; ▁ @ ▁ surface A rea ▁= ▁ 4 ▁* ▁pi ▁* ▁ ( ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* number s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ number s ▁ [ ▁i ▁ ] ▁ > ▁ number s ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁ number s ▁ [ ▁i ▁ ] ▁= ▁ number s ▁ [ ▁i ▁ ] ▁+ ▁ number s ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ number s ▁ [ ▁j ▁ ] ▁= ▁ number s ▁ [ ▁i ▁ ] ▁ - ▁ number s ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ number s ▁ [ ▁i ▁ ] ▁= ▁ number s ▁ [ ▁i ▁ ] ▁ - ▁ number s ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ number s ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁area ▁= ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* w id th ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* basic Pa y ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁employer Fun d ▁ ; ▁ @ ▁float ▁employee Fun d ▁ ; ▁ @ ▁float ▁employee Per c entag e ▁= ▁ 1 2 .5 f ▁ ; ▁ @ ▁float ▁employer Per c entag e ▁= ▁12.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁employee Fun d ▁= ▁ ( ▁ ( ▁* basic Pa y ▁ ) ▁* ▁employee Per c entag e ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁employer Fun d ▁= ▁ ( ▁ ( ▁* basic Pa y ▁ ) ▁* ▁employer Per c entag e ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* basic Pa y ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁employee Fun d ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁employer Fun d ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ ( ▁* c ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* c ▁ ) ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* c ▁ ) ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* c ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* in ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c m ▁ ; ▁ @ ▁ ; ▁ @ ▁ c m ▁= ▁ ( ▁* in ▁ ) ▁* ▁ 2 .5 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* in ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ c m ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ( ▁* num 1 ▁ ) ▁= ▁ f a b s ▁ ( ▁ ( ▁* num 1 ▁ ) ▁ ) ▁ ; ▁ @ ▁ ( ▁* num 2 ▁ ) ▁= ▁ f a b s ▁ ( ▁ ( ▁* num 2 ▁ ) ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* num 1 ▁ ) ▁! = ▁ ( ▁* num 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* num 1 ▁ ) ▁ > ▁ ( ▁* num 2 ▁ ) ▁ ) ▁ @ ▁ ( ▁* num 1 ▁ ) ▁ - = ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁ ( ▁* num 2 ▁ ) ▁ - = ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* w att s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ h or se power ▁ ; ▁ @ ▁ ; ▁ @ ▁ h or se power ▁= ▁ ( ▁* w att s ▁ ) ▁ / ▁746 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ h or se power ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ~ ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is Prime ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁= = ▁ 2 ▁ ) ▁ @ ▁is Prime ▁= ▁ 1 ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< ▁ 2 ▁ | | ▁ ( ▁* n ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ @ ▁is Prime ▁= ▁0 ▁ ; ▁ @ ▁el se ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 3 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ / ▁ 2 ▁ ; ▁i ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Prime ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* c m _ input ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ in ch _ output ▁ ; ▁ @ ▁ ; ▁ @ ▁ in ch _ output ▁= ▁ ( ▁* c m _ input ▁ ) ▁ / ▁ 2 .5 4 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* c m _ input ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ in ch _ output ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* pressureIn Pa s cal s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ pressureIn M m H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ pressureIn M m H g ▁= ▁ ( ▁* pressureIn Pa s cal s ▁ ) ▁* ▁ 0.0 0 7 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ pressureIn M m H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* h or se power ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁w att s ▁ ; ▁ @ ▁ ; ▁ @ ▁w att s ▁= ▁ ( ▁* h or se power ▁ ) ▁* ▁746 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁w att s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁sqrt ▁ ( ▁ 3 ▁ ) ▁ / ▁ 4 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* h ▁ ) ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* o per ation ▁ ) ▁ , ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* o per ation ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ ' + ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁+ ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' - ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁ - ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁'*' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁* ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' / ' : ▁ @ ▁ if ▁ ( ▁ ( ▁* num 2 ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁ / ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁ ( ▁* num ▁ ) ▁* ▁ 2 ▁ ) ▁+ ▁ 1 ▁ ) ▁= = ▁ ( ▁ ( ▁ ( ▁* num ▁ ) ▁+ ▁ 1 ▁ ) ▁* ▁ 2 ▁ ) ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mph ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁knots ▁= ▁ ( ▁* mph ▁ ) ▁ / ▁ 1 . 1 5 0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 7 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 8 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 9 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 0 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ a ▁= ▁ 8 7 ▁ ; ▁ @ ▁float ▁ b ▁= ▁ 4 .5 ▁ ; ▁ @ ▁int ▁* p 1 ▁= ▁& a ▁ ; ▁ @ ▁float ▁* p 2 ▁= ▁& b ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ p 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ p 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁& p 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁& p 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁* p 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 7 ▁ ) ▁= ▁* ▁ ( ▁& a ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 8 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ( ▁* temptemp 9 ▁ ) ▁= ▁* p 2 ▁ ; ▁ @ ▁ ( ▁* temptemp 1 0 ▁ ) ▁= ▁* ▁ ( ▁& b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* x ▁ ) ▁ , ▁int ▁ ( ▁* y ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁av era ge ▁ ; ▁ @ ▁float ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁ ( ▁* x ▁ ) ▁+ ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁av era ge ▁= ▁sum ▁ / ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁av era ge ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁put s ▁ ( ▁ " He l lo ▁ W or l d ! " ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁fl i p ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ 8 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ▁= ▁count ▁= = ▁ 1 ▁ ? ▁0 ▁ : ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fl i p ▁ ) ▁ { ▁ @ ▁count ▁= ▁0 ▁ ; ▁ @ ▁fl i p ▁= ▁0 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁fl i p ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ totalS um ▁ ; ▁ @ ▁float ▁av era ge ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ totalS um ▁= ▁ ( ▁* num 1 ▁ ) ▁+ ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁av era ge ▁= ▁ totalS um ▁ / ▁2.0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ totalS um ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁av era ge ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mm ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ in ▁ ; ▁ @ ▁ ; ▁ @ ▁ in ▁= ▁ ( ▁* mm ▁ ) ▁ / ▁25 . 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* mm ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ in ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁ s a ▁= ▁ 6 ▁ ; ▁ @ ▁ s a ▁* = ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* length ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ s a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁temp ▁ ; ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁temp ▁= ▁pow ▁ ( ▁ ( ▁* radius ▁ ) ▁ , ▁ 3 ▁ ) ▁ ; ▁ @ ▁vol um e ▁= ▁temp ▁* ▁ M _ P I ▁* ▁4.0 f ▁ / ▁3.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* n ame ▁ ) ▁ , ▁float ▁ ( ▁* basic ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ t a x ▁ ; ▁ @ ▁float ▁ n e t ▁ ; ▁ @ ▁float ▁gr os s ▁ ; ▁ @ ▁float ▁ p f ▁ ; ▁ @ ▁float ▁ hra ▁ ; ▁ @ ▁float ▁da ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ p f ▁= ▁ 0.0 8 ▁* ▁ ( ▁* basic ▁ ) ▁ ; ▁ @ ▁da ▁= ▁ ( ▁ ( ▁* basic ▁ ) ▁ > = ▁100 00 ▁ ) ▁ @ ▁ ? ▁0 .5 ▁* ▁ ( ▁* basic ▁ ) ▁ @ ▁ : ▁ ( ▁ ( ▁ ( ▁* basic ▁ ) ▁ > = ▁500 0 ▁ ) ▁ ? ▁0 . 4 ▁* ▁ ( ▁* basic ▁ ) ▁ : ▁0 . 3 ▁* ▁ ( ▁* basic ▁ ) ▁ ) ▁ ; ▁ @ ▁ hra ▁= ▁ ( ▁ ( ▁* basic ▁ ) ▁ > = ▁100 00 ▁ ) ▁ @ ▁ ? ▁0 . 2 ▁* ▁ ( ▁* basic ▁ ) ▁ @ ▁ : ▁ ( ▁ ( ▁ ( ▁* basic ▁ ) ▁ > = ▁500 0 ▁ ) ▁ ? ▁0 . 1 ▁* ▁ ( ▁* basic ▁ ) ▁ : ▁ 0.0 8 ▁* ▁ ( ▁* basic ▁ ) ▁ ) ▁ ; ▁ @ ▁gr os s ▁= ▁ ( ▁* basic ▁ ) ▁+ ▁da ▁+ ▁ hra ▁ ; ▁ @ ▁ t a x ▁= ▁ 0.0 7 ▁* ▁gr os s ▁ ; ▁ @ ▁ n e t ▁= ▁gr os s ▁ - ▁ t a x ▁ - ▁ p f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁gr os s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ n e t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ) ▁ / ▁ ( ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁add T wo Number s ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ { ▁re tur n ▁ x ▁+ ▁ y ▁ ; ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁ b ▁ ; ▁ @ ▁int ▁ a ▁ ; ▁ @ ▁int ▁ ( ▁* ptr _ s um ▁ ) ▁ ( ▁int ▁ , ▁int ▁ ) ▁ ; ▁ @ ▁ ptr _ s um ▁= ▁& a dd T wo Number s ▁ ; ▁ @ ▁ a ▁= ▁10 ▁ ; ▁ @ ▁ b ▁= ▁20 ▁ ; ▁ @ ▁sum ▁= ▁ ( ▁* ptr _ s um ▁ ) ▁ ( ▁ a ▁ , ▁ b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁= ▁1.0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ 4 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁result ▁* = ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁< = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ read Array ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁printArray ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ m e r ge ▁ ( ▁int ▁arr 1 ▁ [ ▁ ] ▁ , ▁int ▁ size 1 ▁ , ▁int ▁arr 2 ▁ [ ▁ ] ▁ , ▁int ▁ size 2 ▁ , ▁int ▁arr 3 ▁ [ ▁ ] ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ , ▁j ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size 1 ▁ ; ▁i ++ ▁ ) ▁arr 3 ▁ [ ▁i ▁ ] ▁= ▁arr 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 5 ▁ , ▁j ▁= ▁0 ▁ ; ▁i ▁< ▁ size 2 ▁+ ▁ 5 ▁ ; ▁i ++ ▁ , ▁j ++ ▁ ) ▁arr 3 ▁ [ ▁i ▁ ] ▁= ▁arr 2 ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁arr 1 ▁ [ ▁ 5 ▁ ] ▁ ; ▁ @ ▁int ▁arr 2 ▁ [ ▁ 5 ▁ ] ▁ ; ▁ @ ▁int ▁arr 3 ▁ [ ▁10 ▁ ] ▁ ; ▁ @ ▁ read Array ▁ ( ▁arr 1 ▁ , ▁ 5 ▁ ) ▁ ; ▁ @ ▁ read Array ▁ ( ▁arr 2 ▁ , ▁ 5 ▁ ) ▁ ; ▁ @ ▁ m e r ge ▁ ( ▁arr 1 ▁ , ▁ 5 ▁ , ▁arr 2 ▁ , ▁ 5 ▁ , ▁arr 3 ▁ ) ▁ ; ▁ @ ▁printArray ▁ ( ▁arr 3 ▁ , ▁10 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁temp ▁= ▁ ( ▁* num ▁ ) ▁ / ▁ 1 0.0 f ▁ ; ▁ @ ▁int ▁ t r u n c at ed ▁= ▁ ( ▁int ▁ ) ▁temp ▁ ; ▁ @ ▁int ▁result ▁= ▁ t r u n c at ed ▁* ▁10 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* r ▁ ) ▁ , ▁float ▁ ( ▁* h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ a ▁ ; ▁ @ ▁float ▁ s ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ s ▁= ▁sqrt ▁ ( ▁ ( ▁* r ▁ ) ▁* ▁ ( ▁* r ▁ ) ▁+ ▁ ( ▁* h ▁ ) ▁* ▁ ( ▁* h ▁ ) ▁ ) ▁ ; ▁ @ ▁ a ▁= ▁3.14159 ▁* ▁ ( ▁* r ▁ ) ▁* ▁ ( ▁ ( ▁* r ▁ ) ▁+ ▁ s ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ power ▁ ; ▁ @ ▁int ▁temp Number ▁ ; ▁ @ ▁int ▁rem ▁= ▁0 ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁temp Number ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁temp Number ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁rem ▁= ▁temp Number ▁ % ▁10 ▁ ; ▁ @ ▁ power ▁= ▁rem ▁* ▁rem ▁* ▁rem ▁ ; ▁ @ ▁sum ▁+ = ▁ power ▁ ; ▁ @ ▁temp Number ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁ ( ▁* number ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length Pa i r 1 ▁ ) ▁ , ▁float ▁ ( ▁* length Pa i r 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ k it e Per imeter ▁ ; ▁ @ ▁float ▁sumOf Pa i r s ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sumOf Pa i r s ▁= ▁ ( ▁* length Pa i r 1 ▁ ) ▁+ ▁ ( ▁* length Pa i r 2 ▁ ) ▁ ; ▁ @ ▁ k it e Per imeter ▁= ▁ 2 ▁* ▁sumOf Pa i r s ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ k it e Per imeter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ long ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ long ▁int ▁fact ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁i ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁ > = ▁ 1 ▁ ) ▁ { ▁ @ ▁fact ▁* = ▁i ▁ ; ▁ @ ▁i - - ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁fact ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ read Array ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁printArray ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ s or t Array ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ , ▁j ▁= ▁0 ▁ , ▁temp ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ size ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ > ▁arr ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁j ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁arr ▁ [ ▁ 5 ▁ ] ▁ ; ▁ @ ▁ read Array ▁ ( ▁arr ▁ , ▁ 5 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁printArray ▁ ( ▁arr ▁ , ▁ 5 ▁ ) ▁ ; ▁ @ ▁ s or t Array ▁ ( ▁arr ▁ , ▁ 5 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁printArray ▁ ( ▁arr ▁ , ▁ 5 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁add F i ve ▁ ( ▁int ▁ x ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ a ▁= ▁10 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ a ▁= ▁add F i ve ▁ ( ▁ a ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁add F i ve ▁ ( ▁int ▁ x ▁ ) ▁ { ▁ @ ▁ x ▁+ = ▁ 5 ▁ ; ▁ @ ▁re tur n ▁ x ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* b ar ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁ ; ▁ @ ▁float ▁ mm H g ▁ ; ▁ @ ▁ c onversion Factor ▁= ▁ 7 5 0.0 6 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ mm H g ▁= ▁ c onversion Factor ▁* ▁ ( ▁* b ar ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁put s ▁ ( ▁ ( ▁* str 1 ▁ ) ▁ ) ▁ ; ▁ @ ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁= = ▁ ' a ' ▁ | | ▁str 1 ▁ [ ▁i ▁ ] ▁= = ▁ ' e ' ▁ | | ▁str 1 ▁ [ ▁i ▁ ] ▁= = ▁ ' i ' ▁ | | ▁str 1 ▁ [ ▁i ▁ ] ▁= = ▁ ' o ' ▁ | | ▁ @ ▁str 1 ▁ [ ▁i ▁ ] ▁= = ▁ ' u ' ▁ ) ▁ @ ▁str 1 ▁ [ ▁i ▁ ] ▁= ▁str 1 ▁ [ ▁i ▁ ] ▁ - ▁32 ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁put s ▁ ( ▁ ( ▁* str 1 ▁ ) ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mp s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁knots ▁= ▁ ( ▁* mp s ▁ ) ▁* ▁ 1 . 9 4 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ in crement ▁ ( ▁int ▁ x ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ a ▁= ▁ 1 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ a ▁= ▁ in crement ▁ ( ▁ a ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ in crement ▁ ( ▁int ▁ x ▁ ) ▁ { ▁re tur n ▁ x ▁+ ▁ 1 ▁ ; ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁float ▁ base A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ base A rea ▁= ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* w id th ▁ ) ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁ base A rea ▁* ▁ ( ▁* height ▁ ) ▁ ) ▁ / ▁3.0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* x ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁exp f ▁ ( ▁ ( ▁* x ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ long ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ long ▁int ▁fact ▁ ; ▁ @ ▁ ; ▁ @ ▁fact ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁i ▁ > = ▁ 1 ▁ ; ▁i - - ▁ ) ▁fact ▁= ▁fact ▁* ▁i ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁fact ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁ surface A rea ▁= ▁ 4 ▁* ▁ M _ P I ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁odd ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ square S um ▁= ▁0 ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ square S um ▁+ ▁odd ▁< = ▁ ( ▁* limit ▁ ) ▁ ) ▁ { ▁ @ ▁ square S um ▁+ = ▁odd ▁ ; ▁ @ ▁odd ▁+ = ▁ 2 ▁ ; ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* a ▁ ) ▁ > = ▁ ( ▁* b ▁ ) ▁& & ▁ ( ▁* a ▁ ) ▁ > = ▁ ( ▁* c ▁ ) ▁ ) ▁ | | ▁ ( ▁ ( ▁* a ▁ ) ▁= = ▁ ( ▁* b ▁ ) ▁& & ▁ ( ▁* a ▁ ) ▁= = ▁ ( ▁* c ▁ ) ▁ ) ▁ ) ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁ > = ▁ ( ▁* a ▁ ) ▁& & ▁ ( ▁* b ▁ ) ▁ > = ▁ ( ▁* c ▁ ) ▁ ) ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* prin ci p al ▁ ) ▁ , ▁float ▁ ( ▁* rate ▁ ) ▁ , ▁float ▁ ( ▁* time ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ ci ▁ ; ▁ @ ▁float ▁ex po n ent ▁ ; ▁ @ ▁float ▁ base ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ( ▁* rate ▁ ) ▁= ▁ ( ▁* rate ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ base ▁= ▁ 1 ▁+ ▁ ( ▁* rate ▁ ) ▁ ; ▁ @ ▁ex po n ent ▁= ▁pow ▁ ( ▁ base ▁ , ▁ ( ▁* time ▁ ) ▁ ) ▁ ; ▁ @ ▁ ci ▁= ▁ ( ▁* prin ci p al ▁ ) ▁* ▁ ( ▁ex po n ent ▁ - ▁ 1 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ci ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ge nde r ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* ge nde r ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ ' M ' : ▁ @ ▁ case ▁ ' m ' : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' F ' : ▁ @ ▁ case ▁ ' f ' : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁double ▁ ( ▁* x ▁ ) ▁ , ▁double ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁double ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁double ▁exp _ pos ▁ ; ▁ @ ▁double ▁exp _ n eg ▁ ; ▁ @ ▁double ▁sum ▁ ; ▁ @ ▁double ▁ d if fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁exp _ pos ▁= ▁exp ▁ ( ▁ ( ▁* x ▁ ) ▁ ) ▁ ; ▁ @ ▁exp _ n eg ▁= ▁exp ▁ ( ▁ - ▁ ( ▁* x ▁ ) ▁ ) ▁ ; ▁ @ ▁sum ▁= ▁exp _ pos ▁+ ▁exp _ n eg ▁ ; ▁ @ ▁ d if fer e nce ▁= ▁exp _ pos ▁ - ▁exp _ n eg ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ d if fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁tempNum ▁ ; ▁ @ ▁int ▁numDigits ▁ ; ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁int ▁original Num ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁float ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁original Num ▁= ▁i ▁ ; ▁ @ ▁tempNum ▁= ▁original Num ▁ ; ▁ @ ▁numDigits ▁= ▁0 ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁numDigits ++ ▁ ; ▁ @ ▁tempNum ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁tempNum ▁! = ▁0 ▁ ) ▁ ; ▁ @ ▁original Num ▁= ▁i ▁ ; ▁ @ ▁w h ile ▁ ( ▁original Num ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁re ma inde r ▁= ▁original Num ▁ % ▁10 ▁ ; ▁ @ ▁sum ▁+ = ▁pow ▁ ( ▁re ma inde r ▁ , ▁numDigits ▁ ) ▁ ; ▁ @ ▁original Num ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁int ▁ ) ▁sum ▁= = ▁i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁mul ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁count ▁< ▁ ( ▁* b ▁ ) ▁ ) ▁ { ▁ @ ▁mul ▁+ = ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁mul ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* brea d th ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* brea d th ▁ ) ▁ ; ▁ @ ▁perim eter ▁= ▁ ( ▁ 2 ▁* ▁ ( ▁* length ▁ ) ▁ ) ▁+ ▁ ( ▁ 2 ▁* ▁ ( ▁* brea d th ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* at m ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁ mm H g ▁= ▁ ( ▁* at m ▁ ) ▁* ▁ 7 6 0.0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁nth He x agonal ▁ ; ▁ @ ▁ ; ▁ @ ▁nth He x agonal ▁= ▁ ( ▁ ( ▁* n ▁ ) ▁ > ▁0 ▁ ) ▁ ? ▁ 2 ▁* ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁* n ▁ ) ▁ - ▁ ( ▁* n ▁ ) ▁ : ▁ - 1 ▁ ; ▁ @ ▁ if ▁ ( ▁nth He x agonal ▁= = ▁ - 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth He x agonal ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ 1 4 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ 3 8 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁int ▁ ( ▁* num 3 ▁ ) ▁ , ▁int ▁ ( ▁* num 4 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁ ( ▁* num 1 ▁ ) ▁+ ▁ ( ▁* num 2 ▁ ) ▁+ ▁ ( ▁* num 3 ▁ ) ▁+ ▁ ( ▁* num 4 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* slantHeight ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁float ▁ lateral A rea ▁ ; ▁ @ ▁float ▁ base A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ base A rea ▁= ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁ ; ▁ @ ▁ lateral A rea ▁= ▁ 4 ▁* ▁ ( ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* slantHeight ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ surface A rea ▁= ▁ base A rea ▁+ ▁ lateral A rea ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁factor i al ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁factor i al ▁* = ▁i ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁factor i al ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* power H P ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ power W ▁ ; ▁ @ ▁float ▁ c onversion Factor ▁ ; ▁ @ ▁ ; ▁ @ ▁ c onversion Factor ▁= ▁746 . 0 f ▁ ; ▁ @ ▁ power W ▁= ▁ ( ▁* power H P ▁ ) ▁* ▁ c onversion Factor ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ power W ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ @ ▁ @ ▁vo id ▁ string L w r ▁ ( ▁char ▁* s ▁ ) ▁ ; ▁ @ ▁vo id ▁ string U p r ▁ ( ▁char ▁* s ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁str ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ string L w r ▁ ( ▁str ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁str ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ string U p r ▁ ( ▁str ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁str ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ string L w r ▁ ( ▁char ▁* s ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁ > = ▁ ' A ' ▁& & ▁ s ▁ [ ▁i ▁ ] ▁< = ▁ ' Z ' ▁ ) ▁ { ▁ @ ▁ s ▁ [ ▁i ▁ ] ▁= ▁ s ▁ [ ▁i ▁ ] ▁+ ▁32 ▁ ; ▁ @ ▁ } ▁ @ ▁ ++ i ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁ string U p r ▁ ( ▁char ▁* s ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁ > = ▁ ' a ' ▁& & ▁ s ▁ [ ▁i ▁ ] ▁< = ▁ ' z ' ▁ ) ▁ { ▁ @ ▁ s ▁ [ ▁i ▁ ] ▁= ▁ s ▁ [ ▁i ▁ ] ▁ - ▁32 ▁ ; ▁ @ ▁ } ▁ @ ▁ ++ i ▁ ; ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ 5 ▁* ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁ ( ▁* num ▁ ) ▁ - ▁i ▁ - ▁ 1 ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ > ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁rem ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁rem ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁rem ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* grad ian s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ radi an s ▁= ▁ ( ▁* grad ian s ▁ ) ▁* ▁ ( ▁3.14 ▁ / ▁ 2 00.0 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temp ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ num s ▁ [ ▁10 ▁ ] ▁ ; ▁ @ ▁int ▁gre atest ▁= ▁0 ▁ ; ▁ @ ▁int ▁ id x ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ id x ▁< ▁10 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ id x ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ id x ▁= = ▁0 ▁ | | ▁ ( ▁* temp ▁ ) ▁ > ▁gre atest ▁ ) ▁ { ▁ @ ▁gre atest ▁= ▁ ( ▁* temp ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ id x ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁gre atest ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* feet ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁= ▁3.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁ y ard s ▁= ▁ ( ▁* feet ▁ ) ▁ / ▁ c onversion Factor ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ y ard s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁ ) ▁ / ▁ ( ▁ 4 ▁* ▁tan ▁ ( ▁ M _ P I ▁ / ▁ ( ▁* n ▁ ) ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁< ▁arr ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁j ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* d ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ n d ▁ ; ▁ @ ▁int ▁ m ▁ ; ▁ @ ▁int ▁ y ▁ ; ▁ @ ▁ ; ▁ @ ▁ y ▁= ▁ ( ▁* d ▁ ) ▁ / ▁ 3 6 5 ▁ ; ▁ @ ▁ ( ▁* d ▁ ) ▁= ▁ ( ▁* d ▁ ) ▁ % ▁ 3 6 5 ▁ ; ▁ @ ▁ m ▁= ▁ ( ▁* d ▁ ) ▁ / ▁30 ▁ ; ▁ @ ▁ n d ▁= ▁ ( ▁* d ▁ ) ▁ % ▁30 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ y ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ m ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ n d ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ a ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁ ++ i ▁ ) ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁ ++ j ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ number ▁ [ ▁i ▁ ] ▁ > ▁ number ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁ a ▁= ▁ number ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ number ▁ [ ▁i ▁ ] ▁= ▁ number ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ number ▁ [ ▁j ▁ ] ▁= ▁ a ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ number ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ 8 ▁* ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* grade ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁totalCount ▁= ▁0 ▁ ; ▁ @ ▁int ▁passCount ▁= ▁0 ▁ ; ▁ @ ▁float ▁ pas s Per c entag e ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* grade ▁ ) ▁! = ▁ - 1 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* grade ▁ ) ▁ > = ▁ 7 0 ▁& & ▁ ( ▁* grade ▁ ) ▁< = ▁100 ▁ ) ▁ { ▁ @ ▁passCount ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* grade ▁ ) ▁ > = ▁0 ▁& & ▁ ( ▁* grade ▁ ) ▁< = ▁100 ▁ ) ▁ { ▁ @ ▁totalCount ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁ pas s Per c entag e ▁= ▁totalCount ▁ > ▁0 ▁ ? ▁ ( ▁float ▁ ) ▁passCount ▁ / ▁totalCount ▁* ▁100 ▁ : ▁0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ pas s Per c entag e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ b ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ a ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* limit ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁ a ▁< = ▁ ( ▁* limit ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ a ▁< = ▁ ( ▁* limit ▁ ) ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ b ▁= ▁ a ▁+ ▁ b ▁ ; ▁ @ ▁ a ▁= ▁ b ▁ - ▁ a ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁& & ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* c ▁ ) ▁ ) ▁ @ ▁large st ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁ > ▁ ( ▁* a ▁ ) ▁& & ▁ ( ▁* b ▁ ) ▁ > ▁ ( ▁* c ▁ ) ▁ ) ▁ @ ▁large st ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁large st ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁= ▁ 3 . 2 8 0 8 3 9 8 9 5 f ▁ ; ▁ @ ▁float ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ feet ▁= ▁ ( ▁* meters ▁ ) ▁* ▁ c onversion Factor ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* meters ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ x ▁= ▁50 ▁ ; ▁ @ ▁vo id ▁display ▁ ( ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ x ▁= ▁25 ▁ ; ▁ @ ▁int ▁ y ▁= ▁ 3 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ x ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ y ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁display ▁ ( ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ y ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁display ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁ y ▁= ▁ 4 5 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁func 1 ▁ ( ▁int ▁ n ▁ ) ▁ ; ▁ @ ▁vo id ▁func 2 ▁ ( ▁int ▁ n ▁ ) ▁ ; ▁ @ ▁vo id ▁func 3 ▁ ( ▁int ▁ n ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁func 1 ▁ ( ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁func 2 ▁ ( ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁func 3 ▁ ( ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁func 1 ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁ n ▁= = ▁0 ▁ ) ▁ @ ▁re tur n ▁ ; ▁ @ ▁el se ▁ { ▁ @ ▁func 1 ▁ ( ▁ n ▁ - ▁ 1 ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ n ▁ ; ▁i ++ ▁ ) ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁func 2 ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁ n ▁= = ▁0 ▁ ) ▁ @ ▁re tur n ▁ ; ▁ @ ▁el se ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ n ▁ ; ▁i ++ ▁ ) ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁func 2 ▁ ( ▁ n ▁ - ▁ 1 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁func 3 ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁ n ▁= = ▁0 ▁ ) ▁ @ ▁re tur n ▁ ; ▁ @ ▁el se ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ n ▁ ; ▁i ▁ > = ▁ 1 ▁ ; ▁i - - ▁ ) ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁func 3 ▁ ( ▁ n ▁ - ▁ 1 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 7 ▁= = ▁0 ▁ ) ▁ ? ▁ ( ▁* number ▁ ) ▁+ ▁ 1 ▁ : ▁ ( ▁* number ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 7 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁check ed ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁count ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁check ed ▁ [ ▁i ▁ ] ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁check ed ▁ [ ▁i ▁ ] ▁= = ▁ 1 ▁ ) ▁ cont in ue ▁ ; ▁ @ ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁arr ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁check ed ▁ [ ▁j ▁ ] ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁str 2 ▁ [ ▁20 ▁ ] ▁ ; ▁ @ ▁char ▁str 1 ▁ [ ▁20 ▁ ] ▁ ; ▁ @ ▁int ▁ length 2 ▁= ▁0 ▁ ; ▁ @ ▁int ▁ length 1 ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁str 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁str 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁str 1 ▁ [ ▁ length 1 ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ length 1 ++ ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁str 2 ▁ [ ▁ length 2 ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ length 2 ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ length 1 ▁! = ▁ length 2 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁& & ▁ ( ▁str 2 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁str 2 ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 5 ▁ ; ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁count ▁= ▁ row ▁ - ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁ 1 ▁ ; ▁ k ▁< = ▁ row ▁ ; ▁ k ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁count ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count - - ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ 2 ▁* ▁ k ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁ 1 ▁ ; ▁ k ▁< = ▁ row ▁ - ▁ 1 ▁ ; ▁ k ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁count ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ 2 ▁* ▁ ( ▁ row ▁ - ▁ k ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁printArray E lement s ▁ ( ▁int ▁array ▁ [ ▁ ] ▁ , ▁int ▁count ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁count ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁array ▁ [ ▁ ] ▁= ▁ { ▁ 1 ▁ , ▁ 2 ▁ , ▁ 3 ▁ , ▁ 4 ▁ , ▁ 5 ▁ , ▁ 6 ▁ , ▁ 7 ▁ , ▁ 8 ▁ , ▁ 9 ▁ } ▁ ; ▁ @ ▁printArray E lement s ▁ ( ▁array ▁ , ▁ 9 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ line ▁ [ ▁ 1 5 0 ▁ ] ▁ ; ▁ @ ▁int ▁ le n ▁= ▁0 ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁ line ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁ line ▁ [ ▁i ▁ ] ▁ > = ▁ ' a ' ▁& & ▁ line ▁ [ ▁i ▁ ] ▁< = ▁ ' z ' ▁ ) ▁ | | ▁ @ ▁ ( ▁ line ▁ [ ▁i ▁ ] ▁ > = ▁ ' A ' ▁& & ▁ line ▁ [ ▁i ▁ ] ▁< = ▁ ' Z ' ▁ ) ▁ ) ▁ { ▁ @ ▁ line ▁ [ ▁ le n ++ ▁ ] ▁= ▁ line ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ line ▁ [ ▁ le n ▁ ] ▁= ▁'\ 0 ' ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ line ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁double ▁ ( ▁* a ▁ ) ▁ , ▁double ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁double ▁circum fer e nce ▁ ; ▁ @ ▁double ▁ P I ▁= ▁ a c os ▁ ( ▁ - 1 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁double ▁ c ▁= ▁sqrt ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ) ▁ ; ▁ @ ▁circum fer e nce ▁= ▁ 2 ▁* ▁ P I ▁* ▁ c ▁ / ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁small est ▁ ; ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁large st ▁= ▁small est ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁ > ▁large st ▁ ) ▁large st ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁ > ▁large st ▁ ) ▁large st ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁< ▁small est ▁ ) ▁small est ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁< ▁small est ▁ ) ▁small est ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁small est ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁sumOf P ower s ▁ ; ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sumOf P ower s ▁= ▁ @ ▁pow ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ , ▁1.6 f ▁ ) ▁+ ▁pow ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ , ▁1.6 f ▁ ) ▁+ ▁pow ▁ ( ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ , ▁1.6 f ▁ ) ▁ ; ▁ @ ▁ surface A rea ▁= ▁ 4 ▁* ▁ 3 .141592653589793 2 384 6 ▁* ▁pow ▁ ( ▁sumOf P ower s ▁ / ▁ 3 ▁ , ▁ ( ▁ 1 ▁ / ▁1.6 f ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side 1 ▁ ) ▁ , ▁float ▁ ( ▁* side 2 ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ t r a p e z o id _ area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ t r a p e z o id _ area ▁= ▁ ( ▁ ( ▁* side 1 ▁ ) ▁+ ▁ ( ▁* side 2 ▁ ) ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁* ▁0 .5 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ t r a p e z o id _ area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁fo u r T h i rd s ▁ ; ▁ @ ▁float ▁pi Value ▁ ; ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁pi Value ▁= ▁ M _ P I ▁ ; ▁ @ ▁fo u r T h i rd s ▁= ▁4.0 f ▁ / ▁3.0 f ▁ ; ▁ @ ▁vol um e ▁= ▁fo u r T h i rd s ▁* ▁pi Value ▁* ▁pow ▁ ( ▁ ( ▁* radius ▁ ) ▁ , ▁ 3 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* start ▁ ) ▁ , ▁int ▁ ( ▁* end ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁i ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* end ▁ ) ▁ ) ▁ { ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁j ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁j ▁< = ▁i ▁ / ▁ 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁j ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁i ▁& & ▁i ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* outer R adius ▁ ) ▁ , ▁float ▁ ( ▁* inner R adius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁total Circum fer e nce ▁ ; ▁ @ ▁float ▁ inner Circum fer e nce ▁ ; ▁ @ ▁float ▁ outer Circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ outer Circum fer e nce ▁= ▁ 2 ▁* ▁3.14159 ▁* ▁ ( ▁* outer R adius ▁ ) ▁ ; ▁ @ ▁ inner Circum fer e nce ▁= ▁ 2 ▁* ▁3.14159 ▁* ▁ ( ▁* inner R adius ▁ ) ▁ ; ▁ @ ▁total Circum fer e nce ▁= ▁ outer Circum fer e nce ▁+ ▁ inner Circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁total Circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol ▁ ; ▁ @ ▁float ▁area Base ▁ ; ▁ @ ▁float ▁pi ▁= ▁3.14159 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area Base ▁= ▁ ( ▁5.0 f ▁* ▁ ( ▁* side ▁ ) ▁* ▁ ( ▁* side ▁ ) ▁ ) ▁ / ▁ ( ▁4.0 f ▁* ▁tan ▁ ( ▁pi ▁ / ▁5.0 f ▁ ) ▁ ) ▁ ; ▁ @ ▁vol ▁= ▁ ( ▁area Base ▁* ▁ ( ▁* height ▁ ) ▁ ) ▁ / ▁3.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁< ▁0 ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁convert To Lower case ▁ ( ▁char ▁ s ▁ [ ▁ ] ▁ ) ▁ ; ▁ @ ▁vo id ▁convert To U pper case ▁ ( ▁char ▁ s ▁ [ ▁ ] ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁str ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁convert To Lower case ▁ ( ▁str ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁str ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁convert To U pper case ▁ ( ▁str ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁str ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁convert To Lower case ▁ ( ▁char ▁ s ▁ [ ▁ ] ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁i ▁= ▁0 ▁ ; ▁ s ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁ > = ▁ ' A ' ▁& & ▁ s ▁ [ ▁i ▁ ] ▁< = ▁ ' Z ' ▁ ) ▁ { ▁ @ ▁ s ▁ [ ▁i ▁ ] ▁+ = ▁ ' a ' ▁ - ▁ ' A ' ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁convert To U pper case ▁ ( ▁char ▁ s ▁ [ ▁ ] ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁i ▁= ▁0 ▁ ; ▁ s ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁ > = ▁ ' a ' ▁& & ▁ s ▁ [ ▁i ▁ ] ▁< = ▁ ' z ' ▁ ) ▁ { ▁ @ ▁ s ▁ [ ▁i ▁ ] ▁ - = ▁ ' a ' ▁ - ▁ ' A ' ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std bool . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ num ▁ ; ▁ @ ▁ bool ▁is Prime ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* upper ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ num ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁ num ▁< = ▁ ( ▁* upper ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁ > ▁ 1 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁ t r ue ▁ ; ▁ @ ▁i ▁= ▁ 2 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁* ▁i ▁< = ▁ num ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁ f al se ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Prime ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ num ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* l ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁* l ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* num ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 3 ▁ ; ▁i ▁* ▁i ▁< = ▁ ( ▁* num ▁ ) ▁ ; ▁i ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁w h ile ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* num ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ / ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ > ▁ 2 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ 6 ▁* ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁* ▁ 3 ▁ ; ▁ @ ▁put s ▁ ( ▁"\ n --------------- --------------- --------------\ n " ▁ ) ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁int ▁col ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ if ▁ ( ▁col ▁= = ▁ ( ▁* max Row s ▁ ) ▁+ ▁ 1 ▁ - ▁ row ▁ | | ▁col ▁= = ▁ ( ▁* max Row s ▁ ) ▁ - ▁ 1 ▁+ ▁ row ▁ | | ▁ @ ▁col ▁= = ▁ ( ▁* max Row s ▁ ) ▁* ▁ 2 ▁+ ▁ 2 ▁ - ▁ row ▁ | | ▁col ▁= = ▁ ( ▁* max Row s ▁ ) ▁* ▁ 2 ▁+ ▁ row ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ t riangular Number ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* upper ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁ t riangular Number ▁< = ▁ ( ▁* upper ▁ ) ▁ ) ▁ { ▁ @ ▁ t riangular Number ▁= ▁i ▁* ▁ ( ▁i ▁+ ▁ 1 ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ if ▁ ( ▁ t riangular Number ▁ > = ▁ ( ▁* l ower ▁ ) ▁& & ▁ t riangular Number ▁< = ▁ ( ▁* upper ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ t riangular Number ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* total ▁ ) ▁ , ▁int ▁ ( ▁* e lement s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁swap ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* total ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁ ( ▁* total ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁ ; ▁j ▁ > ▁0 ▁& & ▁ e lement s ▁ [ ▁j ▁ - ▁ 1 ▁ ] ▁ > ▁ e lement s ▁ [ ▁j ▁ ] ▁ ; ▁j - - ▁ ) ▁ { ▁ @ ▁swap ▁= ▁ e lement s ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ e lement s ▁ [ ▁j ▁ ] ▁= ▁ e lement s ▁ [ ▁j ▁ - ▁ 1 ▁ ] ▁ ; ▁ @ ▁ e lement s ▁ [ ▁j ▁ - ▁ 1 ▁ ] ▁= ▁swap ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* total ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ e lement s ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* R ▁ ) ▁ , ▁float ▁ ( ▁* r ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ @ ▁ 2 ▁* ▁ 3 .141592653589793 2 384 6 ▁* ▁ 3 .141592653589793 2 384 6 ▁* ▁ ( ▁* R ▁ ) ▁* ▁ ( ▁* r ▁ ) ▁* ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ % ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* first ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ second ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* size ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ second ▁ [ ▁i ▁ ] ▁= ▁ first ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ first ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ second ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁result ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁result ▁ > = ▁ 7 ▁ ; ▁result ▁ - = ▁ 7 ▁ ) ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁result ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* start ▁ ) ▁ , ▁int ▁ ( ▁* end ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁counter ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* end ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁counter ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁counter ▁< = ▁ ( ▁* end ▁ ) ▁ ; ▁counter ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁counter ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁counter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* start ▁ ) ▁ , ▁int ▁ ( ▁* end ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ prime Count ▁= ▁0 ▁ ; ▁ @ ▁int ▁ prime Fl ag ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* end ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁i ▁< = ▁ ( ▁* end ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁< = ▁ 1 ▁ ) ▁ cont in ue ▁ ; ▁ @ ▁ prime Fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 2 ▁ ; ▁j ▁* ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ prime Fl ag ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ prime Fl ag ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ prime Count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ prime Count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ rev Number ▁ ; ▁ @ ▁int ▁dig ▁ ; ▁ @ ▁ ; ▁ @ ▁ rev Number ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* n ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁dig ▁= ▁ ( ▁* n ▁ ) ▁ % ▁10 ▁ ; ▁ @ ▁ rev Number ▁= ▁ ( ▁ rev Number ▁* ▁10 ▁ ) ▁+ ▁dig ▁ ; ▁ @ ▁ ( ▁* n ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ / ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ rev Number ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁ ) ▁ / ▁ 4 ▁ ) ▁ - ▁ ( ▁* d ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁put char ▁ ( ▁ 6 5 ▁ ) ▁ ; ▁ @ ▁put char ▁ ( ▁'\ n ' ▁ ) ▁ ; ▁ @ ▁put char ▁ ( ▁ 6 6 ▁ ) ▁ ; ▁ @ ▁put char ▁ ( ▁'\ n ' ▁ ) ▁ ; ▁ @ ▁put char ▁ ( ▁ 6 7 ▁ ) ▁ ; ▁ @ ▁put char ▁ ( ▁'\ n ' ▁ ) ▁ ; ▁ @ ▁put char ▁ ( ▁ 6 8 ▁ ) ▁ ; ▁ @ ▁put char ▁ ( ▁'\ n ' ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* x ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁sum ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁ > ▁0 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁sum ▁= ▁ ( ▁sum ▁+ ▁ a ▁ [ ▁i ▁ ] ▁ ) ▁* ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁sum ▁= ▁sum ▁+ ▁ a ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* sides ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 4 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁perim eter ▁+ = ▁ sides ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁cnt ▁ ; ▁ @ ▁int ▁ tNum ▁ ; ▁ @ ▁ ; ▁ @ ▁cnt ▁= ▁0 ▁ ; ▁ @ ▁ tNum ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁ tNum ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁cnt ++ ▁ ; ▁ @ ▁ tNum ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁cnt ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 6 5 ▁ ; ▁i ▁< = ▁ 9 0 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 9 7 ▁ ; ▁i ▁< = ▁ 1 2 2 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ long ▁double ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁double ▁fact ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ { ▁fact ▁* = ▁i ▁ ; ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁fact ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁fact ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁result ▁= ▁ ( ▁* num ▁ ) ▁& ▁ 1 ▁ ; ▁ @ ▁ if ▁ ( ▁result ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ge ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ge ▁ ) ▁ > = ▁18 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ num 1 ▁= ▁10 ▁ ; ▁ @ ▁float ▁ num 2 ▁= ▁20 .5 ▁ ; ▁ @ ▁int ▁ num 1 _ copy ▁= ▁ num 1 ▁ ; ▁ @ ▁float ▁ num 2 _ copy ▁= ▁ num 2 ▁ ; ▁ @ ▁ num 1 ▁+ = ▁ 5 ▁ ; ▁ @ ▁ num 2 ▁+ = ▁ 2 .5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ num 1 _ copy ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ num 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ num 2 _ copy ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ num 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ string ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁freq ue n cy ▁ [ ▁25 5 ▁ ] ▁ ; ▁ @ ▁int ▁ first Fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ascii ▁ ; ▁ @ ▁int ▁min ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁25 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁freq ue n cy ▁ [ ▁i ▁ ] ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁ string ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ascii ▁= ▁ string ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁freq ue n cy ▁ [ ▁ascii ▁ ] ▁ ++ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁25 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁freq ue n cy ▁ [ ▁i ▁ ] ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ first Fl ag ▁ | | ▁freq ue n cy ▁ [ ▁i ▁ ] ▁< ▁freq ue n cy ▁ [ ▁min ▁ ] ▁ ) ▁ { ▁ @ ▁min ▁= ▁i ▁ ; ▁ @ ▁ first Fl ag ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁min ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁freq ue n cy ▁ [ ▁min ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* user ▁ ) ▁ , ▁int ▁ ( ▁* input ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ pas s wo rd ▁= ▁ 1 2 3 4 ▁ ; ▁ @ ▁char ▁ user n ame ▁ [ ▁ ] ▁= ▁ " r u b an " ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁! ▁ ( ▁str c mp ▁ ( ▁ ( ▁* user ▁ ) ▁ , ▁ user n ame ▁ ) ▁ ) ▁& & ▁ ( ▁ pas s wo rd ▁= = ▁ 1 2 3 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁sqrt 3 ▁ ; ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁sqrt 3 ▁= ▁sqrt ▁ ( ▁ 3 ▁ ) ▁ ; ▁ @ ▁ surface A rea ▁= ▁sqrt 3 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁ u nsi gn ed ▁ long ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ u nsi gn ed ▁ long ▁sum ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁next Square ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* N ▁ ) ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁next Square ▁ ; ▁ @ ▁next Square ▁+ = ▁ ( ▁ 2 ▁* ▁i ▁+ ▁ 1 ▁ ) ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁is O dd ▁= ▁ ( ▁* num ▁ ) ▁ % ▁ 2 ▁ ; ▁ @ ▁ if ▁ ( ▁is O dd ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁vo id ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number 1 ▁ ) ▁ , ▁int ▁ ( ▁* number 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁fl ag ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* number 2 ▁ ) ▁< ▁ 2 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number 2 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁temp ▁= ▁ ( ▁* number 1 ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* number 1 ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* number 1 ▁ ) ▁ ++ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* number 1 ▁ ) ▁ ; ▁i ▁< = ▁ ( ▁* number 2 ▁ ) ▁ ; ▁i ▁= ▁i ▁+ ▁ 2 ▁ ) ▁ { ▁ @ ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 2 ▁ ; ▁j ▁< = ▁i ▁ / ▁ 2 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁i ▁ % ▁j ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fl ag ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁temp ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* number 2 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁put char ▁ ( ▁ 6 5 ▁ ) ▁ ; ▁ @ ▁put char ▁ ( ▁'\ n ' ▁ ) ▁ ; ▁ @ ▁put char ▁ ( ▁ 6 6 ▁ ) ▁ ; ▁ @ ▁put char ▁ ( ▁'\ n ' ▁ ) ▁ ; ▁ @ ▁put char ▁ ( ▁ 6 7 ▁ ) ▁ ; ▁ @ ▁put char ▁ ( ▁'\ n ' ▁ ) ▁ ; ▁ @ ▁put char ▁ ( ▁ 6 8 ▁ ) ▁ ; ▁ @ ▁put char ▁ ( ▁'\ n ' ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* m o de ▁ ) ▁ , ▁float ▁ ( ▁* temp I n p u t ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁temp O u t p u t ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* m o de ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ 1 : ▁ ; ▁ @ ▁temp O u t p u t ▁= ▁ ( ▁ ( ▁* temp I n p u t ▁ ) ▁ - ▁32 ▁ ) ▁* ▁ 5 ▁ / ▁ 9 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁temp O u t p u t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 2 : ▁ ; ▁ @ ▁temp O u t p u t ▁= ▁ ( ▁ ( ▁* temp I n p u t ▁ ) ▁* ▁ 9 ▁ / ▁ 5 ▁ ) ▁+ ▁32 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁temp O u t p u t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ size of ▁ ( ▁char * ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ size of ▁ ( ▁int * ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ size of ▁ ( ▁float * ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ size of ▁ ( ▁ long ▁int * ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ size of ▁ ( ▁double * ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁array ▁ [ ▁100 ▁ ] ▁ , ▁array 1 ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁vo id ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁array 1 ▁ [ ▁i ▁ ] ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁0 ▁ ; ▁ k ▁< ▁ 3 ▁ ; ▁ k ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁ - ▁ 1 ▁ ; ▁j ▁ > = ▁0 ▁ ; ▁j - - ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁array ▁ [ ▁i ▁ ] ▁ % ▁10 ▁ ) ▁< ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ % ▁10 ▁ ) ▁ ) ▁ { ▁ @ ▁temp ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁i ▁ ] ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁temp ▁= ▁array 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁array 1 ▁ [ ▁i ▁ ] ▁= ▁array 1 ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array 1 ▁ [ ▁j ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁array ▁ [ ▁i ▁ ] ▁= ▁array ▁ [ ▁i ▁ ] ▁ / ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁array 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* row s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* row s ▁ ) ▁ ) ▁ { ▁ @ ▁j ▁= ▁ ( ▁* row s ▁ ) ▁ - ▁i ▁ ; ▁ @ ▁w h ile ▁ ( ▁j ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁j - - ▁ ; ▁ @ ▁ } ▁ @ ▁ k ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ k ▁< ▁i ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ k ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁0 .5 ▁* ▁ ( ▁* base ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ surface A rea ▁= ▁sqrt ▁ ( ▁ 3 ▁ ) ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁count ▁= ▁ ( ▁int ▁ ) ▁ c b r t ▁ ( ▁ ( ▁* limit ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ value ▁= ▁25 6 7 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* b ar ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ mm H g ▁= ▁ ( ▁* b ar ▁ ) ▁* ▁ 7 5 0.0 6 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* ve h ic le S p e ed ▁ ) ▁ , ▁float ▁ ( ▁* t r a ve l T im e ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ t r a ve l D i st a nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ t r a ve l D i st a nce ▁= ▁ ( ▁* ve h ic le S p e ed ▁ ) ▁* ▁ ( ▁* t r a ve l T im e ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ t r a ve l D i st a nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ ? ▁ 1 ▁ : ▁0 ▁ ; ▁ @ ▁ if ▁ ( ▁result ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* feet ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ inches ▁= ▁ ( ▁* feet ▁ ) ▁* ▁ 1 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ read Array ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁printArray ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ s or t Array ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ , ▁j ▁= ▁0 ▁ , ▁temp ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ size ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ > ▁arr ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁j ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁arr ▁ [ ▁ 5 ▁ ] ▁ ; ▁ @ ▁ read Array ▁ ( ▁arr ▁ , ▁ 5 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁printArray ▁ ( ▁arr ▁ , ▁ 5 ▁ ) ▁ ; ▁ @ ▁ s or t Array ▁ ( ▁arr ▁ , ▁ 5 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁printArray ▁ ( ▁arr ▁ , ▁ 5 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁int ▁counter ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁counter ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁counter ▁ ; ▁ @ ▁counter ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ ge t B in a ry V 2 ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁ b in a ry ▁ [ ▁ 1 6 ▁ ] ▁ , ▁i ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁ ; ▁i ▁< ▁ 1 6 ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁ b in a ry ▁ [ ▁i ▁ ] ▁= ▁ ( ▁ n ▁ > > ▁i ▁ ) ▁& ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 5 ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁ - - i ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ge t B in a ry V 2 ▁ ( ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁count ▁= ▁ ( ▁int ▁ ) ▁sqrt ▁ ( ▁ ( ▁* limit ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* b in a ry ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁dec i mal ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁ length ▁= ▁10 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ length ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ b in a ry ▁ [ ▁i ▁ ] ▁= = ▁ ' 1 ' ▁ ) ▁ { ▁ @ ▁dec i mal ▁= ▁dec i mal ▁+ ▁pow ▁ ( ▁ 2 ▁ , ▁ length ▁ - ▁i ▁ - ▁ 1 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁dec i mal ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side A ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ side B ▁ ; ▁ @ ▁float ▁ side C ▁ ; ▁ @ ▁float ▁ side D ▁ ; ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ side B ▁= ▁ ( ▁* side A ▁ ) ▁ ; ▁ @ ▁ side C ▁= ▁ ( ▁* side A ▁ ) ▁ ; ▁ @ ▁ side D ▁= ▁ ( ▁* side A ▁ ) ▁ ; ▁ @ ▁perim eter ▁= ▁ ( ▁* side A ▁ ) ▁+ ▁ side B ▁+ ▁ side C ▁+ ▁ side D ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* m ▁ ) ▁ , ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* m ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* m ▁ ) ▁= ▁ ( ▁* m ▁ ) ▁ ^ ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* n ▁ ) ▁= ▁ ( ▁* m ▁ ) ▁ ^ ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* m ▁ ) ▁= ▁ ( ▁* m ▁ ) ▁ ^ ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* m ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ digit s ▁= ▁0 ▁ ; ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁int ▁original Num ▁ ; ▁ @ ▁float ▁ ar m str o n g S um ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁original Num ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁ ; ▁original Num ▁! = ▁0 ▁ ; ▁ ++ digit s ▁ ) ▁ { ▁ @ ▁original Num ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁original Num ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁ ; ▁original Num ▁! = ▁0 ▁ ; ▁original Num ▁ / = ▁10 ▁ ) ▁ { ▁ @ ▁re ma inde r ▁= ▁original Num ▁ % ▁10 ▁ ; ▁ @ ▁ ar m str o n g S um ▁+ = ▁pow ▁ ( ▁re ma inde r ▁ , ▁ digit s ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁int ▁ ) ▁ ar m str o n g S um ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* value ▁ ) ▁ , ▁float ▁ ( ▁* m e an ▁ ) ▁ , ▁float ▁ ( ▁* stdDev i ation ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ z S c or e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ z S c or e ▁= ▁ ( ▁ ( ▁* value ▁ ) ▁ - ▁ ( ▁* m e an ▁ ) ▁ ) ▁ / ▁ ( ▁* stdDev i ation ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ z S c or e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* rea l 1 ▁ ) ▁ , ▁float ▁ ( ▁* i mag 1 ▁ ) ▁ , ▁float ▁ ( ▁* rea l 2 ▁ ) ▁ , ▁float ▁ ( ▁* i mag 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁i mag S um ▁ ; ▁ @ ▁float ▁re al S um ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re al S um ▁= ▁ ( ▁* rea l 1 ▁ ) ▁+ ▁ ( ▁* rea l 2 ▁ ) ▁ ; ▁ @ ▁i mag S um ▁= ▁ ( ▁* i mag 1 ▁ ) ▁+ ▁ ( ▁* i mag 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁re al S um ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i mag S um ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* shift ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁result ▁= ▁ ( ▁* a ▁ ) ▁< < ▁ ( ▁* shift ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ s ▁ [ ▁100 0 ▁ ] ▁ ; ▁ @ ▁ { ▁ ; ▁ } ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ con s o n ant s ▁= ▁0 ▁ ; ▁ @ ▁int ▁vo w e l s ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁ s ▁ [ ▁i ▁ ] ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁ > = ▁ 6 5 ▁& & ▁ s ▁ [ ▁i ▁ ] ▁< = ▁ 9 0 ▁ ) ▁ | | ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁ > = ▁ 9 7 ▁& & ▁ s ▁ [ ▁i ▁ ] ▁< = ▁ 1 2 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁= = ▁ ' a ' ▁ | | ▁ s ▁ [ ▁i ▁ ] ▁= = ▁ ' e ' ▁ | | ▁ s ▁ [ ▁i ▁ ] ▁= = ▁ ' i ' ▁ | | ▁ s ▁ [ ▁i ▁ ] ▁= = ▁ ' o ' ▁ | | ▁ @ ▁ s ▁ [ ▁i ▁ ] ▁= = ▁ ' u ' ▁ ) ▁ @ ▁vo w e l s ++ ▁ ; ▁ @ ▁el se ▁ @ ▁ con s o n ant s ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vo w e l s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ con s o n ant s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ^ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ^ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ^ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁temp ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁temp ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁float ▁ stdDev i ation ▁ ; ▁ @ ▁float ▁variance ▁ ; ▁ @ ▁float ▁ m e an ▁ ; ▁ @ ▁float ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ m e an ▁= ▁sum ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ ) ▁* ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁variance ▁= ▁sum ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ stdDev i ation ▁= ▁sqrt f ▁ ( ▁variance ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ m e an ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁variance ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ stdDev i ation ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str 1 ▁ ) ▁ , ▁char ▁ ( ▁* str 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁put s ▁ ( ▁ ( ▁* str 1 ▁ ) ▁ ) ▁ ; ▁ @ ▁put s ▁ ( ▁ ( ▁* str 2 ▁ ) ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁str 2 ▁ [ ▁j ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁str 1 ▁ [ ▁i ++ ▁ ] ▁= ▁str 2 ▁ [ ▁j ++ ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁str 1 ▁ [ ▁i ▁ ] ▁= ▁'\ 0 ' ▁ ; ▁ @ ▁ ; ▁ @ ▁put s ▁ ( ▁ ( ▁* str 1 ▁ ) ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* dd ▁ ) ▁ , ▁int ▁ ( ▁* mm ▁ ) ▁ , ▁int ▁ ( ▁* y y ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is L e a p Y ear ▁= ▁0 ▁ ; ▁ @ ▁int ▁isValid Dat e ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* y y ▁ ) ▁ > = ▁ 1 9 00 ▁& & ▁ ( ▁* y y ▁ ) ▁< = ▁ 9 9 9 9 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* mm ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* mm ▁ ) ▁< = ▁ 1 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* mm ▁ ) ▁= = ▁ 2 ▁ ) ▁ { ▁ @ ▁is L e a p Y ear ▁= ▁ ( ▁* y y ▁ ) ▁ % ▁ 4 00 ▁= = ▁0 ▁ | | ▁ ( ▁ ( ▁* y y ▁ ) ▁ % ▁ 4 ▁= = ▁0 ▁& & ▁ ( ▁* y y ▁ ) ▁ % ▁100 ▁! = ▁0 ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* dd ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁ ( ▁ ( ▁* dd ▁ ) ▁< = ▁ 2 8 ▁ ) ▁ | | ▁ ( ▁ ( ▁* dd ▁ ) ▁= = ▁ 2 9 ▁& & ▁is L e a p Y ear ▁ ) ▁ ) ▁ ) ▁ { ▁ @ ▁isValid Dat e ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* mm ▁ ) ▁= = ▁ 4 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 6 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 9 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 1 1 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* dd ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* dd ▁ ) ▁< = ▁30 ▁ ) ▁ { ▁ @ ▁isValid Dat e ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* dd ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* dd ▁ ) ▁< = ▁ 3 1 ▁ ) ▁ { ▁ @ ▁isValid Dat e ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁isValid Dat e ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* s ▁ ) ▁ , ▁float ▁ ( ▁* h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁float ▁ base A rea ▁ ; ▁ @ ▁float ▁pi ▁= ▁3.14159 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ base A rea ▁= ▁ ( ▁ 3 ▁* ▁sqrt ▁ ( ▁ 3 ▁ ) ▁ / ▁ 2 ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁ base A rea ▁* ▁ ( ▁* h ▁ ) ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* feet ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁ y ard s ▁= ▁ ( ▁* feet ▁ ) ▁ / ▁3.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ y ard s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* b s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ g s ▁ ; ▁ @ ▁float ▁ c v ▁ ; ▁ @ ▁float ▁da ▁ ; ▁ @ ▁float ▁ hra ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b s ▁ ) ▁ > = ▁500 0 ▁ ) ▁ { ▁ @ ▁da ▁= ▁ 1 1 0 ▁* ▁ ( ▁* b s ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ hra ▁= ▁20 ▁* ▁ ( ▁* b s ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ c v ▁= ▁500 ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* b s ▁ ) ▁ > = ▁300 0 ▁& & ▁ ( ▁* b s ▁ ) ▁< ▁500 0 ▁ ) ▁ { ▁ @ ▁da ▁= ▁100 ▁* ▁ ( ▁* b s ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ hra ▁= ▁ 1 5 ▁* ▁ ( ▁* b s ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ c v ▁= ▁ 4 00 ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* b s ▁ ) ▁< ▁300 0 ▁ ) ▁ { ▁ @ ▁da ▁= ▁ 9 0 ▁* ▁ ( ▁* b s ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ hra ▁= ▁10 ▁* ▁ ( ▁* b s ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ c v ▁= ▁300 ▁ ; ▁ @ ▁ } ▁ @ ▁ g s ▁= ▁ ( ▁* b s ▁ ) ▁+ ▁da ▁+ ▁ hra ▁+ ▁ c v ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁da ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ hra ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ c v ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ g s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* octa l ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ base ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁dec i mal ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ ; ▁ ( ▁* octa l ▁ ) ▁ ; ▁ ( ▁* octa l ▁ ) ▁ / = ▁10 ▁ ) ▁ { ▁ @ ▁dec i mal ▁+ = ▁ ( ▁ ( ▁* octa l ▁ ) ▁ % ▁10 ▁ ) ▁* ▁ base ▁ ; ▁ @ ▁ base ▁* = ▁ 8 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁dec i mal ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* y ard s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁mile s ▁= ▁ ( ▁* y ard s ▁ ) ▁ / ▁ 1 7 6 0.0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* h p ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁w ▁ ; ▁ @ ▁ ; ▁ @ ▁w ▁= ▁ ( ▁* h p ▁ ) ▁* ▁746 . 0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁w ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁int ▁ ( ▁* A ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁fl ag ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ Temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* N ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* N ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ A ▁ [ ▁j ▁ ] ▁< ▁ A ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁ Temp ▁= ▁ A ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ A ▁ [ ▁i ▁ ] ▁= ▁ A ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ A ▁ [ ▁j ▁ ] ▁= ▁ Temp ▁ ; ▁ @ ▁fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁! f l ag ▁ ) ▁ brea k ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ A ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n 1 ▁ ) ▁ , ▁int ▁ ( ▁* n 2 ▁ ) ▁ , ▁int ▁ ( ▁* n 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* n 1 ▁ ) ▁ > ▁ ( ▁* n 2 ▁ ) ▁ ) ▁& & ▁ ( ▁ ( ▁* n 1 ▁ ) ▁ > ▁ ( ▁* n 3 ▁ ) ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n 1 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* n 2 ▁ ) ▁ > ▁ ( ▁* n 3 ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* n 2 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* n 3 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* n 1 ▁ ) ▁< ▁ ( ▁* n 2 ▁ ) ▁ ) ▁& & ▁ ( ▁ ( ▁* n 1 ▁ ) ▁< ▁ ( ▁* n 3 ▁ ) ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* n 1 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* n 2 ▁ ) ▁< ▁ ( ▁* n 3 ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* n 2 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ ( ▁* n 3 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁fo u n d Pos ▁= ▁ - 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁fo u n d Pos ▁= ▁i ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fo u n d Pos ▁! = ▁ - 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁fo u n d Pos ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁perim eter ▁= ▁ 4 ▁* ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁cnt ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁= = ▁0 ▁ ) ▁ @ ▁cnt ▁= ▁ 1 ▁ ; ▁ @ ▁el se ▁ { ▁ @ ▁int ▁ tNum ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁cnt ++ ▁ ; ▁ @ ▁ tNum ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁ tNum ▁ > ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁cnt ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* input _ inches ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ output _ c m ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ output _ c m ▁= ▁ ( ▁* input _ inches ▁ ) ▁* ▁ 2 .5 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ output _ c m ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* shift ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁< < ▁ ( ▁* shift ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* outer R adius ▁ ) ▁ , ▁float ▁ ( ▁* inner R adius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁circum fer e nce ▁= ▁ 2 ▁* ▁3.14159 ▁* ▁ ( ▁ ( ▁* outer R adius ▁ ) ▁+ ▁ ( ▁* inner R adius ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 2 ▁ ; ▁ @ ▁char ▁is Prime ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* number ▁ ) ▁ / ▁ 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Prime ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ n 1 ▁ ; ▁ @ ▁int ▁pro ▁ ; ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁dig ▁ ; ▁ @ ▁ ; ▁ @ ▁ n 1 ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁pro ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* n ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁dig ▁= ▁ ( ▁* n ▁ ) ▁ % ▁10 ▁ ; ▁ @ ▁sum ▁+ = ▁dig ▁ ; ▁ @ ▁pro ▁* = ▁dig ▁ ; ▁ @ ▁ ( ▁* n ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ / ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ n 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ n 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁pro ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁reverse ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁j ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* size ▁ ) ▁ - ▁ 1 ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁reverse ▁ [ ▁j ▁ ] ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁j ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁reverse ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* prin ci p al ▁ ) ▁ , ▁float ▁ ( ▁* rate ▁ ) ▁ , ▁float ▁ ( ▁* y ear ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ ci ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ci ▁= ▁ ( ▁* prin ci p al ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* y ear ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ci ▁= ▁ ci ▁+ ▁ ( ▁ ci ▁* ▁ ( ▁* rate ▁ ) ▁ / ▁100 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ ci ▁ - = ▁ ( ▁* prin ci p al ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ci ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* outer R adius ▁ ) ▁ , ▁float ▁ ( ▁* inner R adius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ d if f Square ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ d if f Square ▁= ▁ @ ▁ ( ▁* outer R adius ▁ ) ▁* ▁ ( ▁* outer R adius ▁ ) ▁ - ▁ ( ▁* inner R adius ▁ ) ▁* ▁ ( ▁* inner R adius ▁ ) ▁ ; ▁ @ ▁area ▁= ▁ d if f Square ▁* ▁3.14159 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* wDay ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* wDay ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁0 : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 1 : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 2 : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 3 : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 4 : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 5 : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 6 : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* dd ▁ ) ▁ , ▁int ▁ ( ▁* mm ▁ ) ▁ , ▁int ▁ ( ▁* y y ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* y y ▁ ) ▁ > = ▁ 1 9 00 ▁& & ▁ ( ▁* y y ▁ ) ▁< = ▁ 9 9 9 9 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* mm ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* mm ▁ ) ▁< = ▁ 1 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* dd ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* dd ▁ ) ▁< = ▁ 3 1 ▁ ) ▁& & ▁ @ ▁ ( ▁ ( ▁* mm ▁ ) ▁= = ▁ 1 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 3 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 5 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 7 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 8 ▁ | | ▁ @ ▁ ( ▁* mm ▁ ) ▁= = ▁10 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 1 2 ▁ ) ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁ ( ▁* dd ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* dd ▁ ) ▁< = ▁30 ▁ ) ▁& & ▁ @ ▁ ( ▁ ( ▁* mm ▁ ) ▁= = ▁ 4 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 6 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 9 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 1 1 ▁ ) ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁ ( ▁* dd ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* dd ▁ ) ▁< = ▁ 2 8 ▁ ) ▁& & ▁ ( ▁ ( ▁* mm ▁ ) ▁= = ▁ 2 ▁ ) ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁* dd ▁ ) ▁= = ▁ 2 9 ▁& & ▁ ( ▁* mm ▁ ) ▁= = ▁ 2 ▁& & ▁ @ ▁ ( ▁ ( ▁* y y ▁ ) ▁ % ▁ 4 00 ▁= = ▁0 ▁ | | ▁ ( ▁ ( ▁* y y ▁ ) ▁ % ▁ 4 ▁= = ▁0 ▁& & ▁ ( ▁* y y ▁ ) ▁ % ▁100 ▁! = ▁0 ▁ ) ▁ ) ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* fah ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁ ; ▁ @ ▁float ▁cel ▁ ; ▁ @ ▁ ; ▁ @ ▁ c onversion Factor ▁= ▁5.0 ▁ / ▁ 9 . 0 ▁ ; ▁ @ ▁cel ▁= ▁ ( ▁ ( ▁* fah ▁ ) ▁ - ▁32 ▁ ) ▁* ▁ c onversion Factor ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* fah ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁cel ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ - 1 ▁ ; ▁ @ ▁ } ▁ @ ▁result ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ) ▁ / ▁ ( ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* R ▁ ) ▁ , ▁float ▁ ( ▁* r ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁pi Square d ▁ ; ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁pi Square d ▁= ▁ 3 .141592653589793 2 384 6 ▁* ▁ 3 .141592653589793 2 384 6 ▁ ; ▁ @ ▁vol um e ▁= ▁pi Square d ▁* ▁ 2 ▁* ▁ ( ▁* R ▁ ) ▁* ▁ ( ▁* r ▁ ) ▁* ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* b ar ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ mm H g ▁= ▁ 7 5 0.0 6 2 ▁* ▁ ( ▁* b ar ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ prime ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ prime ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ prime ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ d if f ▁= ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁ ? ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ : ▁ ( ▁* b ▁ ) ▁ - ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁double ▁ ( ▁* value ▁ ) ▁ , ▁double ▁ ( ▁* m e an ▁ ) ▁ , ▁double ▁ ( ▁* stdDev i ation ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁double ▁ z S c or e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ z S c or e ▁= ▁ ( ▁ ( ▁* value ▁ ) ▁ - ▁ ( ▁* m e an ▁ ) ▁ ) ▁ / ▁ ( ▁* stdDev i ation ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ z S c or e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* con f i r m ▁ ) ▁ , ▁float ▁ ( ▁* de gree s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ grad ian s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* con f i r m ▁ ) ▁= = ▁ ' y ' ▁ | | ▁ ( ▁* con f i r m ▁ ) ▁= = ▁ ' Y ' ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ grad ian s ▁= ▁ ( ▁* de gree s ▁ ) ▁* ▁ ( ▁ 2 00.0 ▁ / ▁180.0 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ grad ian s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* user n ame ▁ ) ▁ , ▁char ▁ ( ▁* pas s wo rd ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁isValid ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ user n ame ▁ [ ▁0 ▁ ] ▁! = ▁ ' A ' ▁& & ▁ user n ame ▁ [ ▁0 ▁ ] ▁! = ▁ ' a ' ▁ | | ▁ @ ▁ user n ame ▁ [ ▁ 1 ▁ ] ▁! = ▁ ' D ' ▁& & ▁ user n ame ▁ [ ▁ 1 ▁ ] ▁! = ▁ ' d ' ▁ | | ▁ @ ▁ user n ame ▁ [ ▁ 2 ▁ ] ▁! = ▁ ' M ' ▁& & ▁ user n ame ▁ [ ▁ 2 ▁ ] ▁! = ▁ ' m ' ▁ | | ▁ @ ▁ user n ame ▁ [ ▁ 3 ▁ ] ▁! = ▁ ' I ' ▁& & ▁ user n ame ▁ [ ▁ 3 ▁ ] ▁! = ▁ ' i ' ▁ | | ▁ @ ▁ user n ame ▁ [ ▁ 4 ▁ ] ▁! = ▁ ' N ' ▁& & ▁ user n ame ▁ [ ▁ 4 ▁ ] ▁! = ▁ ' n ' ▁ | | ▁ user n ame ▁ [ ▁ 5 ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁isValid ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁isValid ▁& & ▁str c mp ▁ ( ▁ ( ▁* pas s wo rd ▁ ) ▁ , ▁ " k ar u n y a " ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁sum ▁= ▁sum ▁+ ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁ 5 ▁* ▁ ( ▁* side ▁ ) ▁* ▁ ( ▁* side ▁ ) ▁ ) ▁ / ▁ ( ▁ 4 ▁* ▁tan ▁ ( ▁ M _ P I ▁ / ▁ 5 ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 5 ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ++ ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁+ = ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁is Prime ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 2 ▁ ; ▁j ▁* ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁! i s Prime ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mm ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ in ▁ ; ▁ @ ▁ ; ▁ @ ▁ in ▁= ▁ ( ▁* mm ▁ ) ▁ / ▁10 ▁ / ▁ 2 .5 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* mm ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ in ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁perim eter ▁= ▁ ( ▁* side ▁ ) ▁* ▁ 5 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* d 1 ▁ ) ▁ , ▁float ▁ ( ▁* d 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁ ( ▁* d 1 ▁ ) ▁* ▁ ( ▁* d 2 ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁array _ 1 ▁ [ ▁ 5 ▁ ] ▁= ▁ { ▁0 ▁ , ▁ 1 ▁ , ▁ 2 ▁ , ▁ 3 ▁ , ▁ 4 ▁ } ▁ ; ▁ @ ▁int ▁array _ 2 ▁ [ ▁ 5 ▁ ] ▁= ▁ { ▁ 5 ▁ , ▁ 6 ▁ , ▁ 7 ▁ , ▁ 8 ▁ , ▁ 9 ▁ } ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁array _ 1 ▁ [ ▁i ▁ ] ▁= ▁array _ 1 ▁ [ ▁i ▁ ] ▁ ^ ▁array _ 2 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁array _ 2 ▁ [ ▁i ▁ ] ▁= ▁array _ 1 ▁ [ ▁i ▁ ] ▁ ^ ▁array _ 2 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁array _ 1 ▁ [ ▁i ▁ ] ▁= ▁array _ 1 ▁ [ ▁i ▁ ] ▁ ^ ▁array _ 2 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array _ 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁array _ 2 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* c ▁ ) ▁! = ▁0 ▁ ) ▁& & ▁ ( ▁ ( ▁* d ▁ ) ▁! = ▁0 ▁ ) ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ) ▁ / ▁ ( ▁ ( ▁* c ▁ ) ▁* ▁ ( ▁* d ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* first Re al ▁ ) ▁ , ▁float ▁ ( ▁* first I mag ▁ ) ▁ , ▁float ▁ ( ▁* second Re al ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* second I mag ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁total I mag ▁ ; ▁ @ ▁float ▁total Re al ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁total Re al ▁= ▁ ( ▁* first Re al ▁ ) ▁+ ▁ ( ▁* second Re al ▁ ) ▁ ; ▁ @ ▁total I mag ▁= ▁ ( ▁* first I mag ▁ ) ▁+ ▁ ( ▁* second I mag ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁total Re al ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁total I mag ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ 8 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁count ▁= ▁i ▁ % ▁ 2 ▁= = ▁0 ▁ ? ▁ 1 ▁ : ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ▁= ▁ 1 ▁ - ▁count ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mil li meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ inches ▁= ▁ ( ▁* mil li meters ▁ ) ▁* ▁ 0.0 3 9 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* mil li meters ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁next E ven O r O dd ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* num ▁ ) ▁& ▁ 1 ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁next E ven O r O dd ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁next E ven O r O dd ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁next E ven O r O dd ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁next E ven O r O dd ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁small ▁ ; ▁ @ ▁int ▁ b i g ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ b i g ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁ > ▁ b i g ▁ ) ▁ b i g ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁ > ▁ b i g ▁ ) ▁ b i g ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁small ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁< ▁small ▁ ) ▁small ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁< ▁small ▁ ) ▁small ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ b i g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁small ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* x ▁ ) ▁ , ▁int ▁ ( ▁* y ▁ ) ▁ , ▁int ▁ ( ▁* z ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁min ▁ ; ▁ @ ▁int ▁max ▁ ; ▁ @ ▁ ; ▁ @ ▁max ▁= ▁min ▁= ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* y ▁ ) ▁ > ▁max ▁ ) ▁max ▁= ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* y ▁ ) ▁< ▁min ▁ ) ▁min ▁= ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* z ▁ ) ▁ > ▁max ▁ ) ▁max ▁= ▁ ( ▁* z ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* z ▁ ) ▁< ▁min ▁ ) ▁min ▁= ▁ ( ▁* z ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁max ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁min ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* posit io n ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* size ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* posit io n ▁ ) ▁ > ▁ ( ▁* size ▁ ) ▁+ ▁ 1 ▁ | | ▁ ( ▁* posit io n ▁ ) ▁< = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* size ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* size ▁ ) ▁ ; ▁i ▁ > = ▁ ( ▁* posit io n ▁ ) ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁i ▁ - ▁ 1 ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁arr ▁ [ ▁ ( ▁* posit io n ▁ ) ▁ - ▁ 1 ▁ ] ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* size ▁ ) ▁ ++ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ge ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base L ength ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁ ( ▁* base L ength ▁ ) ▁* ▁ ( ▁* base L ength ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁ > = ▁ 1 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* n ame ▁ ) ▁ , ▁int ▁ ( ▁* a ge ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁pri ce ▁= ▁ 6 00.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ge ▁ ) ▁< ▁ 6 ▁ | | ▁ ( ▁* a ge ▁ ) ▁ > = ▁ 6 0 ▁ ) ▁ { ▁ @ ▁pri ce ▁= ▁ 4 2 0.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁pri ce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Pos ▁ ; ▁ @ ▁int ▁min Pos ▁ ; ▁ @ ▁int ▁max Val ▁ ; ▁ @ ▁int ▁min Val ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁min Val ▁= ▁max Val ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁min Pos ▁= ▁max Pos ▁= ▁0 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁< ▁min Val ▁ ) ▁ { ▁ @ ▁min Val ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁min Pos ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ > ▁max Val ▁ ) ▁ { ▁ @ ▁max Val ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁max Pos ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁min Val ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁min Pos ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁max Val ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁max Pos ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* first ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ second ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ second ▁ [ ▁i ▁ ] ▁= ▁ first ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ first ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁i ▁= = ▁ ( ▁* size ▁ ) ▁ - ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ second ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ surface A rea ▁= ▁ @ ▁ 2 ▁* ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁+ ▁ 2 ▁* ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* pas cal s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ at m ▁ ; ▁ @ ▁ ; ▁ @ ▁ at m ▁= ▁ ( ▁* pas cal s ▁ ) ▁ / ▁10 1 3 2 5 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ at m ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ - ▁i ▁ - ▁ 1 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ > ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* num ▁ ) ▁ / ▁10 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁ ; ▁ @ ▁float ▁ ki lo meters ▁ ; ▁ @ ▁ c onversion Factor ▁= ▁100 0.0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ki lo meters ▁= ▁ ( ▁* meters ▁ ) ▁ / ▁ c onversion Factor ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ki lo meters ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* b s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ g s ▁ ; ▁ @ ▁float ▁ c v ▁ ; ▁ @ ▁float ▁da ▁ ; ▁ @ ▁float ▁ hra ▁ ; ▁ @ ▁ ; ▁ @ ▁da ▁= ▁ ( ▁ ( ▁* b s ▁ ) ▁ > = ▁500 0 ▁ ) ▁ ? ▁ 1 . 1 ▁* ▁ ( ▁* b s ▁ ) ▁ : ▁ ( ▁ ( ▁ ( ▁* b s ▁ ) ▁ > = ▁300 0 ▁ ) ▁ ? ▁ ( ▁* b s ▁ ) ▁ : ▁0 . 9 ▁* ▁ ( ▁* b s ▁ ) ▁ ) ▁ ; ▁ @ ▁ hra ▁= ▁ ( ▁ ( ▁* b s ▁ ) ▁ > = ▁500 0 ▁ ) ▁ ? ▁0 . 2 ▁* ▁ ( ▁* b s ▁ ) ▁ @ ▁ : ▁ ( ▁ ( ▁ ( ▁* b s ▁ ) ▁ > = ▁300 0 ▁ ) ▁ ? ▁0 . 1 5 ▁* ▁ ( ▁* b s ▁ ) ▁ : ▁0 . 1 ▁* ▁ ( ▁* b s ▁ ) ▁ ) ▁ ; ▁ @ ▁ c v ▁= ▁ ( ▁ ( ▁* b s ▁ ) ▁ > = ▁500 0 ▁ ) ▁ ? ▁500 ▁ : ▁ ( ▁ ( ▁ ( ▁* b s ▁ ) ▁ > = ▁300 0 ▁ ) ▁ ? ▁ 4 00 ▁ : ▁300 ▁ ) ▁ ; ▁ @ ▁ g s ▁= ▁ ( ▁* b s ▁ ) ▁+ ▁da ▁+ ▁ hra ▁+ ▁ c v ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁da ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ hra ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ c v ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ g s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁char ▁ ( ▁* ch ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁int ▁ val id O per ation ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁! val id O per ation ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* ch ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ ' + ' : ▁ @ ▁ case ▁ ' - ' : ▁ @ ▁ case ▁'*' : ▁ @ ▁ case ▁ ' / ' : ▁ @ ▁ case ▁ ' % ' : ▁ @ ▁ val id O per ation ▁= ▁ 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* ch ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ ' + ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁+ ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' - ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁ - ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁'*' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁* ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' / ' : ▁ @ ▁result ▁= ▁ ( ▁* num 2 ▁ ) ▁! = ▁0 ▁ ? ▁ ( ▁float ▁ ) ▁ ( ▁* num 1 ▁ ) ▁ / ▁ ( ▁* num 2 ▁ ) ▁ : ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' % ' : ▁ @ ▁result ▁= ▁ ( ▁* num 2 ▁ ) ▁! = ▁0 ▁ ? ▁ ( ▁* num 1 ▁ ) ▁ % ▁ ( ▁* num 2 ▁ ) ▁ : ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* num 2 ▁ ) ▁! = ▁0 ▁ | | ▁ ( ▁* ch ▁ ) ▁! = ▁ ' / ' ▁& & ▁ ( ▁* ch ▁ ) ▁! = ▁ ' % ' ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁ > > ▁ 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* r 1 ▁ ) ▁ , ▁float ▁ ( ▁* i 1 ▁ ) ▁ , ▁float ▁ ( ▁* r 2 ▁ ) ▁ , ▁float ▁ ( ▁* i 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁i S um ▁ ; ▁ @ ▁float ▁ r S um ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ r S um ▁= ▁ ( ▁* r 1 ▁ ) ▁+ ▁ ( ▁* r 2 ▁ ) ▁ ; ▁ @ ▁i S um ▁= ▁ ( ▁* i 1 ▁ ) ▁+ ▁ ( ▁* i 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ r S um ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i S um ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁ ^ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁func 1 ▁ ( ▁int ▁ n ▁ ) ▁ ; ▁ @ ▁vo id ▁func 2 ▁ ( ▁int ▁ n ▁ ) ▁ ; ▁ @ ▁vo id ▁func 3 ▁ ( ▁int ▁ n ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁func 1 ▁ ( ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁func 2 ▁ ( ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁func 3 ▁ ( ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁func 1 ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁ n ▁= = ▁0 ▁ ) ▁ @ ▁re tur n ▁ ; ▁ @ ▁el se ▁ { ▁ @ ▁func 1 ▁ ( ▁ n ▁ - ▁ 1 ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ n ▁ ; ▁i ++ ▁ ) ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁func 2 ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁ n ▁= = ▁0 ▁ ) ▁ @ ▁re tur n ▁ ; ▁ @ ▁el se ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ n ▁ ; ▁i ++ ▁ ) ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁func 2 ▁ ( ▁ n ▁ - ▁ 1 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁func 3 ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁ n ▁= = ▁0 ▁ ) ▁ @ ▁re tur n ▁ ; ▁ @ ▁el se ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ n ▁ ; ▁i ▁ > = ▁ 1 ▁ ; ▁i - - ▁ ) ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁func 3 ▁ ( ▁ n ▁ - ▁ 1 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ value s ▁ [ ▁ 3 ▁ ] ▁ ; ▁ @ ▁ value s ▁ [ ▁0 ▁ ] ▁= ▁100 ▁ ; ▁ @ ▁ value s ▁ [ ▁ 1 ▁ ] ▁= ▁ 2 00 ▁ ; ▁ @ ▁ value s ▁ [ ▁ 2 ▁ ] ▁= ▁300 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ value s ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ value s ▁ [ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ value s ▁ [ ▁ 2 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ value s ▁ [ ▁0 ▁ ] ▁+ = ▁10 ▁ ; ▁ @ ▁ value s ▁ [ ▁ 1 ▁ ] ▁+ = ▁10 ▁ ; ▁ @ ▁ value s ▁ [ ▁ 2 ▁ ] ▁+ = ▁10 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ value s ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ value s ▁ [ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ value s ▁ [ ▁ 2 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 7 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 8 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ a ▁= ▁ 5 ▁ ; ▁ @ ▁int ▁* p a ▁ ; ▁ @ ▁int ▁* * p p a ▁ ; ▁ @ ▁ p a ▁= ▁& a ▁ ; ▁ @ ▁ p p a ▁= ▁& p a ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁& a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ p a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁* p a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁& p a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ p p a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁* p p a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 7 ▁ ) ▁= ▁* * p p a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 8 ▁ ) ▁= ▁& p p a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁float ▁ base A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ base A rea ▁= ▁ ( ▁sqrt ▁ ( ▁ 3 ▁ ) ▁ / ▁ 4 ▁ ) ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁ base A rea ▁* ▁ ( ▁* h ▁ ) ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* num 1 ▁ ) ▁ , ▁float ▁ ( ▁* num 2 ▁ ) ▁ , ▁float ▁ ( ▁* num 3 ▁ ) ▁ , ▁float ▁ ( ▁* num 4 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁ ( ▁* num 1 ▁ ) ▁+ ▁ ( ▁* num 2 ▁ ) ▁+ ▁ ( ▁* num 3 ▁ ) ▁+ ▁ ( ▁* num 4 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* user ▁ ) ▁ , ▁int ▁ ( ▁* input ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁str c mp ▁ ( ▁ ( ▁* user ▁ ) ▁ , ▁ " a d m in 1 2 3 " ▁ ) ▁= = ▁0 ▁& & ▁ ( ▁* input ▁ ) ▁= = ▁ 4 3 2 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁nth O dd ▁ ; ▁ @ ▁ ; ▁ @ ▁nth O dd ▁= ▁ 2 ▁* ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth O dd ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* input W att s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ output Ho r se power ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ output Ho r se power ▁= ▁ ( ▁* input W att s ▁ ) ▁ / ▁746 . 0 f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ output Ho r se power ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁* ▁ ( ▁* d ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ - 1 ▁ ; ▁ @ ▁ } ▁ @ ▁result ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ) ▁ / ▁ ( ▁ ( ▁* c ▁ ) ▁* ▁ ( ▁* d ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* digit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁cnt ▁ ; ▁ @ ▁int ▁ tNum ▁ ; ▁ @ ▁int ▁rem ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁cnt ▁= ▁0 ▁ ; ▁ @ ▁ tNum ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁ tNum ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁rem ▁= ▁ tNum ▁ % ▁10 ▁ ; ▁ @ ▁ if ▁ ( ▁rem ▁= = ▁ ( ▁* digit ▁ ) ▁ ) ▁cnt ++ ▁ ; ▁ @ ▁ tNum ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* digit ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁cnt ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁< < ▁ 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁char ▁str 2 ▁ [ ▁20 ▁ ] ▁ ; ▁ @ ▁char ▁str 1 ▁ [ ▁20 ▁ ] ▁ ; ▁ @ ▁int ▁ d if f ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ | | ▁str 2 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁str 2 ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁ d if f ▁= ▁ 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁! d if f ▁& & ▁str 1 ▁ [ ▁i ▁ ] ▁= = ▁'\ 0 ' ▁& & ▁str 2 ▁ [ ▁i ▁ ] ▁= = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* digit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁cnt ▁ ; ▁ @ ▁int ▁ tNum ▁ ; ▁ @ ▁int ▁rem ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁cnt ▁= ▁0 ▁ ; ▁ @ ▁ tNum ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁ tNum ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁rem ▁= ▁ tNum ▁ % ▁10 ▁ ; ▁ @ ▁ if ▁ ( ▁rem ▁= = ▁ ( ▁* digit ▁ ) ▁ ) ▁cnt ++ ▁ ; ▁ @ ▁ tNum ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁cnt ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁sqrt 5 ▁ ; ▁ @ ▁float ▁ g o l de n R at io ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁sqrt 5 ▁= ▁sqrt ▁ ( ▁ 5 ▁ ) ▁ ; ▁ @ ▁ g o l de n R at io ▁= ▁ ( ▁ 1 ▁+ ▁sqrt 5 ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁area ▁= ▁ ( ▁ 5 ▁* ▁ ( ▁* side ▁ ) ▁* ▁ ( ▁* side ▁ ) ▁ ) ▁ / ▁ ( ▁ 4 ▁* ▁tan ▁ ( ▁ M _ P I ▁ / ▁ 5 ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁ ( ▁ ( ▁sqrt ▁ ( ▁ 3 ▁ ) ▁ / ▁4.0 f ▁ ) ▁* ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ) ▁* ▁ ( ▁* h ▁ ) ▁ ) ▁ / ▁3.0 f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* upper L im it ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁div ▁ ; ▁ @ ▁int ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* upper L im it ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁ num ▁= ▁ 3 ▁ ; ▁ num ▁< ▁ ( ▁* upper L im it ▁ ) ▁ ; ▁ num ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁div ▁= ▁ 3 ▁ ; ▁div ▁* ▁div ▁< = ▁ num ▁ ; ▁div ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁ % ▁div ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ g o t o ▁ n o t _ prime ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ n o t _ prime : ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* wo rd ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ le f t Index ▁= ▁0 ▁ ; ▁ @ ▁int ▁ r i g h t Index ▁ ; ▁ @ ▁int ▁is Pa l in d r o m e ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ r i g h t Index ▁= ▁str le n ▁ ( ▁ ( ▁* wo rd ▁ ) ▁ ) ▁ - ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ le f t Index ▁< ▁ r i g h t Index ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ wo rd ▁ [ ▁ le f t Index ▁ ] ▁! = ▁ wo rd ▁ [ ▁ r i g h t Index ▁ ] ▁ ) ▁ { ▁ @ ▁is Pa l in d r o m e ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ le f t Index ++ ▁ ; ▁ @ ▁ r i g h t Index - - ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Pa l in d r o m e ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁float ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁i ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* user n ame ▁ ) ▁ , ▁char ▁ ( ▁* pas s wo rd ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁str case c mp ▁ ( ▁ ( ▁* user n ame ▁ ) ▁ , ▁ " a d m in " ▁ ) ▁= = ▁0 ▁& & ▁ @ ▁str c mp ▁ ( ▁ ( ▁* pas s wo rd ▁ ) ▁ , ▁ " k ar u n y a " ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁min ▁ ; ▁ @ ▁int ▁max ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁max ▁= ▁min ▁= ▁arr ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ > ▁max ▁ ) ▁max ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁< ▁min ▁ ) ▁min ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁max ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁min ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁large st ▁= ▁arr ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁int ▁small est ▁= ▁arr ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁temp ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ if ▁ ( ▁temp ▁ > ▁large st ▁ ) ▁ { ▁ @ ▁large st ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁temp ▁< ▁small est ▁ ) ▁ { ▁ @ ▁small est ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁small est ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁* ▁ ( ▁* d ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* i tem ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁fo u n d ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁ ( ▁* i tem ▁ ) ▁ ) ▁ { ▁ @ ▁fo u n d ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* i tem ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁! f o u n d ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* i tem ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ input Name ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁ pos ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ input Name ▁ [ ▁ pos ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁char ▁ ch ▁= ▁ input Name ▁ [ ▁ pos ▁ ] ▁ ; ▁ @ ▁ if ▁ ( ▁ ch ▁= = ▁ ' a ' ▁ | | ▁ ch ▁= = ▁ ' e ' ▁ | | ▁ ch ▁= = ▁ ' i ' ▁ | | ▁ ch ▁= = ▁ ' o ' ▁ | | ▁ ch ▁= = ▁ ' u ' ▁ ) ▁ { ▁ @ ▁ input Name ▁ [ ▁ pos ▁ ] ▁= ▁ ch ▁ - ▁32 ▁ ; ▁ @ ▁ } ▁ @ ▁ pos ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ input Name ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp Number ▁ ; ▁ @ ▁int ▁total Pro duc t ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ totalS um ▁= ▁0 ▁ ; ▁ @ ▁int ▁ digit ▁ ; ▁ @ ▁ ; ▁ @ ▁temp Number ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁temp Number ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ digit ▁= ▁temp Number ▁ % ▁10 ▁ ; ▁ @ ▁ totalS um ▁= ▁ totalS um ▁+ ▁ digit ▁ ; ▁ @ ▁total Pro duc t ▁= ▁total Pro duc t ▁* ▁ digit ▁ ; ▁ @ ▁temp Number ▁= ▁temp Number ▁ / ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ totalS um ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁total Pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ x ▁= ▁30 ▁ ; ▁ @ ▁float ▁ y ▁= ▁ 4 0 .5 ▁ ; ▁ @ ▁int ▁ x _ in crement ▁= ▁10 ▁ ; ▁ @ ▁float ▁ y _ de crement ▁= ▁ 5 .5 ▁ ; ▁ @ ▁int ▁ n e w _ x ▁= ▁ x ▁+ ▁ x _ in crement ▁ ; ▁ @ ▁float ▁ n e w _ y ▁= ▁ y ▁ - ▁ y _ de crement ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ x ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ n e w _ x ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ y ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ n e w _ y ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁ ) ▁ { ▁ @ ▁result ▁= ▁i ▁* ▁ 2 ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* centimeter s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ inches _ converted ▁ ; ▁ @ ▁ ; ▁ @ ▁ inches _ converted ▁= ▁ ( ▁* centimeter s ▁ ) ▁ / ▁ 2 .5 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* centimeter s ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ inches _ converted ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length I n Meter s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ length I n Y ard s ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ length I n Y ard s ▁= ▁ ( ▁* length I n Meter s ▁ ) ▁* ▁1.0 9 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ length I n Y ard s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁min ▁ ; ▁ @ ▁int ▁max ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* size ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁max ▁= ▁arr ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁min ▁= ▁arr ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ > ▁max ▁ ) ▁ { ▁ @ ▁max ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁< ▁min ▁ ) ▁ { ▁ @ ▁min ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁max ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁min ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁odd Count ▁= ▁0 ▁ ; ▁ @ ▁int ▁even Count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ? ▁ 1 ▁ : ▁0 ▁ ) ▁ ) ▁ { ▁ @ ▁even Count ++ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁odd Count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁even Count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁odd Count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁* ▁i ▁< = ▁ ( ▁* limit ▁ ) ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* octa l ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁dec i mal ▁ ; ▁ @ ▁int ▁ base ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* octa l ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁dec i mal ▁= ▁dec i mal ▁+ ▁ ( ▁ ( ▁* octa l ▁ ) ▁ % ▁10 ▁ ) ▁* ▁ base ▁ ; ▁ @ ▁ ( ▁* octa l ▁ ) ▁= ▁ ( ▁* octa l ▁ ) ▁ / ▁10 ▁ ; ▁ @ ▁ base ▁= ▁ base ▁* ▁ 8 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁dec i mal ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ d if f ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ) ▁* ▁ ( ▁ ( ▁* a ▁ ) ▁ > = ▁ ( ▁* b ▁ ) ▁ ) ▁+ ▁ ( ▁ ( ▁* b ▁ ) ▁ - ▁ ( ▁* a ▁ ) ▁ ) ▁* ▁ ( ▁ ( ▁* b ▁ ) ▁ > ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* e ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁float ▁sum 2 ▁ ; ▁ @ ▁float ▁sum 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁sum 1 ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁sum 2 ▁= ▁ ( ▁* d ▁ ) ▁+ ▁ ( ▁* e ▁ ) ▁ ; ▁ @ ▁result ▁= ▁sum 1 ▁ - ▁sum 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁ 3 ▁* ▁sqrt ▁ ( ▁ 3 ▁ ) ▁ / ▁ 2 ▁ ) ▁* ▁ ( ▁ ( ▁* side ▁ ) ▁* ▁ ( ▁* side ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* r an ge ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* r an ge ▁ ) ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁* ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ b u f fer ▁ [ ▁10 ▁ ] ▁= ▁ { ▁0 ▁ } ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ m e m se t ▁ ( ▁ b u f fer ▁ , ▁ ' - ' ▁ , ▁ 9 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 9 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ b u f fer ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ m e m se t ▁ ( ▁ b u f fer ▁ , ▁ ' 1 ' ▁ , ▁ 9 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 9 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ b u f fer ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ m e m se t ▁ ( ▁ b u f fer ▁ , ▁0 x 1 F ▁ , ▁ 9 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ b u f fer ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* fah ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁cel ▁ ; ▁ @ ▁ ; ▁ @ ▁cel ▁= ▁ ( ▁ ( ▁* fah ▁ ) ▁ - ▁32 ▁ ) ▁ / ▁ 1 . 8 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* fah ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁cel ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁+ ▁10 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁< = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁i ▁= ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁w h ile ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* num ▁ ) ▁ / = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* A ▁ ) ▁ , ▁int ▁ ( ▁* B ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ ( ▁* A ▁ ) ▁! = ▁0 ▁ | | ▁ ( ▁* number ▁ ) ▁ % ▁ ( ▁* B ▁ ) ▁! = ▁0 ▁ ) ▁ g o t o ▁ n o t _ divi s ible ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* A ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* B ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ g o t o ▁ end ▁ ; ▁ @ ▁ n o t _ divi s ible ▁ : ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* A ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ ( ▁* B ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ end : ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ value ▁= ▁ 3 4 1 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* R ▁ ) ▁ , ▁float ▁ ( ▁* r ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ surface A rea ▁= ▁ @ ▁ 4 ▁* ▁ 3 .141592653589793 2 384 6 ▁* ▁ 3 .141592653589793 2 384 6 ▁* ▁ ( ▁* R ▁ ) ▁* ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ ( ▁* side ▁ ) ▁* ▁ 6 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ a ▁= ▁ ( ▁ 4 ▁ , ▁ 6 ▁ , ▁ 8 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ num 3 ▁= ▁ 1 5 ▁ ; ▁ @ ▁int ▁ num 2 ▁= ▁10 ▁ ; ▁ @ ▁int ▁ num 1 ▁= ▁ 5 ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ k e y ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ k e y ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁j ▁= ▁i ▁ - ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁j ▁ > = ▁0 ▁& & ▁arr ▁ [ ▁j ▁ ] ▁ > ▁ k e y ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁arr ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁j ▁= ▁j ▁ - ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁arr ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁ k e y ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* user ▁ ) ▁ , ▁int ▁ ( ▁* input ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ pas s wo rd ▁= ▁ 1 2 3 4 ▁ ; ▁ @ ▁int ▁ a u th Fl ag ▁= ▁0 ▁ ; ▁ @ ▁char ▁ user n ame ▁ [ ▁ ] ▁= ▁ " user 1 2 3 " ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁str c mp ▁ ( ▁ ( ▁* user ▁ ) ▁ , ▁ user n ame ▁ ) ▁= = ▁0 ▁ ) ▁& & ▁ ( ▁ ( ▁* input ▁ ) ▁= = ▁ pas s wo rd ▁ ) ▁ ) ▁ { ▁ @ ▁ a u th Fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ a u th Fl ag ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* num ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁sum ▁= ▁0 ▁ ; ▁ @ ▁int ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁count ▁= ▁ 1 ▁ ; ▁count ▁< = ▁ 4 ▁ ; ▁count ++ ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁sum ▁ - = ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* start ▁ ) ▁ , ▁int ▁ ( ▁* end ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* end ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁counter ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁counter ▁< = ▁ ( ▁* end ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁counter ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁counter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁counter ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mph 1 ▁ ) ▁ , ▁float ▁ ( ▁* mph 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁knots 2 ▁ ; ▁ @ ▁float ▁knots 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁knots 1 ▁= ▁ ( ▁* mph 1 ▁ ) ▁ / ▁ 1 . 1 5 0 7 8 f ▁ ; ▁ @ ▁knots 2 ▁= ▁ ( ▁* mph 2 ▁ ) ▁ / ▁ 1 . 1 5 0 7 8 f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁knots 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁knots 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁int ▁ ( ▁* A ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁min _ id x ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ Temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* N ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁min _ id x ▁= ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* N ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ A ▁ [ ▁j ▁ ] ▁< ▁ A ▁ [ ▁min _ id x ▁ ] ▁ ) ▁ { ▁ @ ▁min _ id x ▁= ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ Temp ▁= ▁ A ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ A ▁ [ ▁i ▁ ] ▁= ▁ A ▁ [ ▁min _ id x ▁ ] ▁ ; ▁ @ ▁ A ▁ [ ▁min _ id x ▁ ] ▁= ▁ Temp ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ A ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base ▁ ) ▁ , ▁float ▁ ( ▁* s l ant ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁pow ▁ ( ▁ ( ▁* base ▁ ) ▁ , ▁ 2 ▁ ) ▁+ ▁ 4 ▁* ▁0 .5 ▁* ▁ ( ▁* base ▁ ) ▁* ▁ ( ▁* s l ant ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁ slantHeight ▁= ▁sqrt ▁ ( ▁ ( ▁* height ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁+ ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ) ▁ ; ▁ @ ▁ surface A rea ▁= ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁ ( ▁* radius ▁ ) ▁+ ▁ slantHeight ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁ > > ▁ 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 2 ▁ ) ▁ { ▁ @ ▁ case ▁0 : ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ case ▁ 1 : ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁float ▁temp ▁ ; ▁ @ ▁float ▁sumOf Square s ▁= ▁0 ▁ ; ▁ @ ▁float ▁variance ▁ ; ▁ @ ▁float ▁ m e an ▁ ; ▁ @ ▁float ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁sum ▁+ = ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ m e an ▁= ▁sum ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁temp ▁= ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ ; ▁ @ ▁sumOf Square s ▁+ = ▁temp ▁* ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁variance ▁= ▁sumOf Square s ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ m e an ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁variance ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁float ▁ m e an Pow ▁ ; ▁ @ ▁float ▁ b c Pow ▁ ; ▁ @ ▁float ▁ a c Pow ▁ ; ▁ @ ▁float ▁ a b Pow ▁ ; ▁ @ ▁float ▁ p ▁= ▁ 3 .141592653589793 2 384 6 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ a b Pow ▁= ▁pow ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ , ▁1.6 f ▁ ) ▁ ; ▁ @ ▁ a c Pow ▁= ▁pow ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ , ▁1.6 f ▁ ) ▁ ; ▁ @ ▁ b c Pow ▁= ▁pow ▁ ( ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ , ▁1.6 f ▁ ) ▁ ; ▁ @ ▁ m e an Pow ▁= ▁ ( ▁ a b Pow ▁+ ▁ a c Pow ▁+ ▁ b c Pow ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ surface A rea ▁= ▁ 4 ▁* ▁ p ▁* ▁pow ▁ ( ▁ m e an Pow ▁ , ▁ 1 ▁ / ▁1.6 f ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* row s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁space ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ - 1 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* row s ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁ ( ▁* row s ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁j ▁= = ▁i ▁ | | ▁j ▁= = ▁ ( ▁* row s ▁ ) ▁ - ▁i ▁+ ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ ( ▁* row s ▁ ) ▁+ ▁ 1 ▁ ; ▁j ▁< = ▁ 2 ▁* ▁ ( ▁* row s ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁j ▁= = ▁i ▁+ ▁ ( ▁* row s ▁ ) ▁ | | ▁j ▁= = ▁ 3 ▁* ▁ ( ▁* row s ▁ ) ▁ - ▁i ▁+ ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* x ▁ ) ▁ , ▁int ▁ ( ▁* y ▁ ) ▁ , ▁int ▁ ( ▁* z ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* x ▁ ) ▁ > ▁ ( ▁* y ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* x ▁ ) ▁ > ▁ ( ▁* z ▁ ) ▁ ) ▁ @ ▁large st ▁= ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁large st ▁= ▁ ( ▁* z ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* y ▁ ) ▁ > ▁ ( ▁* z ▁ ) ▁ ) ▁ @ ▁large st ▁= ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁large st ▁= ▁ ( ▁* z ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* ed ge ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol O f P y r a m id ▁ ; ▁ @ ▁float ▁area O f Base ▁ ; ▁ @ ▁float ▁root 3 ▁= ▁sqrt ▁ ( ▁ 3 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area O f Base ▁= ▁ ( ▁ ( ▁ 3 ▁* ▁root 3 ▁ ) ▁ / ▁ 2 ▁ ) ▁* ▁ ( ▁ ( ▁* ed ge ▁ ) ▁* ▁ ( ▁* ed ge ▁ ) ▁ ) ▁ ; ▁ @ ▁vol O f P y r a m id ▁= ▁area O f Base ▁* ▁ ( ▁* height ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol O f P y r a m id ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ b l an k ▁= ▁0 ▁ ; ▁ @ ▁int ▁ line s ▁= ▁ 6 ▁ ; ▁ @ ▁char ▁symbol ▁= ▁ ' A ' ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁ d if f ▁ [ ▁ 7 ▁ ] ▁= ▁ { ▁0 ▁ , ▁ 1 ▁ , ▁ 3 ▁ , ▁ 5 ▁ , ▁ 7 ▁ , ▁ 9 ▁ , ▁ 1 1 ▁ } ▁ ; ▁ @ ▁ k ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ line s ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁symbol ▁= ▁ ' A ' ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁ ; ▁j ▁ > = ▁0 ▁ ; ▁j - - ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁symbol ++ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ b l an k ▁= ▁ d if f ▁ [ ▁ k ++ ▁ ] ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ b l an k ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁symbol ▁= ▁ ' F ' ▁ - ▁ ( ▁ b l an k ▁ / ▁ 2 ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ b l an k ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁temp ▁= ▁i ▁ - ▁ 1 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁temp ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< = ▁temp ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁symbol - - ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 7 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁int _ var ▁ ; ▁ @ ▁float ▁float _ var ▁ ; ▁ @ ▁char ▁char _ var ▁ ; ▁ @ ▁int ▁int _ array ▁ [ ▁ 5 ▁ ] ▁ ; ▁ @ ▁int ▁ size ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ size of ▁ ( ▁int _ var ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ size of ▁ ( ▁float _ var ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ size ▁= ▁ size of ▁ ( ▁char _ var ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ size of ▁ ( ▁char _ var ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ size of ▁ ( ▁ s h or t ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ size of ▁ ( ▁ long ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ size of ▁ ( ▁double ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 7 ▁ ) ▁= ▁ size of ▁ ( ▁int _ array ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* basic Pa y ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁employee Per c entag e ▁= ▁ 1 2 .5 f ▁ ; ▁ @ ▁float ▁employer Per c entag e ▁= ▁12.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* basic Pa y ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁ ( ▁* basic Pa y ▁ ) ▁* ▁employee Per c entag e ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁ ( ▁* basic Pa y ▁ ) ▁* ▁employer Per c entag e ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁rem ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁rem ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁rem ▁ > = ▁ ( ▁* b ▁ ) ▁ ; ▁rem ▁ - = ▁ ( ▁* b ▁ ) ▁ ) ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁rem ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁count ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁nth Cub ic ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁count ▁< ▁ 3 ▁ ) ▁ { ▁ @ ▁nth Cub ic ▁* = ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth Cub ic ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁add T wo Number s ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ { ▁re tur n ▁ x ▁+ ▁ y ▁ ; ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁ b ▁= ▁20 ▁ ; ▁ @ ▁int ▁ a ▁= ▁10 ▁ ; ▁ @ ▁sum ▁= ▁add T wo Number s ▁ ( ▁ a ▁ , ▁ b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* r ▁ ) ▁ , ▁float ▁ ( ▁* h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁vol ▁= ▁3.14159 ▁* ▁ ( ▁* r ▁ ) ▁* ▁ ( ▁* r ▁ ) ▁* ▁ ( ▁* h ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ( ▁* side L ength ▁ ) ▁= ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* side L ength ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* ki lo meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁mile s ▁ ; ▁ @ ▁float ▁ c onversion Factor ▁= ▁1.6 0 9 3 4 4 ▁ ; ▁ @ ▁ ; ▁ @ ▁mile s ▁= ▁ ( ▁* ki lo meters ▁ ) ▁ / ▁ c onversion Factor ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* ki lo meters ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ / ▁ 2 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mil li meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁ centimeter s ▁= ▁ ( ▁* mil li meters ▁ ) ▁ / ▁ 1 0.0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ centimeter s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* w id th ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁last Digit ▁= ▁ ( ▁* num ▁ ) ▁ % ▁10 ▁ ; ▁ @ ▁int ▁result ▁= ▁ ( ▁* num ▁ ) ▁ - ▁last Digit ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base L ength ▁ ) ▁ , ▁float ▁ ( ▁* slantHeight ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ surface A rea ▁= ▁ @ ▁ ( ▁* base L ength ▁ ) ▁* ▁ ( ▁* base L ength ▁ ) ▁+ ▁ 2 ▁* ▁ ( ▁* base L ength ▁ ) ▁* ▁ ( ▁* slantHeight ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base 1 ▁ ) ▁ , ▁float ▁ ( ▁* base 2 ▁ ) ▁ , ▁float ▁ ( ▁* ve r t _ height ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁calculate d _ area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁calculate d _ area ▁= ▁0 .5 ▁* ▁ ( ▁ ( ▁* base 1 ▁ ) ▁+ ▁ ( ▁* base 2 ▁ ) ▁ ) ▁* ▁ ( ▁* ve r t _ height ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁calculate d _ area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ x ▁= ▁100 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ x ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ x ▁= ▁ 2 00 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ x ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ x ▁= ▁300 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ x ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ x ▁= ▁100 ▁+ ▁10 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ x ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ x ▁= ▁ 2 00 ▁+ ▁10 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ x ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ x ▁= ▁300 ▁+ ▁10 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ x ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* k mph ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁knots ▁ ; ▁ @ ▁char ▁ input M s g ▁ [ ▁ ] ▁= ▁ " E n t e r ▁ speed ▁ in ▁ ki lo meters ▁ per ▁ h o u r : ▁ " ▁ ; ▁ @ ▁char ▁ output M s g ▁ [ ▁ ] ▁= ▁ " T h e ▁ speed ▁ in ▁knots ▁is ▁ " ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ input M s g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁knots ▁= ▁ ( ▁* k mph ▁ ) ▁ / ▁ 1 . 8 5 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ output M s g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁& ▁ 1 ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< = ▁sqrt ▁ ( ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁! ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁i ▁ ) ▁ ) ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁i ▁ > ▁sqrt ▁ ( ▁ ( ▁* num ▁ ) ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* num ▁ ) ▁& ▁ 1 ▁ ; ▁ @ ▁ if ▁ ( ▁result ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* brea d th ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* brea d th ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁fib o n a c ci ▁ ( ▁int ▁ , ▁int ▁ , ▁int ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ b ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ a ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fib o n a c ci ▁ ( ▁ a ▁ , ▁ b ▁ , ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁fib o n a c ci ▁ ( ▁int ▁ a ▁ , ▁int ▁ b ▁ , ▁int ▁ n ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ n ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁fib o n a c ci ▁ ( ▁ b ▁ , ▁ a ▁+ ▁ b ▁ , ▁ n ▁ - ▁ 1 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* input C m ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ output M ▁ ; ▁ @ ▁ ; ▁ @ ▁ output M ▁= ▁ ( ▁* input C m ▁ ) ▁ / ▁ 1 00.0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ output M ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* i tem ▁ ) ▁ , ▁char ▁ ( ▁* cont ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁ ( ▁* cont ▁ ) ▁= = ▁ ' y ' ▁ | | ▁ ( ▁* cont ▁ ) ▁= = ▁ ' Y ' ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁ ( ▁* i tem ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* i tem ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁i ▁= = ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* i tem ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 2 ▁ ; ▁ @ ▁char ▁is Prime ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* number ▁ ) ▁ / ▁ 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Prime ▁= = ▁ 1 ▁& & ▁ ( ▁* number ▁ ) ▁ > ▁ 1 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁add T wo Number s ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ { ▁re tur n ▁ x ▁+ ▁ y ▁ ; ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁ b ▁= ▁20 ▁ ; ▁ @ ▁int ▁ a ▁= ▁10 ▁ ; ▁ @ ▁sum ▁= ▁add T wo Number s ▁ ( ▁ a ▁ , ▁ b ▁ ) ▁ ; ▁ @ ▁int ▁result ▁= ▁sum ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁nth Cub ic ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁nth Cub ic ▁= ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth Cub ic ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ c o m posit e ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 4 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ c o m posit e ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 2 ▁ ; ▁j ▁< ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ c o m posit e ▁= ▁ 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ c o m posit e ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* d 1 ▁ ) ▁ , ▁float ▁ ( ▁* d 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁area ▁= ▁ ( ▁ ( ▁* d 1 ▁ ) ▁* ▁ ( ▁* d 2 ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁float ▁ l ▁ ; ▁ @ ▁float ▁ k ▁ ; ▁ @ ▁i ▁= ▁10 ▁ , ▁j ▁= ▁20 ▁ , ▁ k ▁= ▁30 .5 ▁ , ▁ l ▁= ▁ 4 0 .5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁j ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ k ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ l ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁int ▁ first ▁= ▁ 8 ▁ ; ▁ @ ▁int ▁last ▁= ▁ 4 00 ▁ - ▁ ( ▁ 4 00 ▁ % ▁ 8 ▁ ) ▁ ; ▁ @ ▁sum ▁= ▁ ( ▁last ▁ - ▁ first ▁ ) ▁ / ▁ 8 ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* input Side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁result A rea ▁= ▁ ( ▁* input Side ▁ ) ▁* ▁ ( ▁* input Side ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* upper L im it ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁div ▁ ; ▁ @ ▁int ▁ num ▁ ; ▁ @ ▁int ▁is Prime ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* upper L im it ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ num ▁= ▁ 2 ▁ ; ▁ num ▁< ▁ ( ▁* upper L im it ▁ ) ▁ ; ▁ num ++ ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁div ▁= ▁ 2 ▁ ; ▁div ▁* ▁div ▁< = ▁ num ▁ ; ▁div ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁ % ▁div ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Prime ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* b ar ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ at m ▁ ; ▁ @ ▁ ; ▁ @ ▁ at m ▁= ▁ ( ▁* b ar ▁ ) ▁ / ▁1.0 1 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ at m ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁& ▁ 3 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁sum ▁+ = ▁i ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁* ▁ 1 6 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ n e ed To S or t ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁do ▁ { ▁ @ ▁ n e ed To S or t ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁< ▁arr ▁ [ ▁i ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁i ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁i ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ n e ed To S or t ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁w h ile ▁ ( ▁ n e ed To S or t ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁tempNum ▁ ; ▁ @ ▁int ▁numDigits ▁ ; ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁int ▁original Num ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁float ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁original Num ▁= ▁i ▁ ; ▁ @ ▁tempNum ▁= ▁original Num ▁ ; ▁ @ ▁numDigits ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁tempNum ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁tempNum ▁ / = ▁10 ▁ ; ▁ @ ▁numDigits ++ ▁ ; ▁ @ ▁ } ▁ @ ▁tempNum ▁= ▁original Num ▁ ; ▁ @ ▁w h ile ▁ ( ▁tempNum ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁re ma inde r ▁= ▁tempNum ▁ % ▁10 ▁ ; ▁ @ ▁sum ▁+ = ▁pow ▁ ( ▁re ma inde r ▁ , ▁numDigits ▁ ) ▁ ; ▁ @ ▁tempNum ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁int ▁ ) ▁sum ▁= = ▁i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 7 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁cnt ▁ ; ▁ @ ▁int ▁ b in ▁ [ ▁32 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁cnt ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* number ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ b in ▁ [ ▁cnt ▁ ] ▁= ▁ ( ▁* number ▁ ) ▁ % ▁ 2 ▁ ; ▁ @ ▁ ( ▁* number ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁cnt ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁cnt ▁ - ▁ 1 ▁ ) ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ b in ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁ length S um ▁= ▁ ( ▁* length ▁ ) ▁+ ▁ ( ▁* w id th ▁ ) ▁ ; ▁ @ ▁float ▁perim eter ▁= ▁ 2 ▁* ▁ length S um ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁fact ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁fact ▁* = ▁i ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁float ▁fact G e n era l ▁= ▁fact ▁ ; ▁ @ ▁float ▁fact S ci ent if ic ▁= ▁fact ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁fact G e n era l ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁fact S ci ent if ic ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp Number ▁ ; ▁ @ ▁int ▁rem ▁= ▁0 ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁temp Number ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁temp Number ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁rem ▁= ▁temp Number ▁ % ▁10 ▁ ; ▁ @ ▁sum ▁= ▁sum ▁+ ▁ ( ▁rem ▁* ▁rem ▁* ▁rem ▁ ) ▁ ; ▁ @ ▁temp Number ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁ ( ▁* number ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ y ard s ▁ ; ▁ @ ▁float ▁ c onversion Factor ▁= ▁1.0 9 ▁ ; ▁ @ ▁ ; ▁ @ ▁ y ard s ▁= ▁ ( ▁* meters ▁ ) ▁* ▁ c onversion Factor ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* meters ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ y ard s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁float ▁ stdDev i ation ▁ ; ▁ @ ▁float ▁sumOf Square s ▁= ▁0 ▁ ; ▁ @ ▁float ▁variance ▁= ▁0 ▁ ; ▁ @ ▁float ▁ m e an ▁ ; ▁ @ ▁float ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁sum ▁+ = ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ m e an ▁= ▁sum ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sumOf Square s ▁+ = ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ ) ▁* ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁variance ▁= ▁sumOf Square s ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ stdDev i ation ▁= ▁sqrt f ▁ ( ▁variance ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ m e an ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁variance ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ stdDev i ation ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁* base ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* fah ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁cel ▁ ; ▁ @ ▁ ; ▁ @ ▁cel ▁= ▁ ( ▁ ( ▁* fah ▁ ) ▁ - ▁32 ▁ ) ▁* ▁ 5 ▁ / ▁ 9 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* fah ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁cel ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁pro duc t ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁10 ▁ ) ▁ { ▁ @ ▁j ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁j ▁< = ▁i ▁ ) ▁ { ▁ @ ▁pro duc t ▁= ▁i ▁* ▁j ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁j ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁= ▁0 ▁ ; ▁ @ ▁int ▁ num 2 ▁ ; ▁ @ ▁int ▁ num 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* a ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ ' + ' : ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ num 1 ▁+ ▁ num 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' - ' : ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ num 1 ▁ - ▁ num 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ case ▁'*' : ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ num 1 ▁* ▁ num 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' / ' : ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ num 1 ▁ / ▁ num 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁default : ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ shift ▁ ; ▁ @ ▁int ▁fo u n d O n e ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ shift ▁= ▁ 3 1 ▁ ; ▁ shift ▁ > = ▁0 ▁ ; ▁ shift - - ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* number ▁ ) ▁& ▁ ( ▁ 1 ▁< < ▁ shift ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁fo u n d O n e ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁fo u n d O n e ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁cnt ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* num ▁ ) ▁= ▁ - ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁do ▁ { ▁ @ ▁cnt ++ ▁ ; ▁ @ ▁ ( ▁* num ▁ ) ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁ ( ▁* num ▁ ) ▁ > ▁0 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁cnt ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁double ▁ ( ▁* x ▁ ) ▁ ) ▁ { ▁ @ ▁double ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁exp ▁ ( ▁ ( ▁* x ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ ; ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ read Array ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁printArray ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁re place E ven O dd ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁0 ▁ ; ▁ @ ▁el se ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁arr ▁ [ ▁10 ▁ ] ▁ ; ▁ @ ▁ read Array ▁ ( ▁arr ▁ , ▁10 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁printArray ▁ ( ▁arr ▁ , ▁10 ▁ ) ▁ ; ▁ @ ▁re place E ven O dd ▁ ( ▁arr ▁ , ▁10 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁printArray ▁ ( ▁arr ▁ , ▁10 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base Side ▁ ) ▁ , ▁float ▁ ( ▁* p y r a m id Height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁calculate d V o l um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁calculate d V o l um e ▁= ▁ ( ▁* base Side ▁ ) ▁* ▁ ( ▁* base Side ▁ ) ▁* ▁ ( ▁* p y r a m id Height ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁calculate d V o l um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radi an s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ de gree s ▁= ▁ ( ▁* radi an s ▁ ) ▁* ▁ ( ▁180.0 ▁ / ▁3.14 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* radi an s ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁is Prime ▁ ( ▁int ▁ num ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁< = ▁ 1 ▁ ) ▁re tur n ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁int ▁i ▁= ▁ 2 ▁ ; ▁i ▁* ▁i ▁< = ▁ num ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁ % ▁i ▁= = ▁0 ▁ ) ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁ num ▁= ▁ 2 ▁ ; ▁ @ ▁int ▁nth Prime ▁= ▁ 2 ▁ ; ▁ @ ▁w h ile ▁ ( ▁count ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁is Prime ▁ ( ▁ num ▁ ) ▁ ) ▁ { ▁ @ ▁nth Prime ▁= ▁ num ▁ ; ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ num ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth Prime ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* grad ian s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ P I ▁= ▁3.14159 2 6 5 ▁ ; ▁ @ ▁float ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ radi an s ▁= ▁ ( ▁* grad ian s ▁ ) ▁* ▁ ( ▁ P I ▁ / ▁ 2 00.0 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* grad ian s ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* prin ci p al ▁ ) ▁ , ▁float ▁ ( ▁* rate ▁ ) ▁ , ▁float ▁ ( ▁* y ear ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ ci ▁ ; ▁ @ ▁float ▁ rate P l u s O n e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ rate P l u s O n e ▁= ▁ 1 ▁+ ▁ ( ▁* rate ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ ci ▁= ▁ ( ▁* prin ci p al ▁ ) ▁* ▁ ( ▁pow ▁ ( ▁ rate P l u s O n e ▁ , ▁ ( ▁* y ear ▁ ) ▁ ) ▁ - ▁ 1 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ci ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ d if f ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁ ) ▁ ? ▁ ( ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ) ▁ : ▁ ( ▁ ( ▁* b ▁ ) ▁ - ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* de gree s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ radi an s ▁= ▁ ( ▁* de gree s ▁ ) ▁* ▁ ( ▁3.14 f ▁ / ▁180.0 f ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* r 1 ▁ ) ▁ , ▁float ▁ ( ▁* r 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁sum Circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sum Circum fer e nce ▁= ▁ 2 ▁* ▁3.14159 ▁* ▁ ( ▁ ( ▁* r 1 ▁ ) ▁+ ▁ ( ▁* r 2 ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum Circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁pro duc t ▁= ▁0 ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁count ▁< ▁ ( ▁* num 2 ▁ ) ▁ ) ▁ { ▁ @ ▁pro duc t ▁+ = ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ - ▁i ▁ - ▁ 1 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ > ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁int ▁temp ▁= ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ A _ total ▁ ; ▁ @ ▁float ▁ A _ side ▁ ; ▁ @ ▁float ▁ A _ base ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ A _ base ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ A _ side ▁= ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* h ▁ ) ▁ ; ▁ @ ▁ A _ total ▁= ▁ A _ base ▁+ ▁ A _ side ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ A _ total ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* ar ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁= = ▁0 ▁ | | ▁ ar ▁ [ ▁i ▁ - ▁ 1 ▁ ] ▁< = ▁ ar ▁ [ ▁i ▁ ] ▁ ) ▁ @ ▁i ++ ▁ ; ▁ @ ▁el se ▁ { ▁ @ ▁temp ▁= ▁ ar ▁ [ ▁i ▁ - ▁ 1 ▁ ] ▁ ; ▁ @ ▁ ar ▁ [ ▁i ▁ - ▁ 1 ▁ ] ▁= ▁ ar ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ar ▁ [ ▁i ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁i ▁= ▁i ▁ - ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ar ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ a ▁= ▁10 ▁ ; ▁ @ ▁vo id ▁ fun ▁ ( ▁vo id ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ a ▁= ▁20 ▁ ; ▁ @ ▁int ▁ b ▁= ▁30 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ fun ▁ ( ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ fun ▁ ( ▁vo id ▁ ) ▁ { ▁ @ ▁int ▁ b ▁= ▁ 4 0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* w ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ h p ▁ ; ▁ @ ▁ ; ▁ @ ▁ h p ▁= ▁ ( ▁* w ▁ ) ▁ / ▁746 . 0 f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* w ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ h p ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ b a c k To Meter s ▁ ; ▁ @ ▁float ▁ feet ▁ ; ▁ @ ▁float ▁ meters To F e e t ▁= ▁ 3 . 2 8 0 8 4 f ▁ ; ▁ @ ▁float ▁ feet To Meter s ▁= ▁0 . 3 0 4 8 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ feet ▁= ▁ ( ▁* meters ▁ ) ▁* ▁ meters To F e e t ▁ ; ▁ @ ▁ b a c k To Meter s ▁= ▁ feet ▁* ▁ feet To Meter s ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* meters ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ feet ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ b a c k To Meter s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* count ▁ ) ▁ , ▁float ▁ ( ▁* d at a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ id x ▁ ; ▁ @ ▁float ▁cube d S um ▁= ▁0 ▁ ; ▁ @ ▁float ▁skewness Value ▁ ; ▁ @ ▁float ▁ st an d ard D e v ▁ ; ▁ @ ▁float ▁variance Value ▁= ▁0 ▁ ; ▁ @ ▁float ▁ m e an Value ▁ ; ▁ @ ▁float ▁sumOf Dat a ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ id x ▁= ▁0 ▁ ; ▁ id x ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁ id x ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ id x ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁sumOf Dat a ▁+ = ▁da t a ▁ [ ▁ id x ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ m e an Value ▁= ▁sumOf Dat a ▁ / ▁ ( ▁* count ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁ id x ▁= ▁0 ▁ ; ▁ id x ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁ id x ++ ▁ ) ▁ { ▁ @ ▁variance Value ▁+ = ▁pow ▁ ( ▁da t a ▁ [ ▁ id x ▁ ] ▁ - ▁ m e an Value ▁ , ▁ 2 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁variance Value ▁= ▁variance Value ▁ / ▁ ( ▁* count ▁ ) ▁ ; ▁ @ ▁ st an d ard D e v ▁= ▁sqrt ▁ ( ▁variance Value ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁ id x ▁= ▁0 ▁ ; ▁ id x ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁ id x ++ ▁ ) ▁ { ▁ @ ▁cube d S um ▁+ = ▁pow ▁ ( ▁da t a ▁ [ ▁ id x ▁ ] ▁ - ▁ m e an Value ▁ , ▁ 3 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁skewness Value ▁= ▁ ( ▁ ( ▁* count ▁ ) ▁ / ▁ ( ▁ ( ▁ ( ▁* count ▁ ) ▁ - ▁1.0 f ▁ ) ▁* ▁ ( ▁ ( ▁* count ▁ ) ▁ - ▁2.0 f ▁ ) ▁ ) ▁ ) ▁* ▁ @ ▁ ( ▁cube d S um ▁ / ▁ ( ▁* count ▁ ) ▁ ) ▁ / ▁pow ▁ ( ▁ st an d ard D e v ▁ , ▁ 3 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ m e an Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁variance Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ st an d ard D e v ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁skewness Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁i ▁= ▁ ' A ' ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ' Z ' ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁i ▁= ▁ ' a ' ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ' z ' ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* x ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁sum ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ - ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁= ▁ ( ▁sum ▁+ ▁ a ▁ [ ▁i ▁ ] ▁ ) ▁* ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁sum ▁+ = ▁ a ▁ [ ▁ ( ▁* n ▁ ) ▁ ] ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁pro duc t ▁ ; ▁ @ ▁int ▁col ▁ ; ▁ @ ▁int ▁ row ▁ ; ▁ @ ▁fo r ▁ ( ▁ row ▁= ▁ 1 ▁ ; ▁ row ▁< = ▁10 ▁ ; ▁ row ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁col ▁= ▁ 1 ▁ ; ▁col ▁< = ▁ row ▁ ; ▁col ++ ▁ ) ▁ { ▁ @ ▁pro duc t ▁= ▁ row ▁* ▁col ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁* side ▁ ) ▁* ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* num ▁ ) ▁& ▁ 1 ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* n ame ▁ ) ▁ , ▁float ▁ ( ▁* basic ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ n e t ▁ ; ▁ @ ▁float ▁gr os s ▁ ; ▁ @ ▁float ▁ p f ▁ ; ▁ @ ▁float ▁ t a x ▁ ; ▁ @ ▁float ▁ hra ▁ ; ▁ @ ▁float ▁da ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ p f ▁= ▁ 0.0 8 ▁* ▁ ( ▁* basic ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* basic ▁ ) ▁< ▁500 0 ▁ ) ▁ { ▁ @ ▁da ▁= ▁0 . 3 ▁* ▁ ( ▁* basic ▁ ) ▁ ; ▁ @ ▁ hra ▁= ▁ 0.0 8 ▁* ▁ ( ▁* basic ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁ ( ▁* basic ▁ ) ▁ > = ▁500 0 ▁ ) ▁& & ▁ ( ▁ ( ▁* basic ▁ ) ▁< ▁100 00 ▁ ) ▁ ) ▁ { ▁ @ ▁da ▁= ▁0 . 4 ▁* ▁ ( ▁* basic ▁ ) ▁ ; ▁ @ ▁ hra ▁= ▁0 . 1 ▁* ▁ ( ▁* basic ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁da ▁= ▁0 .5 ▁* ▁ ( ▁* basic ▁ ) ▁ ; ▁ @ ▁ hra ▁= ▁0 . 2 ▁* ▁ ( ▁* basic ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁gr os s ▁= ▁ ( ▁* basic ▁ ) ▁+ ▁da ▁+ ▁ hra ▁ ; ▁ @ ▁ n e t ▁= ▁gr os s ▁ - ▁ t a x ▁+ ▁ p f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁gr os s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ n e t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ 4 00 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁ 8 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁sum ++ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ch ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* ch ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ ' a ' : ▁ @ ▁ case ▁ ' e ' : ▁ @ ▁ case ▁ ' i ' : ▁ @ ▁ case ▁ ' o ' : ▁ @ ▁ case ▁ ' u ' : ▁ @ ▁ case ▁ ' A ' : ▁ @ ▁ case ▁ ' E ' : ▁ @ ▁ case ▁ ' I ' : ▁ @ ▁ case ▁ ' O ' : ▁ @ ▁ case ▁ ' U ' : ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁default : ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ digit ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁int ▁pro duc t ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* num ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ digit ▁= ▁ ( ▁* num ▁ ) ▁ % ▁10 ▁ ; ▁ @ ▁sum ▁= ▁sum ▁+ ▁ digit ▁ ; ▁ @ ▁pro duc t ▁= ▁pro duc t ▁* ▁ digit ▁ ; ▁ @ ▁ ( ▁* num ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ / ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* posit io n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* posit io n ▁ ) ▁= = ▁ ( ▁* n ▁ ) ▁+ ▁ 1 ▁ | | ▁ ( ▁* posit io n ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* posit io n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁i ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ length ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁str ▁ [ ▁ length ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ length ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ length ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁ ; ▁ @ ▁put s ▁ ( ▁"\ n --------------- --------------- --------------\ n " ▁ ) ▁ ; ▁ @ ▁int ▁space sIn C urrent Row ▁ ; ▁ @ ▁int ▁col sIn C urrent Row ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁space sIn C urrent Row ▁= ▁max Col s ▁ - ▁ row ▁ ; ▁ @ ▁col sIn C urrent Row ▁= ▁ row ▁ ; ▁ @ ▁int ▁space ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁col ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* grad ian s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ de gree s ▁= ▁ ( ▁* grad ian s ▁ ) ▁* ▁ ( ▁180.0 ▁ / ▁ 2 00.0 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is E ven ▁ ; ▁ @ ▁ ; ▁ @ ▁is E ven ▁= ▁ ( ▁ ( ▁* num ▁ ) ▁& ▁ 1 ▁ ) ▁= = ▁0 ▁ ; ▁ @ ▁ if ▁ ( ▁is E ven ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁array _ 1 ▁ [ ▁ 5 ▁ ] ▁= ▁ { ▁0 ▁ , ▁ 1 ▁ , ▁ 2 ▁ , ▁ 3 ▁ , ▁ 4 ▁ } ▁ ; ▁ @ ▁int ▁array _ 2 ▁ [ ▁ 5 ▁ ] ▁= ▁ { ▁ 5 ▁ , ▁ 6 ▁ , ▁ 7 ▁ , ▁ 8 ▁ , ▁ 9 ▁ } ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁temp ▁= ▁array _ 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁array _ 1 ▁ [ ▁i ▁ ] ▁= ▁array _ 2 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁array _ 2 ▁ [ ▁i ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array _ 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁array _ 2 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁ ; ▁ @ ▁put s ▁ ( ▁"\ n --------------- --------------- --------------\ n " ▁ ) ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁int ▁col ▁= ▁max Col s ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁col ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ - ▁i ▁ - ▁ 1 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ > ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* e ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* c ▁ ) ▁ - ▁ ( ▁* d ▁ ) ▁ - ▁ ( ▁* e ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* ki lo meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁mile s ▁ ; ▁ @ ▁float ▁ c onversion Factor ▁= ▁0 . 6 2 1 3 7 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁mile s ▁= ▁ ( ▁* ki lo meters ▁ ) ▁* ▁ c onversion Factor ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* ki lo meters ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁double ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁double ▁vol um e ▁ ; ▁ @ ▁double ▁pi ▁= ▁ 3 .141592653589793 ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁4.0 ▁ / ▁3.0 ▁ ) ▁* ▁pi ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁ square ▁ ; ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ square ▁= ▁i ▁* ▁i ▁ ; ▁ @ ▁w h ile ▁ ( ▁ square ▁< = ▁ ( ▁* limit ▁ ) ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ square ▁= ▁i ▁* ▁i ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁float ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ st e p s ▁= ▁0 ▁ ; ▁ @ ▁int ▁ pos ▁ ; ▁ @ ▁float ▁ h o l d ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* size ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ pos ▁= ▁0 ▁ ; ▁ pos ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁ pos ++ ▁ ) ▁ { ▁ @ ▁ } ▁ @ ▁ pos ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ pos ▁< ▁ ( ▁* size ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ pos ▁= = ▁0 ▁ | | ▁arr ▁ [ ▁ pos ▁ - ▁ 1 ▁ ] ▁< = ▁arr ▁ [ ▁ pos ▁ ] ▁ ) ▁ { ▁ @ ▁ pos ++ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ h o l d ▁= ▁arr ▁ [ ▁ pos ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁ pos ▁ ] ▁= ▁arr ▁ [ ▁ pos ▁ - ▁ 1 ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁ pos ▁ - ▁ 1 ▁ ] ▁= ▁ h o l d ▁ ; ▁ @ ▁ pos - - ▁ ; ▁ @ ▁ st e p s ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁ pos ▁= ▁0 ▁ ; ▁ pos ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁ pos ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁ pos ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ st e p s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* w id th ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁double ▁ ( ▁* radi an s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁double ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ de gree s ▁= ▁ ( ▁* radi an s ▁ ) ▁* ▁ ( ▁180.0 ▁ / ▁3.14 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁double ▁ ( ▁* de gree s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁double ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ radi an s ▁= ▁ ( ▁* de gree s ▁ ) ▁* ▁ ( ▁3.14 ▁ / ▁180.0 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mp s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ mph ▁ ; ▁ @ ▁ ; ▁ @ ▁ mph ▁= ▁ ( ▁* mp s ▁ ) ▁* ▁ 2 . 2 3 6 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ mph ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁char ▁ ch ▁= ▁'*' ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 9 ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ch ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁max Index ▁ ; ▁ @ ▁int ▁min Index ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ @ ▁min Index ▁= ▁max Index ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num s ▁ [ ▁i ▁ ] ▁< ▁ num s ▁ [ ▁min Index ▁ ] ▁ ) ▁min Index ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num s ▁ [ ▁i ▁ ] ▁ > ▁ num s ▁ [ ▁max Index ▁ ] ▁ ) ▁max Index ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ num s ▁ [ ▁min Index ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁min Index ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ num s ▁ [ ▁max Index ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁max Index ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std bool . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁ bool ▁is Prime ▁ ( ▁int ▁ num ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁< = ▁ 1 ▁ ) ▁ { ▁ @ ▁re tur n ▁ f al se ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁int ▁i ▁= ▁ 2 ▁ ; ▁i ▁* ▁i ▁< = ▁ num ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁re tur n ▁ f al se ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁ t r ue ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* upper ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ num ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ num ▁< = ▁ ( ▁* upper ▁ ) ▁ ; ▁ num ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁is Prime ▁ ( ▁ num ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁root 2 ▁ ; ▁ @ ▁int ▁root 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁root 1 ▁= ▁ - ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁sqrt ▁ ( ▁ ( ▁* b ▁ ) ▁ ^ ▁ 2 ▁ - ▁ 4 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ ) ▁ ) ▁ / ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁root 2 ▁= ▁ - ▁ ( ▁* b ▁ ) ▁ - ▁ ( ▁sqrt ▁ ( ▁ ( ▁* b ▁ ) ▁ ^ ▁ 2 ▁ - ▁ 4 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ ) ▁ ) ▁ / ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁root 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁root 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* n ame ▁ ) ▁ , ▁int ▁ ( ▁* a ge ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁pri ce ▁= ▁ 6 00 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ge ▁ ) ▁< ▁ 6 ▁ | | ▁ ( ▁* a ge ▁ ) ▁ > = ▁ 6 0 ▁ ) ▁ { ▁ @ ▁pri ce ▁= ▁pri ce ▁* ▁0 . 3 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁pri ce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁fo u n d ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁& & ▁! f o u n d ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁fo u n d ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁! f o u n d ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* r ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁fact _ n r ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁fact _ n ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ per m u t ation ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁fact _ n ▁* = ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁i ▁< = ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁ ( ▁* r ▁ ) ▁ ) ▁ ) ▁ { ▁ @ ▁fact _ n r ▁* = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ per m u t ation ▁= ▁fact _ n ▁ / ▁fact _ n r ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ per m u t ation ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁! = ▁ - 1 ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁arr ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁arr ▁ [ ▁j ▁ ] ▁= ▁ - 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ch ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁ ch ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is O dd ▁ ; ▁ @ ▁ ; ▁ @ ▁is O dd ▁= ▁ ( ▁ ( ▁ ( ▁* num ▁ ) ▁+ ▁ 1 ▁ ) ▁ - ▁ ( ▁* num ▁ ) ▁ ) ▁! = ▁ 1 ▁ ; ▁ @ ▁ if ▁ ( ▁! i s O dd ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ surface A rea ▁= ▁ 4 ▁* ▁ 3 .141592653589793 2 384 6 ▁* ▁ @ ▁pow ▁ ( ▁ ( ▁pow ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ , ▁1.6 ▁ ) ▁+ ▁pow ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ , ▁1.6 ▁ ) ▁+ ▁ @ ▁pow ▁ ( ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ , ▁1.6 ▁ ) ▁ ) ▁ / ▁ @ ▁ 3 ▁ , ▁ @ ▁ 1 ▁ / ▁1.6 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁char ▁str 2 ▁ [ ▁20 ▁ ] ▁ ; ▁ @ ▁char ▁str 1 ▁ [ ▁20 ▁ ] ▁ ; ▁ @ ▁int ▁ e q u al ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ | | ▁str 2 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁str 2 ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁ e q u al ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ e q u al ▁& & ▁str 1 ▁ [ ▁i ▁ ] ▁= = ▁'\ 0 ' ▁& & ▁str 2 ▁ [ ▁i ▁ ] ▁= = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁ x or ▁= ▁ ( ▁* a ▁ ) ▁ ^ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁int ▁ an d ▁= ▁ ( ▁* a ▁ ) ▁& ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ d if f ▁= ▁ x or + ▁ ( ▁ an d ▁< < ▁ 1 ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁< ▁ ( ▁* b ▁ ) ▁ ) ▁ { ▁ @ ▁ d if f ▁= ▁ - d if f ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* d i agonal 1 ▁ ) ▁ , ▁float ▁ ( ▁* d i agonal 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ k it e A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ k it e A rea ▁= ▁ ( ▁* d i agonal 1 ▁ ) ▁* ▁ ( ▁* d i agonal 2 ▁ ) ▁* ▁0 .5 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ k it e A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁array ▁ [ ▁10 ▁ ] ▁= ▁ { ▁ 1 ▁ , ▁ 2 ▁ , ▁ 3 ▁ , ▁ 4 ▁ , ▁ 5 ▁ , ▁ 6 ▁ , ▁ 7 ▁ , ▁ 8 ▁ , ▁ 9 ▁ , ▁10 ▁ } ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁odd _ s um ▁= ▁0 ▁ ; ▁ @ ▁int ▁even _ s um ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁i ▁ ] ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ @ ▁even _ s um ▁+ = ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁el se ▁ @ ▁odd _ s um ▁+ = ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁even _ s um ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁odd _ s um ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str 1 ▁ ) ▁ , ▁char ▁ ( ▁* str 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ c ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁put s ▁ ( ▁ ( ▁* str 1 ▁ ) ▁ ) ▁ ; ▁ @ ▁put s ▁ ( ▁ ( ▁* str 2 ▁ ) ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ | | ▁ ( ▁str 2 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁str 2 ▁ [ ▁i ▁ ] ▁ ) ▁ c ++ ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ c ▁= = ▁0 ▁ ) ▁ @ ▁put s ▁ ( ▁"\ n Str in g s ▁ are ▁ e q u al . \ n " ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁put s ▁ ( ▁"\ n Str in g s ▁ are ▁ n o t ▁ e q u al . \ n " ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* de gree s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁ radi an s ▁= ▁ ( ▁* de gree s ▁ ) ▁* ▁ ( ▁3.14 f ▁ / ▁180.0 f ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁int ▁numAtCol ▁ ; ▁ @ ▁int ▁col ▁ ; ▁ @ ▁int ▁ row ▁ ; ▁ @ ▁ ; ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁ row ▁= ▁ 1 ▁ ; ▁ row ▁< = ▁ ( ▁* max Row s ▁ ) ▁ ; ▁ row ++ ▁ ) ▁ { ▁ @ ▁numAtCol ▁= ▁ row ▁ ; ▁ @ ▁fo r ▁ ( ▁col ▁= ▁ 1 ▁ ; ▁col ▁< = ▁ row ▁ ; ▁col ++ ▁ ) ▁ { ▁ @ ▁numAtCol ▁= ▁numAtCol ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁numAtCol ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* b L ength ▁ ) ▁ , ▁float ▁ ( ▁* s Height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ s A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ s A rea ▁= ▁ ( ▁* b L ength ▁ ) ▁* ▁ ( ▁* b L ength ▁ ) ▁ ; ▁ @ ▁ s A rea ▁+ = ▁ 2 ▁* ▁ ( ▁* b L ength ▁ ) ▁* ▁ ( ▁* s Height ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ s A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ length ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁str ▁ [ ▁ length ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ length ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ length ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* ki lo meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁mile s ▁= ▁ ( ▁* ki lo meters ▁ ) ▁* ▁0 . 6 2 1 3 7 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* ki lo meters ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ u nsi gn ed ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁ u nsi gn ed ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁ @ ▁ u nsi gn ed ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ a ▁ [ ▁ 3 ▁ ] ▁= ▁ { ▁ 1 1 ▁ , ▁ 2 2 ▁ , ▁ 3 3 ▁ } ▁ ; ▁ @ ▁ u nsi gn ed ▁int ▁address 0 ▁= ▁ ( ▁ u nsi gn ed ▁int ▁ ) ▁& a ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁ u nsi gn ed ▁int ▁address 1 ▁= ▁ ( ▁ u nsi gn ed ▁int ▁ ) ▁& a ▁ [ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ u nsi gn ed ▁int ▁address 2 ▁= ▁ ( ▁ u nsi gn ed ▁int ▁ ) ▁& a ▁ [ ▁ 2 ▁ ] ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁address 0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ a ▁ [ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁address 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ a ▁ [ ▁ 2 ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁address 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ a ▁= ▁100 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ a ▁= ▁ 2 00 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ shift ed ▁ ; ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ shift ed ▁= ▁ ( ▁* a ▁ ) ▁< < ▁ 4 ▁ ; ▁ @ ▁result ▁= ▁ shift ed ▁ | ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁char ▁ ( ▁* ch ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁is Fl o at ▁= ▁0 ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* ch ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ ' + ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁+ ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' - ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁ - ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁'*' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁* ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' / ' : ▁ @ ▁ if ▁ ( ▁ ( ▁* num 2 ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁float ▁ ) ▁ ( ▁* num 1 ▁ ) ▁ / ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁is Fl o at ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' % ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁ % ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Fl o at ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁int ▁ ) ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* r an ge ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* r an ge ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁pro duc t ▁= ▁ ( ▁* num ▁ ) ▁* ▁i ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* slantHeight ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁float ▁ lateral A rea ▁ ; ▁ @ ▁float ▁ base A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ base A rea ▁= ▁ ( ▁ 5 ▁* ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁ ) ▁ / ▁ ( ▁ 4 ▁* ▁tan ▁ ( ▁ M _ P I ▁ / ▁ 5 ▁ ) ▁ ) ▁ ; ▁ @ ▁ lateral A rea ▁= ▁ ( ▁ 5 ▁* ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* slantHeight ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ surface A rea ▁= ▁ base A rea ▁+ ▁ lateral A rea ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁ - ▁ ( ▁* d ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ - 1 ▁ ; ▁ @ ▁ } ▁ @ ▁result ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ) ▁ / ▁ ( ▁ ( ▁* c ▁ ) ▁ - ▁ ( ▁* d ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* num ▁ ) ▁ - ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ > ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁char ▁last C h ar ▁= ▁'\ 0 ' ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁str ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str ▁ [ ▁i ▁ ] ▁! = ▁last C h ar ▁ ) ▁ { ▁ @ ▁str ▁ [ ▁j ++ ▁ ] ▁= ▁str ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁last C h ar ▁= ▁str ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁str ▁ [ ▁j ▁ ] ▁= ▁'\ 0 ' ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* str ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁nth P ent agonal ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁nth P ent agonal ▁= ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁ 3 ▁* ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth P ent agonal ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* y ear ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 00 ▁= = ▁0 ▁ ) ▁ | | ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁100 ▁& & ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 ▁= = ▁0 ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁0 : ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ case ▁ 1 : ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* brea d th ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* brea d th ▁ ) ▁ ; ▁ @ ▁perim eter ▁= ▁ 2 ▁* ▁ ( ▁ ( ▁* length ▁ ) ▁+ ▁ ( ▁* brea d th ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁& & ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* c ▁ ) ▁ ) ▁ @ ▁large st ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁ > ▁ ( ▁* a ▁ ) ▁& & ▁ ( ▁* b ▁ ) ▁ > ▁ ( ▁* c ▁ ) ▁ ) ▁ @ ▁large st ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁large st ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁calculate _ npr _ ncr ▁ ( ▁int ▁ n ▁ , ▁int ▁ r ▁ , ▁ long ▁* ncr ▁ , ▁ long ▁* npr ▁ ) ▁ { ▁ @ ▁* ncr ▁= ▁ 1 ▁ ; ▁ @ ▁* npr ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ n ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁< = ▁ r ▁ ) ▁ { ▁ @ ▁* npr ▁* = ▁ n ▁ - ▁ r ▁+ ▁i ▁ ; ▁ @ ▁* ncr ▁* = ▁ n ▁ - ▁ r ▁+ ▁i ▁ ; ▁ @ ▁* ncr ▁ / = ▁i ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁i ▁< = ▁ n ▁ - ▁ r ▁ ) ▁ { ▁ @ ▁* npr ▁* = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* r ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁ long ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁ @ ▁ long ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁ long ▁ ncr ▁ , ▁ npr ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁calculate _ npr _ ncr ▁ ( ▁ ( ▁* n ▁ ) ▁ , ▁ ( ▁* r ▁ ) ▁ , ▁& ncr ▁ , ▁& npr ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ncr ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ npr ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 3 ▁ ) ▁ { ▁ @ ▁ case ▁0 : ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* e ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁float ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* e ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁temp ▁= ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁+ ▁temp ▁ - ▁ ( ▁* d ▁ ) ▁ / ▁ ( ▁* e ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* totalS econds ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ second sIn Ho u r ▁= ▁ 3 6 00 ▁ ; ▁ @ ▁int ▁ second sIn M in u t e ▁= ▁ 6 0 ▁ ; ▁ @ ▁int ▁ second s ▁ ; ▁ @ ▁int ▁ minute s ▁ ; ▁ @ ▁int ▁ h o u r s ▁ ; ▁ @ ▁ ; ▁ @ ▁ h o u r s ▁= ▁ ( ▁* totalS econds ▁ ) ▁ / ▁ second sIn Ho u r ▁ ; ▁ @ ▁ ( ▁* totalS econds ▁ ) ▁ % = ▁ second sIn Ho u r ▁ ; ▁ @ ▁ minute s ▁= ▁ ( ▁* totalS econds ▁ ) ▁ / ▁ second sIn M in u t e ▁ ; ▁ @ ▁ second s ▁= ▁ ( ▁* totalS econds ▁ ) ▁ % ▁ second sIn M in u t e ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ h o u r s ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ minute s ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ second s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* z ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁pro duc t ▁= ▁ ( ▁* z ▁ ) ▁* ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* slantHeight ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁float ▁ lateral A rea ▁ ; ▁ @ ▁float ▁ base A rea ▁ ; ▁ @ ▁float ▁pi ▁= ▁3.14159 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ base A rea ▁= ▁ ( ▁ 5 ▁* ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁ ) ▁ / ▁ ( ▁ 4 ▁* ▁tan ▁ ( ▁pi ▁ / ▁ 5 ▁ ) ▁ ) ▁ ; ▁ @ ▁ lateral A rea ▁= ▁ ( ▁ 5 ▁* ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* slantHeight ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ surface A rea ▁= ▁ base A rea ▁+ ▁ lateral A rea ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ b ▁= ▁10 ▁ ; ▁ @ ▁int ▁ a ▁= ▁ 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ a ▁= ▁ a ▁+ ▁ b ▁ ; ▁ @ ▁ b ▁= ▁ a ▁ - ▁ b ▁ ; ▁ @ ▁ a ▁= ▁ a ▁ - ▁ b ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* inches ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ centimeter s ▁ ; ▁ @ ▁ ; ▁ @ ▁ centimeter s ▁= ▁ ( ▁* inches ▁ ) ▁* ▁ 2 .5 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ centimeter s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* posit io n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* posit io n ▁ ) ▁ > ▁0 ▁& & ▁ ( ▁* posit io n ▁ ) ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* posit io n ▁ ) ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁i ▁ - ▁ 1 ▁ ] ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* n ▁ ) ▁ - - ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* num ▁ ) ▁ - ▁i ▁ - ▁ 1 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁j ▁ ] ▁< ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* number s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁= ▁1.0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 4 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁result ▁* = ▁ number s ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* x ▁ ) ▁ , ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁pow ▁ ( ▁ ( ▁double ▁ ) ▁ ( ▁* x ▁ ) ▁ , ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁int ▁gr t ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ , ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁j ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁gr t ▁= ▁ num ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁i ▁= ▁0 ▁ , ▁j ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁ ; ▁i ▁< ▁ 9 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁gr t ▁< ▁ num ▁ [ ▁i ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁gr t ▁= ▁ num ▁ [ ▁i ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁gr t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* speed ▁ ) ▁ , ▁float ▁ ( ▁* time ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ distance ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ distance ▁= ▁ ( ▁* speed ▁ ) ▁* ▁ ( ▁* time ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ distance ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ surface A rea ▁= ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* w id th ▁ ) ▁ ; ▁ @ ▁ surface A rea ▁+ = ▁ ( ▁* w id th ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ; ▁ @ ▁ surface A rea ▁+ = ▁ ( ▁* height ▁ ) ▁* ▁ ( ▁* length ▁ ) ▁ ; ▁ @ ▁ surface A rea ▁* = ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁ ; ▁ @ ▁float ▁ limit Fl o at ▁ ; ▁ @ ▁ ; ▁ @ ▁ limit Fl o at ▁= ▁ ( ▁float ▁ ) ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁count ▁= ▁ ( ▁int ▁ ) ▁ ce i l ▁ ( ▁sqrt f ▁ ( ▁ limit Fl o at ▁ ) ▁ ) ▁ - ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁total ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁total ▁= ▁ ( ▁* n ▁ ) ▁ - ▁ 2 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 2 ▁ ; ▁j ▁* ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁j ▁+ ▁ 1 ▁ > ▁i ▁ / ▁j ▁ ) ▁ { ▁ @ ▁total - - ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁total ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ^ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ^ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ^ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* n ame ▁ ) ▁ , ▁int ▁ ( ▁* a ge ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is E li g ible F or C o nce s s io n ▁= ▁0 ▁ ; ▁ @ ▁float ▁pri ce ▁= ▁ 6 00.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ge ▁ ) ▁< ▁ 6 ▁ | | ▁ ( ▁* a ge ▁ ) ▁ > = ▁ 6 0 ▁ ) ▁ { ▁ @ ▁is E li g ible F or C o nce s s io n ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is E li g ible F or C o nce s s io n ▁ ) ▁ { ▁ @ ▁pri ce ▁* = ▁0 . 7 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁pri ce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* w id th ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ) ▁ / ▁3.0 f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁area ▁= ▁ ( ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁ ) ▁ / ▁ ( ▁ 4 ▁* ▁tan ▁ ( ▁ M _ P I ▁ / ▁ ( ▁* n ▁ ) ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mp s ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ k mph ▁ ; ▁ @ ▁ ; ▁ @ ▁ k mph ▁= ▁ ( ▁* mp s ▁ ) ▁* ▁ 3 . 6 ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁pro duc t ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ ; ▁ ( ▁* num ▁ ) ▁ > ▁0 ▁ ; ▁ ( ▁* num ▁ ) ▁ / = ▁10 ▁ ) ▁ { ▁ @ ▁int ▁ digit ▁= ▁ ( ▁* num ▁ ) ▁ % ▁10 ▁ ; ▁ @ ▁sum ▁= ▁sum ▁+ ▁ digit ▁ ; ▁ @ ▁pro duc t ▁= ▁pro duc t ▁* ▁ digit ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁put s ▁ ( ▁"\ n --------------- --------------- --------------\ n " ▁ ) ▁ ; ▁ @ ▁int ▁vary ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁int ▁col ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ if ▁ ( ▁col ▁< = ▁vary ▁ | | ▁col ▁ > = ▁max Col s ▁+ ▁ 1 ▁ - ▁vary ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ row ▁< ▁max Col s ▁ / ▁ 2 ▁ ? ▁vary ++ ▁ : ▁vary - - ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁& & ▁ row ▁= = ▁max Col s ▁ / ▁ 2 ▁ ) ▁vary ++ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁4.0 ▁ / ▁3.0 ▁* ▁ 3 .141592653589793 2 384 6 ▁ ; ▁ @ ▁vol um e ▁* = ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* d 1 ▁ ) ▁ , ▁float ▁ ( ▁* d 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁ ( ▁* d 1 ▁ ) ▁* ▁ ( ▁* d 2 ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* e ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ f in al R esult ▁ ; ▁ @ ▁float ▁int erm ed i at e R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁int erm ed i at e R esult ▁= ▁ - ▁ ( ▁* e ▁ ) ▁ ; ▁ @ ▁ f in al R esult ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁+ ▁int erm ed i at e R esult ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ f in al R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* l 1 ▁ ) ▁ , ▁float ▁ ( ▁* l 2 ▁ ) ▁ , ▁float ▁ ( ▁* l 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* l 1 ▁ ) ▁+ ▁ ( ▁* l 2 ▁ ) ▁ > ▁ ( ▁* l 3 ▁ ) ▁& & ▁ ( ▁* l 2 ▁ ) ▁+ ▁ ( ▁* l 3 ▁ ) ▁ > ▁ ( ▁* l 1 ▁ ) ▁& & ▁ ( ▁* l 1 ▁ ) ▁+ ▁ ( ▁* l 3 ▁ ) ▁ > ▁ ( ▁* l 2 ▁ ) ▁ ) ▁ { ▁ @ ▁result ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁multiplier ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁multiplier ▁= ▁ 3 ▁* ▁sqrt ▁ ( ▁ 3 ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁area ▁= ▁multiplier ▁* ▁ ( ▁* side ▁ ) ▁* ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁int ▁next ▁ ; ▁ @ ▁int ▁ second ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ first ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* limit ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁< = ▁ 1 ▁ ) ▁ @ ▁next ▁= ▁i ▁ ; ▁ @ ▁el se ▁ { ▁ @ ▁next ▁= ▁ first ▁+ ▁ second ▁ ; ▁ @ ▁ first ▁= ▁ second ▁ ; ▁ @ ▁ second ▁= ▁next ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁next ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* line ▁ ) ▁ , ▁ long ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* line ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* line ▁ ) ▁ - ▁i ▁ - ▁ 1 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ long ▁ value ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁j ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ value ▁= ▁ value ▁* ▁ ( ▁i ▁ - ▁j ▁+ ▁ 1 ▁ ) ▁ / ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ index 2 ▁ ; ▁ @ ▁int ▁max im um ▁ ; ▁ @ ▁int ▁ index 1 ▁ ; ▁ @ ▁int ▁min im um ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ @ ▁min im um ▁= ▁ a ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁max im um ▁= ▁ a ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁min im um ▁ > ▁ a ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁min im um ▁= ▁ a ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ index 1 ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁max im um ▁< ▁ a ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁max im um ▁= ▁ a ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ index 2 ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁min im um ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ index 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁max im um ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ index 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mph ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁knots ▁= ▁ ( ▁* mph ▁ ) ▁ / ▁ 1 . 1 5 0 7 8 f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* x 1 ▁ ) ▁ , ▁float ▁ ( ▁* x 2 ▁ ) ▁ , ▁float ▁ ( ▁* x 3 ▁ ) ▁ , ▁float ▁ ( ▁* x 4 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ cal c R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* x 3 ▁ ) ▁+ ▁ ( ▁* x 4 ▁ ) ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ - 1 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ cal c R esult ▁= ▁ ( ▁ ( ▁* x 1 ▁ ) ▁+ ▁ ( ▁* x 2 ▁ ) ▁ ) ▁ / ▁ ( ▁ ( ▁* x 3 ▁ ) ▁+ ▁ ( ▁* x 4 ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ cal c R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* m 1 ▁ ) ▁ , ▁float ▁ ( ▁* m 2 ▁ ) ▁ , ▁float ▁ ( ▁* m 3 ▁ ) ▁ , ▁float ▁ ( ▁* m 4 ▁ ) ▁ , ▁float ▁ ( ▁* m 5 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* m 1 ▁ ) ▁ > ▁32 ▁& & ▁ ( ▁* m 2 ▁ ) ▁ > ▁32 ▁& & ▁ ( ▁* m 3 ▁ ) ▁ > ▁32 ▁& & ▁ ( ▁* m 4 ▁ ) ▁ > ▁32 ▁& & ▁ ( ▁* m 5 ▁ ) ▁ > ▁32 ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁rem ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁rem ▁= ▁ ( ▁* b ▁ ) ▁ - ▁ ( ▁ ( ▁* b ▁ ) ▁ / ▁ ( ▁* a ▁ ) ▁ ) ▁* ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁rem ▁= ▁ ( ▁* a ▁ ) ▁ - ▁rem ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁rem ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁int ▁pro duc t ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁i ▁< ▁10 ▁ ) ▁ ; ▁ @ ▁i ▁= ▁0 ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁sum ▁+ = ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁pro duc t ▁* = ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁i ▁< ▁10 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* start ▁ ) ▁ , ▁int ▁ ( ▁* end ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁is Prime ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* end ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* start ▁ ) ▁< = ▁ 2 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ( ▁* start ▁ ) ▁= ▁ 3 ▁ ; ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* start ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ ( ▁* start ▁ ) ▁ ++ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁i ▁< = ▁ ( ▁* end ▁ ) ▁ ; ▁i ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 3 ▁ ; ▁j ▁* ▁j ▁< = ▁i ▁ ; ▁j ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Prime ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ c ▁ ; ▁ @ ▁int ▁ b ▁ ; ▁ @ ▁int ▁ a ▁ ; ▁ @ ▁int ▁* ptr ▁ [ ▁ 3 ▁ ] ▁ ; ▁ @ ▁ ptr ▁ [ ▁0 ▁ ] ▁= ▁& a ▁ ; ▁ @ ▁ ptr ▁ [ ▁ 1 ▁ ] ▁= ▁& b ▁ ; ▁ @ ▁ ptr ▁ [ ▁ 2 ▁ ] ▁= ▁& c ▁ ; ▁ @ ▁ a ▁= ▁100 ▁ ; ▁ @ ▁ b ▁= ▁ 2 00 ▁ ; ▁ @ ▁ c ▁= ▁300 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁* ptr ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁* ptr ▁ [ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁* ptr ▁ [ ▁ 2 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁* ptr ▁ [ ▁0 ▁ ] ▁+ = ▁10 ▁ ; ▁ @ ▁* ptr ▁ [ ▁ 1 ▁ ] ▁+ = ▁10 ▁ ; ▁ @ ▁* ptr ▁ [ ▁ 2 ▁ ] ▁+ = ▁10 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁* ptr ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁* ptr ▁ [ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁* ptr ▁ [ ▁ 2 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* line ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁ line ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁w h ile ▁ ( ▁! ▁ ( ▁ ( ▁ line ▁ [ ▁i ▁ ] ▁ > = ▁ ' a ' ▁& & ▁ line ▁ [ ▁i ▁ ] ▁< = ▁ ' z ' ▁ ) ▁ | | ▁ @ ▁ ( ▁ line ▁ [ ▁i ▁ ] ▁ > = ▁ ' A ' ▁& & ▁ line ▁ [ ▁i ▁ ] ▁< = ▁ ' Z ' ▁ ) ▁ | | ▁ line ▁ [ ▁i ▁ ] ▁= = ▁'\ 0 ' ▁ ) ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁ ; ▁ line ▁ [ ▁j ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁ ++ j ▁ ) ▁ { ▁ @ ▁ line ▁ [ ▁j ▁ ] ▁= ▁ line ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ line ▁ [ ▁j ▁ ] ▁= ▁'\ 0 ' ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁put s ▁ ( ▁ ( ▁* line ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ Str fun ▁ ( ▁char ▁str 1 ▁ [ ▁ ] ▁ , ▁char ▁str 2 ▁ [ ▁ ] ▁ , ▁char ▁str 3 ▁ [ ▁ ] ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁put s ▁ ( ▁str 1 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁put s ▁ ( ▁str 2 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁put s ▁ ( ▁str 3 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁char ▁str 1 ▁ [ ▁ ] ▁= ▁ " He l lo ▁func tion " ▁ ; ▁ @ ▁char ▁str 2 ▁ [ ▁ ] ▁= ▁ " Ho w ▁ are ▁ y o u ? " ▁ ; ▁ @ ▁char ▁str 3 ▁ [ ▁ ] ▁= ▁ " C a tch ▁ s o m e ▁ string s " ▁ ; ▁ @ ▁ Str fun ▁ ( ▁str 1 ▁ , ▁str 2 ▁ , ▁str 3 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁int ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ 8 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁j ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁j ▁< ▁i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁j ++ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* height I n Meter s ▁ ) ▁ , ▁float ▁ ( ▁* w eight ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ b mi ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ( ▁* height I n Meter s ▁ ) ▁= ▁ ( ▁* height I n Meter s ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ b mi ▁= ▁ ( ▁* w eight ▁ ) ▁ / ▁ ( ▁ ( ▁* height I n Meter s ▁ ) ▁* ▁ ( ▁* height I n Meter s ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ b mi ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ b mi ▁< ▁18 .5 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ b mi ▁< ▁25 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ b mi ▁< ▁30 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁nth Prime ▁ ; ▁ @ ▁int ▁ num ▁= ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁count ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< = ▁ num ▁ / ▁ 2 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁i ▁ > ▁ num ▁ / ▁ 2 ▁ ) ▁ { ▁ @ ▁nth Prime ▁= ▁ num ▁ ; ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ num ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth Prime ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* power I n Ho r se power ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ power I n W att s ▁ ; ▁ @ ▁ ; ▁ @ ▁ power I n W att s ▁= ▁ ( ▁* power I n Ho r se power ▁ ) ▁* ▁746 . 0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ power I n W att s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* pos ▁ ) ▁ , ▁int ▁ ( ▁* val ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁arr ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁ > = ▁ ( ▁* pos ▁ ) ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁i ▁ - ▁ 1 ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁arr ▁ [ ▁ ( ▁* pos ▁ ) ▁ - ▁ 1 ▁ ] ▁= ▁ ( ▁* val ▁ ) ▁ ; ▁ @ ▁ ( ▁* n ▁ ) ▁ ++ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁arr ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ch ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁ascii Value ▁= ▁ ( ▁* ch ▁ ) ▁+ ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ascii Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ d if f ▁= ▁sum ▁ - ▁ 2 ▁* ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁ ? ▁ ( ▁* a ▁ ) ▁ : ▁ ( ▁* b ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ d if f ▁< ▁0 ▁ ? ▁ - d if f ▁ : ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁pro duc t ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁sum ▁+ = ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁pro duc t ▁* = ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁< ▁0 ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁factor ▁= ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* num ▁ ) ▁! = ▁ 1 ▁ ) ▁ { ▁ @ ▁w h ile ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁factor ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁factor ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* num ▁ ) ▁ / = ▁factor ▁ ; ▁ @ ▁ } ▁ @ ▁factor ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* ki lo meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁mile s ▁= ▁ ( ▁* ki lo meters ▁ ) ▁* ▁0 . 6 2 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* ki lo meters ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* l ▁ ) ▁ , ▁float ▁ ( ▁* w ▁ ) ▁ , ▁float ▁ ( ▁* h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁area ▁= ▁ ( ▁* l ▁ ) ▁* ▁ ( ▁* w ▁ ) ▁ ; ▁ @ ▁float ▁vol ▁= ▁area ▁* ▁ ( ▁* h ▁ ) ▁ / ▁3.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁numDigits ▁ ; ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁int ▁original Num ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁float ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁ > = ▁ 1 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁original Num ▁= ▁i ▁ ; ▁ @ ▁numDigits ▁= ▁ ( ▁int ▁ ) ▁ lo g 1 0 ▁ ( ▁i ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁original Num ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁re ma inde r ▁= ▁original Num ▁ % ▁10 ▁ ; ▁ @ ▁sum ▁+ = ▁pow ▁ ( ▁re ma inde r ▁ , ▁numDigits ▁ ) ▁ ; ▁ @ ▁original Num ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁int ▁ ) ▁sum ▁= = ▁i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ - ▁i ▁ - ▁ 1 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁j ▁ ] ▁< ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ second ▁ ; ▁ @ ▁int ▁ minute ▁ ; ▁ @ ▁int ▁ h o u r ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ h o u r ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ minute ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ second ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* height ▁ ) ▁ , ▁int ▁ ( ▁* w eight ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 7 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ h ▁ ; ▁ @ ▁int ▁ B M I ▁ ; ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ h ▁= ▁ ( ▁* height ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ B M I ▁= ▁ ( ▁* w eight ▁ ) ▁ / ▁ ( ▁ h ▁* ▁ h ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ B M I ▁< ▁ 1 5 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ B M I ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ B M I ▁ > = ▁ 1 5 . 1 ▁& & ▁ B M I ▁< = ▁ 1 7 .5 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ B M I ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ B M I ▁ > = ▁ 1 7 . 6 ▁& & ▁ B M I ▁< = ▁18 .5 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ B M I ▁+ ▁ 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ B M I ▁ > = ▁18 . 6 ▁& & ▁ B M I ▁< = ▁ 2 4 . 9 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ B M I ▁+ ▁ 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ B M I ▁ > = ▁25 ▁& & ▁ B M I ▁< = ▁ 2 9 . 9 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ B M I ▁+ ▁ 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ B M I ▁ > = ▁30 ▁& & ▁ B M I ▁< = ▁ 3 9 . 9 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ B M I ▁+ ▁ 6 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁ B M I ▁+ ▁ 7 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 7 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side 1 ▁ ) ▁ , ▁float ▁ ( ▁* side 2 ▁ ) ▁ , ▁float ▁ ( ▁* side 3 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ ( ▁* side 1 ▁ ) ▁+ ▁ ( ▁* side 2 ▁ ) ▁+ ▁ ( ▁* side 3 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁mul ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁mul ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* b ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁mul ▁+ = ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁mul ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ size _ char _ array ▁= ▁ size of ▁ ( ▁char ▁ [ ▁10 ▁ ] ▁ ) ▁ ; ▁ @ ▁int ▁ size _ int _ array ▁= ▁ size of ▁ ( ▁int ▁ [ ▁10 ▁ ] ▁ ) ▁ ; ▁ @ ▁int ▁ size _ f lo at _ array ▁= ▁ size of ▁ ( ▁float ▁ [ ▁10 ▁ ] ▁ ) ▁ ; ▁ @ ▁int ▁ size _ long _ int _ array ▁= ▁ size of ▁ ( ▁ long ▁int ▁ [ ▁10 ▁ ] ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ size _ char _ array ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ size _ int _ array ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ size _ f lo at _ array ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ size _ long _ int _ array ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁nth E ven ▁ ; ▁ @ ▁ ; ▁ @ ▁nth E ven ▁= ▁ 2 ▁* ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth E ven ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* string ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁freq ue n cy ▁ [ ▁25 5 ▁ ] ▁ ; ▁ @ ▁int ▁min ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁int ▁ascii ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁25 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁freq ue n cy ▁ [ ▁i ▁ ] ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ string ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ascii ▁= ▁ ( ▁int ▁ ) ▁ string ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁freq ue n cy ▁ [ ▁ascii ▁ ] ▁+ = ▁ 1 ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁min ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁25 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁freq ue n cy ▁ [ ▁i ▁ ] ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁freq ue n cy ▁ [ ▁min ▁ ] ▁= = ▁0 ▁ | | ▁freq ue n cy ▁ [ ▁i ▁ ] ▁< ▁freq ue n cy ▁ [ ▁min ▁ ] ▁ ) ▁min ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁min ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁freq ue n cy ▁ [ ▁min ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* feet ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ inches ▁= ▁ ( ▁* feet ▁ ) ▁* ▁12.0 f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁dig ▁ ; ▁ @ ▁int ▁ rev Number ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁do ▁ { ▁ @ ▁dig ▁= ▁ ( ▁* n ▁ ) ▁ % ▁10 ▁ ; ▁ @ ▁ rev Number ▁= ▁ rev Number ▁* ▁10 ▁+ ▁dig ▁ ; ▁ @ ▁ ( ▁* n ▁ ) ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁ ( ▁* n ▁ ) ▁ > ▁0 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ rev Number ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁nth He x agonal ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁nth He x agonal ▁= ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁ 2 ▁* ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth He x agonal ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* input S econds ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ second s ▁ ; ▁ @ ▁int ▁ minute s ▁ ; ▁ @ ▁int ▁ h o u r s ▁ ; ▁ @ ▁ ; ▁ @ ▁ h o u r s ▁= ▁ ( ▁* input S econds ▁ ) ▁ / ▁ 3 6 00 ▁ ; ▁ @ ▁ ( ▁* input S econds ▁ ) ▁= ▁ ( ▁* input S econds ▁ ) ▁ % ▁ 3 6 00 ▁ ; ▁ @ ▁ minute s ▁= ▁ ( ▁* input S econds ▁ ) ▁ / ▁ 6 0 ▁ ; ▁ @ ▁ second s ▁= ▁ ( ▁* input S econds ▁ ) ▁ % ▁ 6 0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ h o u r s ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ minute s ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ second s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁str 2 ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁char ▁str 1 ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁count ▁= ▁0 ▁ ; ▁str 1 ▁ [ ▁count ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁count ++ ▁ ) ▁ { ▁ @ ▁str 2 ▁ [ ▁count ▁ ] ▁= ▁str 1 ▁ [ ▁count ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁str 2 ▁ [ ▁count ▁ ] ▁= ▁'\ 0 ' ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁str 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁str 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ P I ▁= ▁3.14159 ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁vol um e ▁= ▁ ( ▁4.0 ▁ / ▁3.0 ▁ ) ▁* ▁ P I ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ surface A rea ▁= ▁ @ ▁ 2 ▁* ▁ ( ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* w id th ▁ ) ▁+ ▁ ( ▁* w id th ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁+ ▁ ( ▁* height ▁ ) ▁* ▁ ( ▁* length ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* pas cal s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ mm H g ▁= ▁ ( ▁* pas cal s ▁ ) ▁* ▁ 0.0 0 7 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ shift ed ▁ ; ▁ @ ▁ ; ▁ @ ▁ shift ed ▁= ▁ ( ▁* num ▁ ) ▁ > > ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ shift ed ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< = ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ ; ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 5 ▁ ; ▁j ▁ > = ▁i ▁ ; ▁j - - ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁gcd ▁ ( ▁int ▁ m ▁ , ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁rem ▁ ; ▁ @ ▁w h ile ▁ ( ▁ n ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁rem ▁= ▁ m ▁ % ▁ n ▁ ; ▁ @ ▁ m ▁= ▁ n ▁ ; ▁ @ ▁ n ▁= ▁rem ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ ( ▁ m ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁int ▁ ( ▁* num 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁gcd 2 ▁ ; ▁ @ ▁int ▁gcd 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num 1 ▁ ) ▁= = ▁0 ▁& & ▁ ( ▁* num 2 ▁ ) ▁= = ▁0 ▁& & ▁ ( ▁* num 3 ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁gcd 1 ▁= ▁gcd ▁ ( ▁ ( ▁* num 1 ▁ ) ▁ , ▁ ( ▁* num 2 ▁ ) ▁ ) ▁ ; ▁ @ ▁gcd 2 ▁= ▁gcd ▁ ( ▁ ( ▁* num 3 ▁ ) ▁ , ▁gcd 1 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* num 3 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁gcd 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁temp 2 ▁ ; ▁ @ ▁float ▁temp 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁temp 1 ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁temp 2 ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* c ▁ ) ▁= ▁temp 1 ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁temp 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* b ar ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ mm H g ▁= ▁ ( ▁* b ar ▁ ) ▁* ▁ 7 5 0.0 6 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ Print Prime Factor s ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁w h ile ▁ ( ▁ n ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ n ▁= ▁ n ▁ / ▁ 2 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁int ▁i ▁= ▁ 3 ▁ ; ▁i ▁* ▁i ▁< = ▁ n ▁ ; ▁i ▁= ▁i ▁+ ▁ 2 ▁ ) ▁ { ▁ @ ▁w h ile ▁ ( ▁ n ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ n ▁= ▁ n ▁ / ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ n ▁ > ▁ 2 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ Print Prime Factor s ▁ ( ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁* ▁ 2 ▁ - ▁ 1 ▁ ; ▁ @ ▁put s ▁ ( ▁"\ n --------------- --------------- --------------\ n " ▁ ) ▁ ; ▁ @ ▁int ▁numAtCol ▁= ▁0 ▁ ; ▁ @ ▁int ▁space sIn C urrent Row ▁ ; ▁ @ ▁int ▁col sIn C urrent Row ▁= ▁ - 1 ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁col sIn C urrent Row ▁+ = ▁ 2 ▁ ; ▁ @ ▁numAtCol ▁= ▁ row ▁ ; ▁ @ ▁space sIn C urrent Row ▁= ▁max Col s ▁ - ▁col sIn C urrent Row ▁ ; ▁ @ ▁int ▁space ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁col ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ { ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁col ▁< ▁ ( ▁col sIn C urrent Row ▁+ ▁ 1 ▁ ) ▁ / ▁ 2 ▁ ? ▁numAtCol - - ▁ : ▁numAtCol ++ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ totalS urface A rea ▁ ; ▁ @ ▁float ▁ lateral S urface A rea ▁ ; ▁ @ ▁float ▁ base A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ base A rea ▁= ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ lateral S urface A rea ▁= ▁ 2 ▁* ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ; ▁ @ ▁ totalS urface A rea ▁= ▁ 2 ▁* ▁ base A rea ▁+ ▁ lateral S urface A rea ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ totalS urface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁j ▁ ] ▁< ▁arr ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁j ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁sqrt ▁ ( ▁ 5 ▁* ▁ ( ▁ 5 ▁+ ▁ 2 ▁* ▁sqrt ▁ ( ▁ 5 ▁ ) ▁ ) ▁ ) ▁* ▁ ( ▁* side ▁ ) ▁* ▁ ( ▁* side ▁ ) ▁ ) ▁ / ▁ 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* A ▁ ) ▁ , ▁int ▁ ( ▁* B ▁ ) ▁ , ▁int ▁ ( ▁* C ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ x 2 ▁ ; ▁ @ ▁float ▁ x 1 ▁ ; ▁ @ ▁float ▁ de n o ▁ ; ▁ @ ▁float ▁disc ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁disc ▁= ▁ ( ▁ ( ▁* B ▁ ) ▁* ▁ ( ▁* B ▁ ) ▁ ) ▁ - ▁ ( ▁ 4 ▁* ▁ ( ▁* A ▁ ) ▁* ▁ ( ▁* C ▁ ) ▁ ) ▁ ; ▁ @ ▁ de n o ▁= ▁ 2 ▁* ▁ ( ▁* A ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁disc ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ x 1 ▁= ▁ ( ▁ - ▁ ( ▁* B ▁ ) ▁ / ▁ de n o ▁ ) ▁+ ▁ ( ▁sqrt ▁ ( ▁disc ▁ ) ▁ / ▁ de n o ▁ ) ▁ ; ▁ @ ▁ x 2 ▁= ▁ ( ▁ - ▁ ( ▁* B ▁ ) ▁ / ▁ de n o ▁ ) ▁ - ▁ ( ▁sqrt ▁ ( ▁disc ▁ ) ▁ / ▁ de n o ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ x 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ x 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁disc ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ x 1 ▁= ▁ - ▁ ( ▁* B ▁ ) ▁ / ▁ de n o ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ x 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* e ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁ - ▁ ( ▁* e ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁temp ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ ( ▁* c ▁ ) ▁= ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁add T wo Number s ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ { ▁re tur n ▁ x ▁+ ▁ y ▁ ; ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁ b ▁ ; ▁ @ ▁int ▁ a ▁ ; ▁ @ ▁int ▁ ( ▁* ptr _ s um ▁ ) ▁ ( ▁int ▁ , ▁int ▁ ) ▁ ; ▁ @ ▁ ptr _ s um ▁= ▁& a dd T wo Number s ▁ ; ▁ @ ▁ a ▁= ▁10 ▁ ; ▁ @ ▁ b ▁= ▁20 ▁ ; ▁ @ ▁sum ▁= ▁ ( ▁* ptr _ s um ▁ ) ▁ ( ▁ a ▁ , ▁ b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* pas cal s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁ ; ▁ @ ▁float ▁ mm H g ▁ ; ▁ @ ▁ c onversion Factor ▁= ▁ 0.0 0 7 5 ▁ ; ▁ @ ▁ ; ▁ @ ▁ mm H g ▁= ▁ ( ▁* pas cal s ▁ ) ▁* ▁ c onversion Factor ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ read Array ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ge t L ar ge st ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ , ▁large st ▁= ▁0 ▁ ; ▁ @ ▁large st ▁= ▁arr ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ > ▁large st ▁ ) ▁large st ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁large st ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ge t S mal l est ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ , ▁small est ▁= ▁0 ▁ ; ▁ @ ▁small est ▁= ▁arr ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁< ▁small est ▁ ) ▁small est ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁small est ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁arr ▁ [ ▁10 ▁ ] ▁ ; ▁ @ ▁ read Array ▁ ( ▁arr ▁ , ▁10 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ge t L ar ge st ▁ ( ▁arr ▁ , ▁10 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ge t S mal l est ▁ ( ▁arr ▁ , ▁10 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ge nde r ▁ ) ▁ , ▁int ▁ ( ▁* a ge ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' F ' ▁ | | ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' f ' ▁ ) ▁& & ▁ ( ▁* a ge ▁ ) ▁ > = ▁18 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' F ' ▁ | | ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' f ' ▁ ) ▁& & ▁ ( ▁* a ge ▁ ) ▁< ▁18 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' M ' ▁ | | ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' m ' ▁ ) ▁& & ▁ ( ▁* a ge ▁ ) ▁ > = ▁18 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' M ' ▁ | | ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' m ' ▁ ) ▁& & ▁ ( ▁* a ge ▁ ) ▁< ▁18 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base _ side ▁ ) ▁ , ▁float ▁ ( ▁* s l ant _ h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁total _ surface _ area ▁ ; ▁ @ ▁float ▁ t r ian g le _ area ▁ ; ▁ @ ▁float ▁ square _ area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ square _ area ▁= ▁ ( ▁* base _ side ▁ ) ▁* ▁ ( ▁* base _ side ▁ ) ▁ ; ▁ @ ▁ t r ian g le _ area ▁= ▁ ( ▁* base _ side ▁ ) ▁* ▁ ( ▁* s l ant _ h ▁ ) ▁ ; ▁ @ ▁total _ surface _ area ▁= ▁ square _ area ▁+ ▁ 2 ▁* ▁ t r ian g le _ area ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁total _ surface _ area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ a ▁= ▁ ' B ' ▁ ; ▁ @ ▁int ▁ b ▁= ▁ 3 4 5 ▁ ; ▁ @ ▁float ▁ c ▁= ▁ 4 5 6 . 7 8 f ▁ ; ▁ @ ▁float ▁ d ▁= ▁ 2 3 4 5 . 6 7 f ▁ ; ▁ @ ▁char ▁str ▁ [ ▁ ] ▁= ▁ " W or l d " ▁ ; ▁ @ ▁int ▁ size _ a ▁= ▁ size of ▁ ( ▁ a ▁ ) ▁ ; ▁ @ ▁int ▁ size _ b ▁= ▁ size of ▁ ( ▁ b ▁ ) ▁ ; ▁ @ ▁int ▁ size _ c ▁= ▁ size of ▁ ( ▁ c ▁ ) ▁ ; ▁ @ ▁int ▁ size _ d ▁= ▁ size of ▁ ( ▁ d ▁ ) ▁ ; ▁ @ ▁int ▁ size _ str ▁= ▁ size of ▁ ( ▁str ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ size _ a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ size _ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ size _ c ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ size _ d ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ size _ str ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* r eg n o ▁ ) ▁ , ▁char ▁ ( ▁* n ame ▁ ) ▁ , ▁int ▁ ( ▁* a ge ▁ ) ▁ , ▁int ▁ ( ▁* d o b ▁ ) ▁ , ▁ @ ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ge ▁ ) ▁+ ▁ ( ▁* d o b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ame ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* r eg n o ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* a ge ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* d o b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁float ▁sum ▁= ▁0 ▁ ; ▁ @ ▁float ▁sumOf Cub e s ▁= ▁0 ▁ ; ▁ @ ▁float ▁skewness ▁ ; ▁ @ ▁float ▁ stdDev i ation ▁ ; ▁ @ ▁float ▁variance ▁= ▁0 ▁ ; ▁ @ ▁float ▁ m e an ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁sum ▁+ = ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ m e an ▁= ▁sum ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁variance ▁+ = ▁pow ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ , ▁ 2 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁variance ▁= ▁variance ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ stdDev i ation ▁= ▁sqrt ▁ ( ▁variance ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sumOf Cub e s ▁+ = ▁pow ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ , ▁ 3 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁skewness ▁= ▁ ( ▁ ( ▁* n ▁ ) ▁ / ▁ ( ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁1.0 f ▁ ) ▁* ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁2.0 f ▁ ) ▁ ) ▁ ) ▁* ▁ ( ▁sumOf Cub e s ▁ / ▁ ( ▁* n ▁ ) ▁ ) ▁ / ▁ @ ▁pow ▁ ( ▁ stdDev i ation ▁ , ▁ 3 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ m e an ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁variance ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ stdDev i ation ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁skewness ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ p ent agonal Number ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁w h ile ▁ ( ▁ ( ▁* n ▁ ) ▁< = ▁0 ▁ ) ▁ ; ▁ @ ▁ p ent agonal Number ▁= ▁ ( ▁ 3 ▁* ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁* n ▁ ) ▁ - ▁ ( ▁* n ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ p ent agonal Number ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁* ▁j ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁loop ▁ ; ▁ @ ▁int ▁mul ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁mul ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁loop ▁= ▁ 1 ▁ ; ▁loop ▁< = ▁ ( ▁* b ▁ ) ▁ ; ▁loop ++ ▁ ) ▁ { ▁ @ ▁mul ▁+ = ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁mul ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* e ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁max ▁ ; ▁ @ ▁ ; ▁ @ ▁max ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁ > ▁max ▁ ) ▁max ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁ > ▁max ▁ ) ▁max ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* d ▁ ) ▁ > ▁max ▁ ) ▁max ▁= ▁ ( ▁* d ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* e ▁ ) ▁ > ▁max ▁ ) ▁max ▁= ▁ ( ▁* e ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁max ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁arr ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁j ▁ ; ▁ k ▁< ▁ ( ▁* size ▁ ) ▁ - ▁ 1 ▁ ; ▁ k ++ ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁ k ▁ ] ▁= ▁arr ▁ [ ▁ k ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* size ▁ ) ▁ - - ▁ ; ▁ @ ▁j - - ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁fl ag ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fl ag ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* value ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁result ▁= ▁ ( ▁* value ▁ ) ▁* ▁ 2 .5 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is Prime ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁nth Prime ▁= ▁ 2 ▁ ; ▁ @ ▁int ▁ num ▁= ▁ 2 ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁count ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁* ▁i ▁< = ▁ num ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Prime ▁ ) ▁ { ▁ @ ▁nth Prime ▁= ▁ num ▁ ; ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ num ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth Prime ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* start ▁ ) ▁ , ▁int ▁ ( ▁* end ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁counter ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* end ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁counter ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁counter ▁< = ▁ ( ▁* end ▁ ) ▁ ; ▁counter ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁counter ▁ % ▁ 2 ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁counter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number 1 ▁ ) ▁ , ▁int ▁ ( ▁* number 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* number 1 ▁ ) ▁ ; ▁i ▁< = ▁ ( ▁* number 2 ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁< ▁ 2 ▁ ) ▁ cont in ue ▁ ; ▁ @ ▁int ▁is Prime ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 2 ▁ ; ▁j ▁* ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Prime ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number 1 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* number 2 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ d if f ▁= ▁ a b s ▁ ( ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁loop ▁ ; ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁loop ▁= ▁ 1 ▁ ; ▁loop ▁< ▁ ( ▁* num ▁ ) ▁ ; ▁loop ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁loop ▁= = ▁0 ▁ ) ▁sum ▁+ = ▁loop ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁double ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁double ▁sum ▁= ▁0 ▁ ; ▁ @ ▁double ▁ m e an ▁ ; ▁ @ ▁double ▁sumOf Cub e s ▁= ▁0 ▁ ; ▁ @ ▁double ▁variance ▁= ▁0 ▁ ; ▁ @ ▁double ▁skewness ▁ ; ▁ @ ▁double ▁ stdDev i ation ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁sum ▁+ = ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ m e an ▁= ▁sum ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁variance ▁+ = ▁pow ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ , ▁ 2 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁variance ▁ / = ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ stdDev i ation ▁= ▁sqrt ▁ ( ▁variance ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sumOf Cub e s ▁+ = ▁pow ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ , ▁ 3 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁skewness ▁= ▁ ( ▁ ( ▁* n ▁ ) ▁ / ▁ ( ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁1.0 ▁ ) ▁* ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁2.0 ▁ ) ▁ ) ▁ ) ▁* ▁ ( ▁sumOf Cub e s ▁ / ▁ ( ▁* n ▁ ) ▁ ) ▁ / ▁ @ ▁pow ▁ ( ▁ stdDev i ation ▁ , ▁ 3 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ m e an ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁variance ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ stdDev i ation ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁skewness ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* speed M P S ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ speed K n o t s ▁ ; ▁ @ ▁ ; ▁ @ ▁ speed K n o t s ▁= ▁ ( ▁* speed M P S ▁ ) ▁* ▁ 1 . 9 4 384 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ speed K n o t s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ surface A rea ▁= ▁ 4 ▁* ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str 1 ▁ ) ▁ , ▁char ▁ ( ▁* str 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁char ▁j ▁ ; ▁ @ ▁char ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁i ▁= ▁0 ▁ ; ▁ @ ▁j ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁str 2 ▁ [ ▁j ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁j ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁i ▁! = ▁j ▁ ) ▁ { ▁ @ ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ , ▁j ▁= ▁0 ▁ ; ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ , ▁str 2 ▁ [ ▁j ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ , ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁= = ▁str 2 ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fl ag ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁float ▁ radius _ square d ▁ ; ▁ @ ▁ ; ▁ @ ▁ radius _ square d ▁= ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁area ▁= ▁3.14159 ▁* ▁ radius _ square d ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* x ▁ ) ▁ , ▁int ▁ ( ▁* y ▁ ) ▁ , ▁int ▁ ( ▁* z ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁large st ▁= ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* y ▁ ) ▁ > ▁large st ▁ ) ▁large st ▁= ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* z ▁ ) ▁ > ▁large st ▁ ) ▁large st ▁= ▁ ( ▁* z ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base ▁ ) ▁ , ▁float ▁ ( ▁* slantHeight ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ totalS urface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁ base A rea ▁= ▁ ( ▁* base ▁ ) ▁* ▁ ( ▁* base ▁ ) ▁ ; ▁ @ ▁float ▁ lateral A rea ▁= ▁ 2 ▁* ▁ ( ▁* base ▁ ) ▁* ▁ ( ▁* slantHeight ▁ ) ▁ ; ▁ @ ▁ totalS urface A rea ▁= ▁ base A rea ▁+ ▁ lateral A rea ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ totalS urface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ ma k e Lower case ▁ ( ▁char ▁ s ▁ [ ▁ ] ▁ ) ▁ ; ▁ @ ▁vo id ▁ ma k e U pper case ▁ ( ▁char ▁ s ▁ [ ▁ ] ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁str ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ ma k e Lower case ▁ ( ▁str ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁str ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ma k e U pper case ▁ ( ▁str ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁str ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ ma k e Lower case ▁ ( ▁char ▁ s ▁ [ ▁ ] ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁i ▁= ▁0 ▁ ; ▁ s ▁ [ ▁i ▁ ] ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ s ▁ [ ▁i ▁ ] ▁+ = ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁ > = ▁ ' A ' ▁& & ▁ s ▁ [ ▁i ▁ ] ▁< = ▁ ' Z ' ▁ ) ▁ ? ▁32 ▁ : ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁ ma k e U pper case ▁ ( ▁char ▁ s ▁ [ ▁ ] ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁i ▁= ▁0 ▁ ; ▁ s ▁ [ ▁i ▁ ] ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ s ▁ [ ▁i ▁ ] ▁ - = ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁ > = ▁ ' a ' ▁& & ▁ s ▁ [ ▁i ▁ ] ▁< = ▁ ' z ' ▁ ) ▁ ? ▁32 ▁ : ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ t o Lower case ▁ ( ▁char ▁ s ▁ [ ▁ ] ▁ ) ▁ ; ▁ @ ▁vo id ▁ t o U pper case ▁ ( ▁char ▁ s ▁ [ ▁ ] ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁str ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ t o Lower case ▁ ( ▁str ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁str ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ t o U pper case ▁ ( ▁str ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁str ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ t o Lower case ▁ ( ▁char ▁ s ▁ [ ▁ ] ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁ s ▁ [ ▁i ▁ ] ▁= ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁ > = ▁ ' A ' ▁& & ▁ s ▁ [ ▁i ▁ ] ▁< = ▁ ' Z ' ▁ ) ▁ ? ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁+ ▁32 ▁ ) ▁ : ▁ s ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁ t o U pper case ▁ ( ▁char ▁ s ▁ [ ▁ ] ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁ s ▁ [ ▁i ▁ ] ▁= ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁ > = ▁ ' a ' ▁& & ▁ s ▁ [ ▁i ▁ ] ▁< = ▁ ' z ' ▁ ) ▁ ? ▁ ( ▁ s ▁ [ ▁i ▁ ] ▁ - ▁32 ▁ ) ▁ : ▁ s ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ > = ▁ ( ▁* b ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ > = ▁ ( ▁* c ▁ ) ▁ ) ▁ @ ▁large st ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁large st ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁ > = ▁ ( ▁* c ▁ ) ▁ ) ▁ @ ▁large st ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁large st ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* val s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁swap p ed ▁ ; ▁ @ ▁int ▁ n ▁ ; ▁ @ ▁int ▁ m ▁ ; ▁ @ ▁ ; ▁ @ ▁ m ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ m ▁< ▁ ( ▁* size ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ m ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ m ++ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ m ▁= ▁0 ▁ ; ▁ m ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁ m ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁ n ▁= ▁0 ▁ ; ▁ n ▁< ▁ ( ▁* size ▁ ) ▁ - ▁ m ▁ - ▁ 1 ▁ ; ▁ n ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ val s ▁ [ ▁ n ▁ ] ▁< ▁ val s ▁ [ ▁ n ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁swap p ed ▁= ▁ val s ▁ [ ▁ n ▁ ] ▁ ; ▁ @ ▁ val s ▁ [ ▁ n ▁ ] ▁= ▁ val s ▁ [ ▁ n ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ val s ▁ [ ▁ n ▁+ ▁ 1 ▁ ] ▁= ▁swap p ed ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁ m ▁= ▁0 ▁ ; ▁ m ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁ m ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ val s ▁ [ ▁ m ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁large st ▁= ▁ @ ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁ ) ▁ ? ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* c ▁ ) ▁ ? ▁ ( ▁* a ▁ ) ▁ : ▁ ( ▁* c ▁ ) ▁ ) ▁ : ▁ ( ▁ ( ▁* b ▁ ) ▁ > ▁ ( ▁* c ▁ ) ▁ ? ▁ ( ▁* b ▁ ) ▁ : ▁ ( ▁* c ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ le t t e r ▁= ▁ ' D ' ▁ ; ▁ @ ▁int ▁ number ▁= ▁ 9 1 2 ▁ ; ▁ @ ▁float ▁dec i mal ▁= ▁10 1 1 . 1 2 f ▁ ; ▁ @ ▁float ▁large D e ci mal ▁= ▁ 5 6 7 8 . 9 1 f ▁ ; ▁ @ ▁char ▁ p hra se ▁ [ ▁ ] ▁= ▁ " C ▁ Pro g r a mm in g " ▁ ; ▁ @ ▁int ▁sizeOf L e t t e r ▁= ▁ size of ▁ ( ▁ le t t e r ▁ ) ▁ ; ▁ @ ▁int ▁sizeOf Number ▁= ▁ size of ▁ ( ▁ number ▁ ) ▁ ; ▁ @ ▁int ▁sizeOf D e ci mal ▁= ▁ size of ▁ ( ▁dec i mal ▁ ) ▁ ; ▁ @ ▁int ▁sizeOf L ar ge D e ci mal ▁= ▁ size of ▁ ( ▁large D e ci mal ▁ ) ▁ ; ▁ @ ▁int ▁sizeOf P hra se ▁= ▁ size of ▁ ( ▁ p hra se ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sizeOf L e t t e r ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sizeOf Number ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁sizeOf D e ci mal ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁sizeOf L ar ge D e ci mal ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁sizeOf P hra se ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* e ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁result ▁+ = ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁result ▁+ = ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁result ▁ - = ▁ ( ▁* d ▁ ) ▁ ; ▁ @ ▁result ▁ - = ▁ ( ▁* e ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁ ( ▁ ( ▁* n ▁ ) ▁ / ▁2.0 ▁ ) ▁* ▁ ( ▁ 1 ▁+ ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁float ▁next ▁ ; ▁ @ ▁float ▁ second ▁= ▁ 1 ▁ ; ▁ @ ▁float ▁ first ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ ; ▁i ▁< ▁ ( ▁* limit ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁< = ▁ 1 ▁ ) ▁ @ ▁next ▁= ▁ ( ▁float ▁ ) ▁i ▁ ; ▁ @ ▁el se ▁ { ▁ @ ▁next ▁= ▁ first ▁+ ▁ second ▁ ; ▁ @ ▁ first ▁= ▁ second ▁ ; ▁ @ ▁ second ▁= ▁next ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁next ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ h al f S q r t 3 ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ h al f S q r t 3 ▁= ▁sqrt ▁ ( ▁ 3 ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁area ▁= ▁ 2 ▁* ▁ h al f S q r t 3 ▁* ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ - ▁i ▁ - ▁ 1 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ > ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* k mph ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁knots ▁= ▁ ( ▁* k mph ▁ ) ▁ / ▁ 1 . 8 5 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ g ▁= ▁ 5 ▁ ; ▁ @ ▁vo id ▁ t est ▁ ( ▁ ) ▁ ; ▁ @ ▁vo id ▁ s h o w case ▁ ( ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ g ▁= ▁10 ▁ ; ▁ @ ▁int ▁ h ▁= ▁20 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ g ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ h ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ t est ▁ ( ▁ ) ▁ ; ▁ @ ▁ s h o w case ▁ ( ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ h ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ t est ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁ h ▁= ▁30 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ s h o w case ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁50 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ 4 ▁* ▁ ( ▁* side L ength ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁cnt ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁cnt ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁int ▁ tNum ▁= ▁ ( ▁* num ▁ ) ▁< ▁0 ▁ ? ▁ - ▁ ( ▁* num ▁ ) ▁ : ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁ tNum ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁cnt ++ ▁ ; ▁ @ ▁ tNum ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁cnt ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁circum fer e nce ▁= ▁ 2 ▁* ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁next ▁= ▁0 ▁ ; ▁ @ ▁int ▁current ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ p rev ▁= ▁0 ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* limit ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁fo r ▁ ( ▁ ; ▁next ▁< = ▁ ( ▁* limit ▁ ) ▁ ; ▁count ++ ▁ ) ▁ { ▁ @ ▁next ▁= ▁ p rev ▁+ ▁current ▁ ; ▁ @ ▁ p rev ▁= ▁current ▁ ; ▁ @ ▁current ▁= ▁next ▁ ; ▁ @ ▁ if ▁ ( ▁ p rev ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁int ▁ second ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ first ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* limit ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁< = ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ first ▁+ ▁ second ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ second ▁+ = ▁ first ▁ ; ▁ @ ▁ first ▁= ▁ second ▁ - ▁ first ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* y ear ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 ▁= = ▁0 ▁& & ▁ ( ▁* y ear ▁ ) ▁ % ▁100 ▁! = ▁0 ▁ ) ▁ | | ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 00 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ case ▁0 : ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ case ▁ 1 : ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ a ▁= ▁10 ▁ ; ▁ @ ▁vo id ▁ fun ▁ ( ▁vo id ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ a ▁= ▁20 ▁ ; ▁ @ ▁int ▁ b ▁= ▁30 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ fun ▁ ( ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ fun ▁ ( ▁vo id ▁ ) ▁ { ▁ @ ▁int ▁ b ▁= ▁ 4 0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i V ar ▁ ; ▁ @ ▁float ▁ f V ar ▁ ; ▁ @ ▁ ; ▁ @ ▁ f V ar ▁= ▁sqrt ▁ ( ▁ ( ▁double ▁ ) ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁i V ar ▁= ▁ f V ar ▁ ; ▁ @ ▁ if ▁ ( ▁i V ar ▁= = ▁ f V ar ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁char ▁symbol ▁= ▁ ' A ' ▁ ; ▁ @ ▁int ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< = ▁ ( ▁count ▁ / ▁ 2 ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁symbol ++ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁symbol ▁= ▁symbol ▁ - ▁ 2 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁count ▁ / ▁ 2 ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁symbol - - ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁count ▁= ▁count ▁+ ▁ 2 ▁ ; ▁ @ ▁symbol ▁= ▁ ' A ' ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁int ▁arr ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* num ▁ ) ▁! = ▁ - 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁count ++ ▁ ; ▁ @ ▁arr ▁ [ ▁i ++ ▁ ] ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁count ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* wDay ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* wDay ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* wDay ▁ ) ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* wDay ▁ ) ▁= = ▁ 2 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* wDay ▁ ) ▁= = ▁ 3 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* wDay ▁ ) ▁= = ▁ 4 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* wDay ▁ ) ▁= = ▁ 5 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* wDay ▁ ) ▁= = ▁ 6 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* num 1 ▁ ) ▁! = ▁ ( ▁* num 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* num 1 ▁ ) ▁ > ▁ ( ▁* num 2 ▁ ) ▁ ) ▁ @ ▁ ( ▁* num 1 ▁ ) ▁ - = ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁ ( ▁* num 2 ▁ ) ▁ - = ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num 1 ▁ ) ▁+ ▁ ( ▁* num 2 ▁ ) ▁ - ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num 1 ▁ ) ▁+ ▁ ( ▁* num 2 ▁ ) ▁ - ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* ent ere d Pa s s wo rd ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ pas s wo rd ▁= ▁ 1 2 3 4 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ lo g in ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< = ▁ 2 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ pas s wo rd ▁= = ▁ ( ▁* ent ere d Pa s s wo rd ▁ ) ▁ ) ▁ { ▁ @ ▁ lo g in ▁= ▁ ( ▁* ent ere d Pa s s wo rd ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ lo g in ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ lo g in ▁= ▁ ( ▁* ent ere d Pa s s wo rd ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ lo g in ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁nth E ven ▁ ; ▁ @ ▁float ▁ c o m mon D if fer e nce ▁= ▁ 2 ▁ ; ▁ @ ▁float ▁ first T erm ▁= ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁nth E ven ▁= ▁ first T erm ▁+ ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ) ▁* ▁ c o m mon D if fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁nth E ven ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ radius ▁= ▁5.0 f ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁area ▁= ▁3.14 f ▁* ▁ radius ▁* ▁ radius ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ radius ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* ma r k s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ pas se d S u b j e c t s ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ma r k s ▁ [ ▁i ▁ ] ▁ > ▁32 ▁ ) ▁ pas se d S u b j e c t s ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ pas se d S u b j e c t s ▁= = ▁ 5 ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ 3 .141592653589793 2 384 6 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ch ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁char ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* ch ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ ' a ' : ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' e ' : ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' i ' : ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' o ' : ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' u ' : ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁default : ▁ { ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ - 1 ▁ ; ▁ @ ▁ } ▁ @ ▁result ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ) ▁ / ▁ ( ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ divisor ▁= ▁10 ▁ ; ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* num ▁ ) ▁ / ▁ divisor ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base L ength ▁ ) ▁ , ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁total Side L ength ▁ ; ▁ @ ▁float ▁total Base L ength ▁ ; ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁total Base L ength ▁= ▁ ( ▁* base L ength ▁ ) ▁* ▁ 2 ▁ ; ▁ @ ▁total Side L ength ▁= ▁ ( ▁* side L ength ▁ ) ▁* ▁ 2 ▁ ; ▁ @ ▁perim eter ▁= ▁total Base L ength ▁+ ▁total Side L ength ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a Re al ▁ ) ▁ , ▁float ▁ ( ▁* a I mag ▁ ) ▁ , ▁float ▁ ( ▁* b Re al ▁ ) ▁ , ▁float ▁ ( ▁* b I mag ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁sum I mag ▁ ; ▁ @ ▁float ▁sum Re al ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sum Re al ▁= ▁ ( ▁* a Re al ▁ ) ▁+ ▁ ( ▁* b Re al ▁ ) ▁ ; ▁ @ ▁sum I mag ▁= ▁ ( ▁* a I mag ▁ ) ▁+ ▁ ( ▁* b I mag ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum Re al ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum I mag ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁total _ area ▁ ; ▁ @ ▁float ▁area _ lateral ▁ ; ▁ @ ▁float ▁area _ base ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area _ base ▁= ▁pow ▁ ( ▁ ( ▁* length ▁ ) ▁ , ▁ 2 ▁ ) ▁ ; ▁ @ ▁area _ lateral ▁= ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁* ▁ 2 ▁ ; ▁ @ ▁total _ area ▁= ▁area _ base ▁+ ▁area _ lateral ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁total _ area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁int ▁ ( ▁* A ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ Temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ Temp ▁= ▁ A ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁j ▁= ▁i ▁ - ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ Temp ▁< ▁ A ▁ [ ▁j ▁ ] ▁& & ▁j ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ A ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁ A ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁j ▁= ▁j ▁ - ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ A ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁ Temp ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ A ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* row s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* row s ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁int ▁total C h ar s ▁= ▁ ( ▁* row s ▁ ) ▁ - ▁ 1 ▁+ ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁total C h ar s ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁j ▁ > = ▁ ( ▁* row s ▁ ) ▁ - ▁ ( ▁i ▁ - ▁ 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁j ▁< ▁total C h ar s ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁cube ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁cube ▁< = ▁ ( ▁* limit ▁ ) ▁ ) ▁ { ▁ @ ▁cube ▁= ▁i ▁* ▁i ▁* ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁cube ▁< = ▁ ( ▁* limit ▁ ) ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁ t riangular Number ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ t riangular Number ▁< ▁ ( ▁* l ower ▁ ) ▁ ) ▁ { ▁ @ ▁i ++ ▁ ; ▁ @ ▁ t riangular Number ▁+ = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* upper ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁ t riangular Number ▁< = ▁ ( ▁* upper ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ t riangular Number ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ t riangular Number ▁+ = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* d 1 ▁ ) ▁ , ▁float ▁ ( ▁* d 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁ ( ▁* d 1 ▁ ) ▁* ▁ ( ▁* d 2 ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ side 6 ▁ ; ▁ @ ▁float ▁ side 5 ▁ ; ▁ @ ▁float ▁ side 4 ▁ ; ▁ @ ▁float ▁ side 3 ▁ ; ▁ @ ▁float ▁ side 2 ▁ ; ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ side 2 ▁= ▁ ( ▁* side 1 ▁ ) ▁ ; ▁ @ ▁ side 3 ▁= ▁ ( ▁* side 1 ▁ ) ▁ ; ▁ @ ▁ side 4 ▁= ▁ ( ▁* side 1 ▁ ) ▁ ; ▁ @ ▁ side 5 ▁= ▁ ( ▁* side 1 ▁ ) ▁ ; ▁ @ ▁ side 6 ▁= ▁ ( ▁* side 1 ▁ ) ▁ ; ▁ @ ▁perim eter ▁= ▁ ( ▁* side 1 ▁ ) ▁+ ▁ side 2 ▁+ ▁ side 3 ▁+ ▁ side 4 ▁+ ▁ side 5 ▁+ ▁ side 6 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁root 2 ▁ ; ▁ @ ▁float ▁root 1 ▁ ; ▁ @ ▁float ▁disc rim in ant ▁ ; ▁ @ ▁ ; ▁ @ ▁disc rim in ant ▁= ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ - ▁ 4 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁disc rim in ant ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁root 1 ▁= ▁ ( ▁ - ▁ ( ▁* b ▁ ) ▁+ ▁sqrt ▁ ( ▁disc rim in ant ▁ ) ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁root 2 ▁= ▁ ( ▁ - ▁ ( ▁* b ▁ ) ▁ - ▁sqrt ▁ ( ▁disc rim in ant ▁ ) ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁root 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁root 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁disc rim in ant ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁root 1 ▁= ▁ - ▁ ( ▁* b ▁ ) ▁ / ▁ ( ▁2.0 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁root 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁fib N ext ▁ ; ▁ @ ▁int ▁fib 2 ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁fib 1 ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁fib N ext ▁= ▁fib 1 ▁+ ▁fib 2 ▁ ; ▁fib N ext ▁< = ▁ ( ▁* upper ▁ ) ▁ ; ▁fib N ext ▁= ▁fib 1 ▁+ ▁fib 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁fib N ext ▁ > = ▁ ( ▁* l ower ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁fib N ext ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fib 1 ▁= ▁fib 2 ▁ ; ▁ @ ▁fib 2 ▁= ▁fib N ext ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁swap E lement s ▁ ( ▁int ▁* arr 1 ▁ , ▁int ▁* arr 2 ▁ , ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ , ▁temp ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ n ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁temp ▁= ▁arr 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁arr 1 ▁ [ ▁i ▁ ] ▁= ▁arr 2 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁arr 2 ▁ [ ▁i ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁int ▁array _ 1 ▁ [ ▁ 6 ▁ ] ▁= ▁ { ▁0 ▁ , ▁ 1 ▁ , ▁ 2 ▁ , ▁ 3 ▁ , ▁ 4 ▁ } ▁ ; ▁ @ ▁int ▁array _ 2 ▁ [ ▁ 6 ▁ ] ▁= ▁ { ▁ 5 ▁ , ▁ 6 ▁ , ▁ 7 ▁ , ▁ 8 ▁ , ▁ 9 ▁ } ▁ ; ▁ @ ▁swap E lement s ▁ ( ▁array _ 1 ▁ , ▁array _ 2 ▁ , ▁ 5 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array _ 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁array _ 2 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁max Index ▁= ▁0 ▁ ; ▁ @ ▁int ▁min Index ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ number s ▁ [ ▁i ▁ ] ▁< ▁ number s ▁ [ ▁min Index ▁ ] ▁ ) ▁ { ▁ @ ▁min Index ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ number s ▁ [ ▁i ▁ ] ▁ > ▁ number s ▁ [ ▁max Index ▁ ] ▁ ) ▁ { ▁ @ ▁max Index ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ number s ▁ [ ▁min Index ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁min Index ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ number s ▁ [ ▁max Index ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁max Index ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* input Value ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁result Fl o or ▁= ▁floor ▁ ( ▁ ( ▁* input Value ▁ ) ▁ ) ▁ ; ▁ @ ▁float ▁result C e i l ▁= ▁ ce i l ▁ ( ▁ ( ▁* input Value ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result Fl o or ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result C e i l ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ u nsi gn ed ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ a ▁ [ ▁ 3 ▁ ] ▁= ▁ { ▁ 1 1 ▁ , ▁ 2 2 ▁ , ▁ 3 3 ▁ } ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 3 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁int ▁ value ▁= ▁ a ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ u nsi gn ed ▁int ▁address ▁= ▁ ( ▁ u nsi gn ed ▁int ▁ ) ▁& a ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ value ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁address ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ divi s ible ▁ ; ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ divi s ible ▁= ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 3 ▁= = ▁0 ▁ ) ▁ ? ▁ 1 ▁ : ▁0 ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ ( ▁ divi s ible ▁ ? ▁ 1 ▁ : ▁ 2 ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ divi s ible ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ch ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* ch ▁ ) ▁= = ▁ ' a ' ▁ | | ▁ ( ▁* ch ▁ ) ▁= = ▁ ' e ' ▁ | | ▁ ( ▁* ch ▁ ) ▁= = ▁ ' i ' ▁ | | ▁ ( ▁* ch ▁ ) ▁= = ▁ ' o ' ▁ | | ▁ @ ▁ ( ▁* ch ▁ ) ▁= = ▁ ' u ' ▁ | | ▁ ( ▁* ch ▁ ) ▁= = ▁ ' A ' ▁ | | ▁ ( ▁* ch ▁ ) ▁= = ▁ ' E ' ▁ | | ▁ ( ▁* ch ▁ ) ▁= = ▁ ' I ' ▁ | | ▁ @ ▁ ( ▁* ch ▁ ) ▁= = ▁ ' O ' ▁ | | ▁ ( ▁* ch ▁ ) ▁= = ▁ ' U ' ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ( ▁* side ▁ ) ▁* = ▁ ( ▁* side ▁ ) ▁* ▁ 2 ▁* ▁ ( ▁ 1 ▁+ ▁sqrt ▁ ( ▁ 2 ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* pos ▁ ) ▁ , ▁int ▁ ( ▁* val ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁ > = ▁ ( ▁* pos ▁ ) ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁i ▁ - ▁ 1 ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁arr ▁ [ ▁ ( ▁* pos ▁ ) ▁ - ▁ 1 ▁ ] ▁= ▁ ( ▁* val ▁ ) ▁ ; ▁ @ ▁ ( ▁* n ▁ ) ▁ ++ ▁ ; ▁ @ ▁ ; ▁ @ ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* R ▁ ) ▁ , ▁float ▁ ( ▁* r ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁pi Square d ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁pi Square d ▁= ▁ 3 .141592653589793 2 384 6 ▁* ▁ 3 .141592653589793 2 384 6 ▁ ; ▁ @ ▁area ▁= ▁ 4 ▁* ▁pi Square d ▁* ▁ ( ▁* R ▁ ) ▁* ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁float ▁ l ▁ ; ▁ @ ▁ ; ▁ @ ▁ l ▁= ▁sqrt ▁ ( ▁pow ▁ ( ▁ ( ▁* radius ▁ ) ▁ , ▁ 2 ▁ ) ▁+ ▁pow ▁ ( ▁ ( ▁* height ▁ ) ▁ , ▁ 2 ▁ ) ▁ ) ▁ ; ▁ @ ▁area ▁= ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁ ( ▁* radius ▁ ) ▁+ ▁ l ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* height ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁min _ index ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁min _ index ▁= ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁j ▁ ] ▁< ▁arr ▁ [ ▁min _ index ▁ ] ▁ ) ▁ { ▁ @ ▁min _ index ▁= ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁min _ index ▁! = ▁i ▁ ) ▁ { ▁ @ ▁temp ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁min _ index ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁min _ index ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁* ▁ 2 ▁ - ▁ 1 ▁ ; ▁ @ ▁put s ▁ ( ▁"\ n --------------- --------------- --------------\ n " ▁ ) ▁ ; ▁ @ ▁int ▁space sIn C urrent Row ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁space sIn C urrent Row ▁= ▁ ( ▁ ( ▁* max Row s ▁ ) ▁ - ▁ row ▁ ) ▁* ▁ 2 ▁ ; ▁ @ ▁int ▁space ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁col ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁convert ▁ ( ▁int ▁ , ▁int ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁convert ▁ ( ▁ ( ▁* num ▁ ) ▁ , ▁ 2 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁convert ▁ ( ▁ ( ▁* num ▁ ) ▁ , ▁ 8 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁convert ▁ ( ▁ ( ▁* num ▁ ) ▁ , ▁ 1 6 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁convert ▁ ( ▁int ▁ num ▁ , ▁int ▁ base ▁ ) ▁ { ▁ @ ▁int ▁rem ▁= ▁ num ▁ % ▁ base ▁ ; ▁ @ ▁ if ▁ ( ▁ num ▁= = ▁0 ▁ ) ▁re tur n ▁ ; ▁ @ ▁convert ▁ ( ▁ num ▁ / ▁ base ▁ , ▁ base ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁rem ▁< ▁10 ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁ shift ed ▁= ▁ ( ▁ ( ▁* num ▁ ) ▁ > > ▁ 1 ▁ ) ▁< < ▁ 1 ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁! = ▁ shift ed ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁tally ▁ ; ▁ @ ▁char ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁tally ▁= ▁ 2 ▁ ; ▁tally ▁< = ▁ ( ▁ ( ▁* number ▁ ) ▁ / ▁ 2 ▁ ) ▁ ; ▁tally ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁tally ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fl ag ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁fact ▁ , ▁i ▁ , ▁j ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁i ▁< = ▁ ( ▁* upper ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fact ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 2 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁fact ▁= ▁fact ▁* ▁j ▁ ; ▁ @ ▁ if ▁ ( ▁fact ▁< ▁0 ▁ ) ▁ { ▁ @ ▁fact ▁= ▁ - 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fact ▁ > ▁0 ▁& & ▁fact ▁< = ▁ ( ▁* upper ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁fact ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side _ length ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ octa g o n _ per imeter ▁ ; ▁ @ ▁ ; ▁ @ ▁ octa g o n _ per imeter ▁= ▁ ( ▁* side _ length ▁ ) ▁* ▁ 8 . 0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ octa g o n _ per imeter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁nth He x agonal ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁nth He x agonal ▁= ▁ 2 ▁* ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁* n ▁ ) ▁ - ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth He x agonal ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* x ▁ ) ▁ , ▁int ▁ ( ▁* y ▁ ) ▁ , ▁int ▁ ( ▁* z ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁large st ▁= ▁ @ ▁ ( ▁ ( ▁* x ▁ ) ▁ > ▁ ( ▁* y ▁ ) ▁ ) ▁ ? ▁ ( ▁ ( ▁* x ▁ ) ▁ > ▁ ( ▁* z ▁ ) ▁ ? ▁ ( ▁* x ▁ ) ▁ : ▁ ( ▁* z ▁ ) ▁ ) ▁ : ▁ ( ▁ ( ▁* y ▁ ) ▁ > ▁ ( ▁* z ▁ ) ▁ ? ▁ ( ▁* y ▁ ) ▁ : ▁ ( ▁* z ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁ > = ▁ 1 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁ > = ▁ 1 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁ ; ▁j ▁ > = ▁ 1 ▁ ; ▁j - - ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* pressureIn Pa s cal s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ pressureIn B ar ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ pressureIn B ar ▁= ▁ ( ▁* pressureIn Pa s cal s ▁ ) ▁ / ▁100 00 0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ pressureIn B ar ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁count Digit s ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ n ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ n ▁ / = ▁10 ▁ ; ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁count ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁is A r m str o n g ▁ ( ▁int ▁ num ▁ ) ▁ { ▁ @ ▁int ▁ n ▁= ▁count Digit s ▁ ( ▁ num ▁ ) ▁ ; ▁ @ ▁int ▁temp ▁= ▁ num ▁ , ▁sum ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁temp ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁int ▁re ma inde r ▁= ▁temp ▁ % ▁10 ▁ ; ▁ @ ▁sum ▁+ = ▁pow ▁ ( ▁re ma inde r ▁ , ▁ n ▁ ) ▁ ; ▁ @ ▁temp ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ num ▁= = ▁sum ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ num ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ 1 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁is A r m str o n g ▁ ( ▁ num ▁ ) ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ if ▁ ( ▁count ▁= = ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ num ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* start ▁ ) ▁ , ▁int ▁ ( ▁* end ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is Prime ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* end ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁i ▁< = ▁ ( ▁* end ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁= = ▁ 1 ▁ | | ▁i ▁= = ▁0 ▁ ) ▁ cont in ue ▁ ; ▁ @ ▁is Prime ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 2 ▁ ; ▁j ▁* ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Prime ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* size ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ - 1 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁ ( ▁* size ▁ ) ▁* ▁ 2 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁j ▁= = ▁i ▁ | | ▁j ▁= = ▁ ( ▁ ( ▁* size ▁ ) ▁* ▁ 2 ▁ ) ▁ - ▁i ▁+ ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* size ▁ ) ▁ - ▁ 1 ▁ ; ▁i ▁ > ▁0 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁ ( ▁* size ▁ ) ▁* ▁ 2 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁j ▁= = ▁i ▁ | | ▁j ▁= = ▁ ( ▁ ( ▁* size ▁ ) ▁* ▁ 2 ▁ ) ▁ - ▁i ▁+ ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁is O dd ▁= ▁ ( ▁* num ▁ ) ▁ % ▁ 2 ▁ ; ▁ @ ▁ if ▁ ( ▁is O dd ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* search ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁mid d le ▁ ; ▁ @ ▁int ▁last ▁ ; ▁ @ ▁int ▁ first ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ first ▁= ▁0 ▁ ; ▁ @ ▁last ▁= ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁ @ ▁mid d le ▁= ▁ ( ▁ first ▁+ ▁last ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ first ▁< = ▁last ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁mid d le ▁ ] ▁< ▁ ( ▁* search ▁ ) ▁ ) ▁ @ ▁ first ▁= ▁mid d le ▁+ ▁ 1 ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁array ▁ [ ▁mid d le ▁ ] ▁= = ▁ ( ▁* search ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* search ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁mid d le ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁el se ▁ @ ▁last ▁= ▁mid d le ▁ - ▁ 1 ▁ ; ▁ @ ▁mid d le ▁= ▁ ( ▁ first ▁+ ▁last ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ first ▁ > ▁last ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* search ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁str 2 ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁char ▁str 1 ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁str 2 ▁ [ ▁i ▁ ] ▁= ▁str 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁str 2 ▁ [ ▁i ▁ ] ▁= ▁'\ 0 ' ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁str 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁str 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length _ c m ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ length _ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ length _ inches ▁= ▁ ( ▁* length _ c m ▁ ) ▁ / ▁ 2 .5 4 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ length _ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁space ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ row s ▁= ▁ 8 ▁ ; ▁ @ ▁int ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ row s ▁ ; ▁i ▁ > = ▁ 1 ▁ ; ▁ - - i ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁space ▁= ▁0 ▁ ; ▁space ▁< ▁ row s ▁ - ▁i ▁ ; ▁ ++ s p a ce ▁ ) ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁ ; ▁j ▁< = ▁ 2 ▁* ▁i ▁ - ▁ 1 ▁ ; ▁ ++ j ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁i ▁ - ▁ 1 ▁ ; ▁ ++ j ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ^ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ^ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ^ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* num ▁ ) ▁ / ▁10 ▁* ▁10 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* de ci mal ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ octa l ▁= ▁0 ▁ ; ▁ @ ▁int ▁ place Value ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* de ci mal ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ octa l ▁+ = ▁ ( ▁ ( ▁* de ci mal ▁ ) ▁ % ▁ 8 ▁ ) ▁* ▁ place Value ▁ ; ▁ @ ▁ ( ▁* de ci mal ▁ ) ▁ / = ▁ 8 ▁ ; ▁ @ ▁ place Value ▁* = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁result ▁= ▁ octa l ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num A ▁ ) ▁ , ▁int ▁ ( ▁* num B ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* num B ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* num B ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* num A ▁ ) ▁= ▁ ( ▁* num A ▁ ) ▁* ▁ 2 ▁ ; ▁ @ ▁ ( ▁* num B ▁ ) ▁= ▁ ( ▁* num B ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁sum ▁+ = ▁ ( ▁* num A ▁ ) ▁ ; ▁ @ ▁ ( ▁* num B ▁ ) ▁ - - ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num A ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num B ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* divi d end ▁ ) ▁ , ▁int ▁ ( ▁* divisor ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re ma inde r ▁= ▁ ( ▁* divi d end ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁re ma inde r ▁ > = ▁ ( ▁* divisor ▁ ) ▁ ) ▁ { ▁ @ ▁re ma inde r ▁= ▁re ma inde r ▁ - ▁ ( ▁* divisor ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁re ma inde r ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁ digit ▁ ; ▁ @ ▁int ▁reverse d ▁ ; ▁ @ ▁int ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ num ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ num ▁< = ▁ ( ▁* upper ▁ ) ▁ ; ▁ num ++ ▁ ) ▁ { ▁ @ ▁temp ▁= ▁ num ▁ ; ▁ @ ▁reverse d ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁temp ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ digit ▁= ▁temp ▁ % ▁10 ▁ ; ▁ @ ▁reverse d ▁= ▁reverse d ▁* ▁10 ▁+ ▁ digit ▁ ; ▁ @ ▁temp ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ num ▁= = ▁reverse d ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ value ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ b ▁= ▁ 8 ▁ ; ▁ @ ▁int ▁ a ▁= ▁ 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ value ▁ ( ▁ a ▁ , ▁ b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ value ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ { ▁ @ ▁ x ++ ▁ ; ▁ @ ▁ y ++ ▁ ; ▁ @ ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* prin ci p al ▁ ) ▁ , ▁float ▁ ( ▁* rate ▁ ) ▁ , ▁float ▁ ( ▁* y ear ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ ci ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ci ▁= ▁ ( ▁* prin ci p al ▁ ) ▁* ▁ ( ▁ ( ▁pow ▁ ( ▁ ( ▁ 1 ▁+ ▁ ( ▁* rate ▁ ) ▁ / ▁100 ▁ ) ▁ , ▁ ( ▁* y ear ▁ ) ▁ ) ▁ - ▁ 1 ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ci ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁float ▁ t erm ▁ ; ▁ @ ▁float ▁sum ▁= ▁ 0.0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ 2 ▁* ▁ ( ▁* N ▁ ) ▁ ; ▁i ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁ t erm ▁= ▁i ▁ / ▁ ( ▁float ▁ ) ▁ ( ▁i ▁* ▁i ▁ ) ▁ ; ▁ @ ▁sum ▁+ = ▁ t erm ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mp s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁ mph ▁= ▁ ( ▁* mp s ▁ ) ▁* ▁ 2 . 2 3 6 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ mph ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁int ▁j ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁str ▁ [ ▁j ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁j ++ ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁j ▁ ) ▁ { ▁ @ ▁j - - ▁ ; ▁ @ ▁ if ▁ ( ▁str ▁ [ ▁i ▁ ] ▁! = ▁str ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fl ag ▁= = ▁0 ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number 1 ▁ ) ▁ , ▁int ▁ ( ▁* number 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is Prime ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* number 1 ▁ ) ▁< = ▁ 2 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁ ( ▁* number 1 ▁ ) ▁= ▁ 3 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* number 1 ▁ ) ▁ ; ▁i ▁< = ▁ ( ▁* number 2 ▁ ) ▁ ; ▁i ▁+ = ▁ ( ▁i ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ ? ▁ 1 ▁ : ▁ 2 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 3 ▁ ; ▁j ▁* ▁j ▁< = ▁i ▁ ; ▁j ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Prime ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number 1 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* number 2 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ( ▁* num 1 ▁ ) ▁= ▁ f a b s ▁ ( ▁ ( ▁* num 1 ▁ ) ▁ ) ▁ ; ▁ @ ▁ ( ▁* num 2 ▁ ) ▁= ▁ f a b s ▁ ( ▁ ( ▁* num 2 ▁ ) ▁ ) ▁ ; ▁ @ ▁int ▁max ▁= ▁ ( ▁* num 1 ▁ ) ▁ > ▁ ( ▁* num 2 ▁ ) ▁ ? ▁ ( ▁* num 1 ▁ ) ▁ : ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁int ▁min ▁= ▁ ( ▁* num 1 ▁ ) ▁< ▁ ( ▁* num 2 ▁ ) ▁ ? ▁ ( ▁* num 1 ▁ ) ▁ : ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁int ▁pro duc t ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁10 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁10 ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁pro duc t ▁* = ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁counter ▁= ▁0 ▁ ; ▁ @ ▁int ▁nth E ven ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁counter ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁nth E ven ▁+ = ▁ 2 ▁ ; ▁ @ ▁counter ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁nth E ven ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* r an ge ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁int ▁ multipl ic ation ▁= ▁ ( ▁* num ▁ ) ▁* ▁i ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ multipl ic ation ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* r an ge ▁ ) ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a m ount ▁ ) ▁ , ▁float ▁ ( ▁* rate ▁ ) ▁ , ▁float ▁ ( ▁* time ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ s i ▁ ; ▁ @ ▁ ; ▁ @ ▁ s i ▁= ▁ ( ▁ ( ▁* a m ount ▁ ) ▁* ▁ ( ▁* rate ▁ ) ▁* ▁ ( ▁* time ▁ ) ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ s i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ m o d u l u s ▁ ; ▁ @ ▁int ▁ divi s io n ▁ ; ▁ @ ▁int ▁ multipl ic ation ▁ ; ▁ @ ▁int ▁ s u b t r a c tion ▁ ; ▁ @ ▁int ▁add i tion ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁add i tion ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ s u b t r a c tion ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ multipl ic ation ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ divi s io n ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ m o d u l u s ▁= ▁ ( ▁* a ▁ ) ▁ % ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁add i tion ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ s u b t r a c tion ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ multipl ic ation ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ divi s io n ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ m o d u l u s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁str 2 ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁char ▁str 1 ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁ index ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁str 1 ▁ [ ▁ index ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁str 2 ▁ [ ▁ index ▁ ] ▁= ▁str 1 ▁ [ ▁ index ▁ ] ▁ ; ▁ @ ▁ index ++ ▁ ; ▁ @ ▁ } ▁ @ ▁str 2 ▁ [ ▁ index ▁ ] ▁= ▁'\ 0 ' ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁str 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁str 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁add T wo Number s ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ { ▁re tur n ▁ x ▁+ ▁ y ▁ ; ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁= ▁add T wo Number s ▁ ( ▁10 ▁ , ▁20 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ , ▁j ▁= ▁ 1 ▁ ; ▁str ▁ [ ▁j ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str ▁ [ ▁j ▁ ] ▁! = ▁str ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁i ++ ▁ ; ▁ @ ▁str ▁ [ ▁i ▁ ] ▁= ▁str ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁str ▁ [ ▁i ▁+ ▁ 1 ▁ ] ▁= ▁'\ 0 ' ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* str ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* num ▁ ) ▁ / ▁10 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* basic Pa y ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁employer Fun d ▁ ; ▁ @ ▁float ▁employee Fun d ▁ ; ▁ @ ▁ ; ▁ @ ▁employee Fun d ▁= ▁ ( ▁* basic Pa y ▁ ) ▁* ▁0 . 1 2 5 ▁ ; ▁ @ ▁employer Fun d ▁= ▁ ( ▁* basic Pa y ▁ ) ▁* ▁0 . 1 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* basic Pa y ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁employee Fun d ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁employer Fun d ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* value ▁ ) ▁ , ▁float ▁ ( ▁* m e an ▁ ) ▁ , ▁float ▁ ( ▁* stdDev i ation ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁float ▁ z S c or e ▁= ▁ ( ▁ ( ▁* value ▁ ) ▁ - ▁ ( ▁* m e an ▁ ) ▁ ) ▁ / ▁ ( ▁* stdDev i ation ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ z S c or e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁char ▁ ch ▁ [ ▁50 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ch ▁ [ ▁count ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ch ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁sum _ of _ e lement s ▁ ( ▁int ▁* arr ▁ , ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ , ▁sum ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ n ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁= ▁sum ▁+ ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁sum ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁total ▁= ▁0 ▁ ; ▁ @ ▁int ▁array ▁ [ ▁10 ▁ ] ▁= ▁ { ▁ 1 ▁ , ▁ 2 ▁ , ▁ 3 ▁ , ▁ 4 ▁ , ▁ 5 ▁ , ▁ 6 ▁ , ▁ 7 ▁ , ▁ 8 ▁ , ▁ 9 ▁ } ▁ ; ▁ @ ▁total ▁= ▁sum _ of _ e lement s ▁ ( ▁array ▁ , ▁ 9 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁total ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁float ▁ slantHeight W ▁ ; ▁ @ ▁float ▁ slantHeight L ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ slantHeight L ▁= ▁ @ ▁sqrt ▁ ( ▁ ( ▁ ( ▁* length ▁ ) ▁ / ▁ 2 ▁ ) ▁* ▁ ( ▁ ( ▁* length ▁ ) ▁ / ▁ 2 ▁ ) ▁+ ▁ ( ▁* height ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ) ▁ ; ▁ @ ▁ slantHeight W ▁= ▁sqrt ▁ ( ▁ ( ▁ ( ▁* w id th ▁ ) ▁ / ▁ 2 ▁ ) ▁* ▁ ( ▁ ( ▁* w id th ▁ ) ▁ / ▁ 2 ▁ ) ▁+ ▁ ( ▁* height ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ) ▁ ; ▁ @ ▁ surface A rea ▁= ▁ @ ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* w id th ▁ ) ▁+ ▁ ( ▁* length ▁ ) ▁* ▁ slantHeight L ▁+ ▁ ( ▁* w id th ▁ ) ▁* ▁ slantHeight W ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* string ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ o th e r s ▁ ; ▁ @ ▁int ▁ digit s ▁ ; ▁ @ ▁int ▁ al p h a b e t s ▁ ; ▁ @ ▁ al p h a b e t s ▁= ▁ digit s ▁= ▁ o th e r s ▁= ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ string ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁ string ▁ [ ▁i ▁ ] ▁ > = ▁ ' a ' ▁& & ▁ string ▁ [ ▁i ▁ ] ▁< = ▁ ' z ' ▁ ) ▁ | | ▁ @ ▁ ( ▁ string ▁ [ ▁i ▁ ] ▁ > = ▁ ' A ' ▁& & ▁ string ▁ [ ▁i ▁ ] ▁< = ▁ ' Z ' ▁ ) ▁ ) ▁ { ▁ @ ▁ al p h a b e t s ++ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ string ▁ [ ▁i ▁ ] ▁ > = ▁ ' 0 ' ▁& & ▁ string ▁ [ ▁i ▁ ] ▁< = ▁ ' 9 ' ▁ ) ▁ { ▁ @ ▁ digit s ++ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ o th e r s ++ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ al p h a b e t s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ digit s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ o th e r s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁nth O dd ▁ ; ▁ @ ▁ ; ▁ @ ▁nth O dd ▁= ▁ 1 ▁+ ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ) ▁* ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth O dd ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ length ▁= ▁5.0 ▁ ; ▁ @ ▁float ▁w id th ▁= ▁3.0 ▁ ; ▁ @ ▁float ▁ height ▁= ▁2.0 ▁ ; ▁ @ ▁float ▁total E d ge L ength ▁ ; ▁ @ ▁total E d ge L ength ▁= ▁ 4 ▁* ▁ ( ▁ length ▁+ ▁w id th ▁+ ▁ height ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁total E d ge L ength ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* start ▁ ) ▁ , ▁int ▁ ( ▁* end ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* start ▁ ) ▁< = ▁ ( ▁* end ▁ ) ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁i ▁< = ▁ ( ▁* end ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁int ▁result ▁= ▁ ( ▁* num ▁ ) ▁* ▁i ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁i ▁ > = ▁ ( ▁* end ▁ ) ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁int ▁result ▁= ▁ ( ▁* num ▁ ) ▁* ▁i ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ - ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ > ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁int ▁temp ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁* ▁i ▁* ▁i ▁< = ▁ ( ▁* limit ▁ ) ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* pas cal s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ at m ▁ ; ▁ @ ▁ ; ▁ @ ▁ at m ▁= ▁ ( ▁* pas cal s ▁ ) ▁ / ▁10 1 3 2 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ at m ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* grad ian s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁ radi an s ▁= ▁ ( ▁* grad ian s ▁ ) ▁* ▁ ( ▁3.14159 ▁ / ▁ 2 00 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* grad ian s ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* grade ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁totalCount ▁= ▁0 ▁ ; ▁ @ ▁int ▁passCount ▁= ▁0 ▁ ; ▁ @ ▁float ▁ pas s Per c entag e ▁ ; ▁ @ ▁w h ile ▁ ( ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* grade ▁ ) ▁= = ▁ - 1 ▁ ) ▁ brea k ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* grade ▁ ) ▁ > = ▁ 7 0 ▁& & ▁ ( ▁* grade ▁ ) ▁< = ▁100 ▁ ) ▁passCount ++ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* grade ▁ ) ▁ > = ▁0 ▁& & ▁ ( ▁* grade ▁ ) ▁< = ▁100 ▁ ) ▁totalCount ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁totalCount ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ pas s Per c entag e ▁= ▁ ( ▁float ▁ ) ▁passCount ▁ / ▁totalCount ▁* ▁100 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ pas s Per c entag e ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ pas s Per c entag e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁ | ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ b in ▁ [ ▁32 ▁ ] ▁= ▁ { ▁0 ▁ } ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁32 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ b in ▁ [ ▁i ▁ ] ▁= ▁ ( ▁ ( ▁* number ▁ ) ▁ > > ▁i ▁ ) ▁& ▁ 1 ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁int ▁ start Print in g ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 3 1 ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ b in ▁ [ ▁i ▁ ] ▁= = ▁ 1 ▁ ) ▁ start Print in g ▁= ▁ 1 ▁ ; ▁ @ ▁ if ▁ ( ▁ start Print in g ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ b in ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁i ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* upper ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁fact ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁j ▁= ▁ 2 ▁ ; ▁ @ ▁w h ile ▁ ( ▁j ▁< = ▁i ▁ ) ▁ { ▁ @ ▁fact ▁* = ▁j ▁ ; ▁ @ ▁ if ▁ ( ▁fact ▁< ▁0 ▁ ) ▁ { ▁ @ ▁fact ▁= ▁ - 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁j ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fact ▁ > ▁0 ▁& & ▁fact ▁< = ▁ ( ▁* upper ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁fact ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* w eight ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ b mi ▁ ; ▁ @ ▁float ▁ square Meter Height ▁ ; ▁ @ ▁float ▁ m eter Height ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ m eter Height ▁= ▁ ( ▁* height ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ square Meter Height ▁= ▁ m eter Height ▁* ▁ m eter Height ▁ ; ▁ @ ▁ b mi ▁= ▁ ( ▁* w eight ▁ ) ▁ / ▁ square Meter Height ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ b mi ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁dig ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁ rev Number ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* n ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁dig ▁= ▁ ( ▁* n ▁ ) ▁ % ▁10 ▁ ; ▁ @ ▁ rev Number ▁* = ▁10 ▁ ; ▁ @ ▁ rev Number ▁+ = ▁dig ▁ ; ▁ @ ▁ ( ▁* n ▁ ) ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ rev Number ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ ge t B in a ry V 1 ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁ b it ▁ ; ▁ @ ▁fo r ▁ ( ▁int ▁i ▁= ▁ 1 5 ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁ - - i ▁ ) ▁ { ▁ @ ▁ b it ▁= ▁ ( ▁ n ▁ > > ▁i ▁ ) ▁& ▁ 1 ▁ ; ▁ @ ▁ if ▁ ( ▁ b it ▁= = ▁ 1 ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ge t B in a ry V 1 ▁ ( ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number 1 ▁ ) ▁ , ▁int ▁ ( ▁* number 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁int ▁temp 2 ▁ ; ▁ @ ▁int ▁temp 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ( ▁* num 1 ▁ ) ▁= ▁ f a b s ▁ ( ▁ ( ▁* num 1 ▁ ) ▁ ) ▁ ; ▁ @ ▁ ( ▁* num 2 ▁ ) ▁= ▁ f a b s ▁ ( ▁ ( ▁* num 2 ▁ ) ▁ ) ▁ ; ▁ @ ▁temp 1 ▁= ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁temp 2 ▁= ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁temp 2 ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁re ma inde r ▁= ▁temp 1 ▁ % ▁temp 2 ▁ ; ▁ @ ▁temp 1 ▁= ▁temp 2 ▁ ; ▁ @ ▁temp 2 ▁= ▁re ma inde r ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁temp 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* de ci mal ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ octa l ▁= ▁0 ▁ ; ▁ @ ▁int ▁ place Value ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁int ▁last Digit ▁= ▁ ( ▁* de ci mal ▁ ) ▁ % ▁ 8 ▁ ; ▁ @ ▁ octa l ▁+ = ▁last Digit ▁* ▁ place Value ▁ ; ▁ @ ▁ place Value ▁* = ▁10 ▁ ; ▁ @ ▁ ( ▁* de ci mal ▁ ) ▁ / = ▁ 8 ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁ ( ▁* de ci mal ▁ ) ▁ > ▁0 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ octa l ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁float ▁ stdDev i ation ▁ ; ▁ @ ▁float ▁variance ▁= ▁0 ▁ ; ▁ @ ▁float ▁ m e an ▁ ; ▁ @ ▁float ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ m e an ▁= ▁sum ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁variance ▁+ = ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ ) ▁* ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁variance ▁ / = ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ stdDev i ation ▁= ▁sqrt f ▁ ( ▁variance ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ m e an ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁variance ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ stdDev i ation ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁float ▁pi ▁= ▁ 3 .141592653589793 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁ ) ▁ / ▁ ( ▁ 4 ▁* ▁tan ▁ ( ▁pi ▁ / ▁ ( ▁* n ▁ ) ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* grad ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁rad ▁ ; ▁ @ ▁ ; ▁ @ ▁rad ▁= ▁ ( ▁* grad ▁ ) ▁* ▁ ( ▁3.14 ▁ / ▁ 2 00.0 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁rad ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ num ▁ ; ▁ @ ▁float ▁ n ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ num ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ num ▁< = ▁ ( ▁* upper ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* upper ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁do ▁ { ▁ @ ▁ n ▁= ▁ ( ▁ - 1 ▁+ ▁sqrt f ▁ ( ▁ 1 ▁+ ▁ 8 ▁* ▁ num ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ if ▁ ( ▁floor f ▁ ( ▁ n ▁ ) ▁= = ▁ n ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ num ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁ num ▁< = ▁ ( ▁* upper ▁ ) ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* prin ci p al ▁ ) ▁ , ▁float ▁ ( ▁* rate ▁ ) ▁ , ▁float ▁ ( ▁* y ear ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ ci ▁ ; ▁ @ ▁float ▁ a m ount ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ a m ount ▁= ▁ ( ▁* prin ci p al ▁ ) ▁* ▁pow ▁ ( ▁ ( ▁ 1 ▁+ ▁ ( ▁* rate ▁ ) ▁ / ▁100 ▁ ) ▁ , ▁ ( ▁* y ear ▁ ) ▁ ) ▁ ; ▁ @ ▁ ci ▁= ▁ a m ount ▁ - ▁ ( ▁* prin ci p al ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ci ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁float ▁av era ge ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁sum ▁+ = ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁sum ▁+ = ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁av era ge ▁= ▁sum ▁ / ▁2.0 f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁av era ge ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁cnt ▁ ; ▁ @ ▁int ▁ tNum ▁ ; ▁ @ ▁ ; ▁ @ ▁cnt ▁= ▁0 ▁ ; ▁ @ ▁ tNum ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁ tNum ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁cnt ++ ▁ ; ▁ @ ▁ tNum ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁cnt ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁ n ▁= ▁ 3 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁circum fer e nce ▁= ▁ 6 . 2 8 3 1 8 ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁ ; ▁ @ ▁float ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ c onversion Factor ▁= ▁ 3 . 2 8 0 8 4 f ▁ ; ▁ @ ▁ feet ▁= ▁ ( ▁* meters ▁ ) ▁* ▁ c onversion Factor ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* meters ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* r ▁ ) ▁ , ▁float ▁ ( ▁* h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁float ▁ v ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁3.14159 ▁* ▁ ( ▁* r ▁ ) ▁* ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ v ▁= ▁area ▁* ▁ ( ▁* h ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ v ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* y ear ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 00 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁100 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁ 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁arr ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁root 2 ▁ ; ▁ @ ▁float ▁root 1 ▁ ; ▁ @ ▁float ▁disc rim in ant ▁ ; ▁ @ ▁ ; ▁ @ ▁disc rim in ant ▁= ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ - ▁ 4 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁disc rim in ant ▁ > = ▁0 ▁ ) ▁ { ▁ @ ▁root 1 ▁= ▁ ( ▁ - ▁ ( ▁* b ▁ ) ▁+ ▁sqrt ▁ ( ▁disc rim in ant ▁ ) ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁root 2 ▁= ▁ ( ▁ - ▁ ( ▁* b ▁ ) ▁ - ▁sqrt ▁ ( ▁disc rim in ant ▁ ) ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁disc rim in ant ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁root 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁root 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁root 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁vo id ▁check ▁ ( ▁char ▁ [ ▁ ] ▁ , ▁int ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* wo rd ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁check ▁ ( ▁ ( ▁* wo rd ▁ ) ▁ , ▁0 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁check ▁ ( ▁char ▁ wo rd ▁ [ ▁ ] ▁ , ▁int ▁ index ▁ ) ▁ { ▁ @ ▁int ▁ le n ▁= ▁str le n ▁ ( ▁ wo rd ▁ ) ▁ - ▁ ( ▁ index ▁+ ▁ 1 ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ wo rd ▁ [ ▁ index ▁ ] ▁= = ▁ wo rd ▁ [ ▁ le n ▁ ] ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ index ▁+ ▁ 1 ▁= = ▁ le n ▁ | | ▁ index ▁= = ▁ le n ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ ; ▁ @ ▁ } ▁ @ ▁check ▁ ( ▁ wo rd ▁ , ▁ index ▁+ ▁ 1 ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁original Array ▁ [ ▁10 ▁ ] ▁= ▁ { ▁ 1 ▁ , ▁ 2 ▁ , ▁ 3 ▁ , ▁ 4 ▁ , ▁ 5 ▁ , ▁ 6 ▁ , ▁ 7 ▁ , ▁ 8 ▁ , ▁ 9 ▁ , ▁10 ▁ } ▁ ; ▁ @ ▁int ▁ copy Array ▁ [ ▁10 ▁ ] ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ copy Array ▁ [ ▁i ▁ ] ▁= ▁original Array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁original Array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ copy Array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁gre atest ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁gre atest ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁ > ▁gre atest ▁ ) ▁ { ▁ @ ▁gre atest ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁ > ▁gre atest ▁ ) ▁ { ▁ @ ▁gre atest ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁gre atest ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std bool . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ limit ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ num ▁ ; ▁ @ ▁ bool ▁is Prime ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* upper ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ num ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ num ▁< = ▁ ( ▁* upper ▁ ) ▁ ; ▁ num ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁< = ▁ 1 ▁ ) ▁ cont in ue ▁ ; ▁ @ ▁is Prime ▁= ▁ t r ue ▁ ; ▁ @ ▁ limit ▁= ▁ num ▁ / ▁ 2 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< = ▁ limit ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁ f al se ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Prime ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ n ▁ ; ▁ @ ▁int ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* upper ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ num ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ num ▁< = ▁ ( ▁* upper ▁ ) ▁ ; ▁ num ++ ▁ ) ▁ { ▁ @ ▁ n ▁= ▁ ( ▁ - 1 ▁+ ▁sqrt ▁ ( ▁ 1 ▁+ ▁ 8 ▁* ▁ num ▁ ) ▁ / ▁ 2 ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ n ▁= = ▁ n ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁mul ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁mul ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* b ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁mul ▁+ = ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁mul ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁3.14 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁ u nsi gn ed ▁ long ▁factor i al ▁ ( ▁int ▁ num ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ u nsi gn ed ▁ long ▁fact ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ num ▁ ; ▁i ▁ > = ▁ 1 ▁ ; ▁i - - ▁ ) ▁fact ▁= ▁fact ▁* ▁i ▁ ; ▁ @ ▁re tur n ▁fact ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁float ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁ 0.0 f ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁sum ▁= ▁sum ▁+ ▁ ( ▁ ( ▁float ▁ ) ▁ ( ▁i ▁ ) ▁ / ▁ ( ▁float ▁ ) ▁ ( ▁factor i al ▁ ( ▁i ▁ ) ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* second s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁int ▁ minute s ▁ ; ▁ @ ▁int ▁ h o u r s ▁ ; ▁ @ ▁ ; ▁ @ ▁ h o u r s ▁= ▁ ( ▁* second s ▁ ) ▁ / ▁ 3 6 00 ▁ ; ▁ @ ▁re ma inde r ▁= ▁ ( ▁* second s ▁ ) ▁ % ▁ 3 6 00 ▁ ; ▁ @ ▁ minute s ▁= ▁re ma inde r ▁ / ▁ 6 0 ▁ ; ▁ @ ▁ ( ▁* second s ▁ ) ▁= ▁re ma inde r ▁ % ▁ 6 0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ h o u r s ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ minute s ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* second s ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mm ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ inches ▁= ▁ ( ▁* mm ▁ ) ▁ ; ▁ @ ▁ inches ▁ / = ▁25 . 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* mm ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁= ▁sum ▁+ ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* t ar ge t ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ prime Fl ag ▁ ; ▁ @ ▁int ▁ divisor ▁ ; ▁ @ ▁int ▁ l atest Prime ▁= ▁ 2 ▁ ; ▁ @ ▁int ▁current Number ▁= ▁ 2 ▁ ; ▁ @ ▁int ▁ prime Count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ prime Count ▁< ▁ ( ▁* t ar ge t ▁ ) ▁ ) ▁ { ▁ @ ▁ prime Fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁ divisor ▁= ▁ 2 ▁ ; ▁ divisor ▁< = ▁current Number ▁ / ▁ 2 ▁ ; ▁ divisor ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁current Number ▁ % ▁ divisor ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ prime Fl ag ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ prime Fl ag ▁ ) ▁ { ▁ @ ▁ l atest Prime ▁= ▁current Number ▁ ; ▁ @ ▁ prime Count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁current Number ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* t ar ge t ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ l atest Prime ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ prime ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ limit ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< = ▁ 1 ▁ ) ▁ prime ▁= ▁0 ▁ ; ▁ @ ▁ limit ▁= ▁ ( ▁* n ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< = ▁ limit ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ prime ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ prime ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mil li meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ centimeter s ▁ ; ▁ @ ▁ ; ▁ @ ▁ centimeter s ▁= ▁ ( ▁* mil li meters ▁ ) ▁ / ▁ 1 0.0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ centimeter s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁ b ▁= ▁20 ▁ ; ▁ @ ▁int ▁ a ▁= ▁10 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁temp ▁= ▁ a ▁ ; ▁ @ ▁ a ▁= ▁ b ▁ ; ▁ @ ▁ b ▁= ▁temp ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁float ▁sqrt 3 O ve r 4 ▁= ▁sqrt ▁ ( ▁ 3 ▁ ) ▁ / ▁4.0 f ▁ ; ▁ @ ▁float ▁ o n e T h i rd ▁= ▁1.0 f ▁ / ▁3.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁sqrt 3 O ve r 4 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* h ▁ ) ▁* ▁ o n e T h i rd ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mm ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ inches ▁ ; ▁ @ ▁float ▁ t o I n ch e s ▁= ▁25 . 4 ▁ ; ▁ @ ▁ ; ▁ @ ▁ inches ▁= ▁ ( ▁* mm ▁ ) ▁ / ▁ t o I n ch e s ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁temp ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ value ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ b ▁= ▁ 8 ▁ ; ▁ @ ▁int ▁ a ▁= ▁ 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ value ▁ ( ▁ a ▁ , ▁ b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ value ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ { ▁ @ ▁ x ++ ▁ ; ▁ @ ▁ y ++ ▁ ; ▁ @ ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* user n ame ▁ ) ▁ , ▁char ▁ ( ▁* pas s wo rd ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁str c mp ▁ ( ▁ ( ▁* user n ame ▁ ) ▁ , ▁ " a d m in " ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str c mp ▁ ( ▁ ( ▁* pas s wo rd ▁ ) ▁ , ▁ " k ar u n y a " ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* brea d th ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* brea d th ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ read Array ▁ ( ▁int ▁ a ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁printArray ▁ ( ▁int ▁ a ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁add Array ▁ ( ▁int ▁ a ▁ [ ▁ ] ▁ , ▁int ▁ b ▁ [ ▁ ] ▁ , ▁int ▁ c ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ c ▁ [ ▁i ▁ ] ▁= ▁ a ▁ [ ▁i ▁ ] ▁+ ▁ b ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ s u b Array ▁ ( ▁int ▁ a ▁ [ ▁ ] ▁ , ▁int ▁ b ▁ [ ▁ ] ▁ , ▁int ▁ c ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ c ▁ [ ▁i ▁ ] ▁= ▁ a ▁ [ ▁i ▁ ] ▁ - ▁ b ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ A ▁ [ ▁20 ▁ ] ▁ , ▁ B ▁ [ ▁20 ▁ ] ▁ , ▁ A D D ▁ [ ▁20 ▁ ] ▁ , ▁ S U B ▁ [ ▁20 ▁ ] ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ read Array ▁ ( ▁ A ▁ , ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ read Array ▁ ( ▁ B ▁ , ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁add Array ▁ ( ▁ A ▁ , ▁ B ▁ , ▁ A D D ▁ , ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ s u b Array ▁ ( ▁ A ▁ , ▁ B ▁ , ▁ S U B ▁ , ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁printArray ▁ ( ▁ A D D ▁ , ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁printArray ▁ ( ▁ S U B ▁ , ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* y ear ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁ con d i tion ▁= ▁! ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 ▁ ) ▁& & ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁100 ▁ | | ▁! ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 00 ▁ ) ▁ ) ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ con d i tion ▁ ) ▁ { ▁ @ ▁ case ▁0 : ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁default : ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁float ▁ base A rea ▁ ; ▁ @ ▁float ▁pi ▁= ▁3.14159 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ base A rea ▁= ▁ ( ▁ 5 ▁* ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁ ) ▁ / ▁ ( ▁ 4 ▁* ▁tan ▁ ( ▁pi ▁ / ▁ 5 ▁ ) ▁ ) ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁ base A rea ▁* ▁ ( ▁* height ▁ ) ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁result ▁= ▁ - 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁0 ▁ ; ▁ @ ▁ { ▁ ; ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ ( ▁* side ▁ ) ▁+ ▁ ( ▁* side ▁ ) ▁+ ▁ ( ▁* side ▁ ) ▁+ ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ multipl e ▁ [ ▁ ] ▁= ▁ " C o de z C l u b " ▁ ; ▁ @ ▁char ▁* p ▁= ▁& multipl e ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ p ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ p ▁= ▁ multipl e ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ p ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ - 1 ▁ ; ▁ @ ▁ } ▁ @ ▁result ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ) ▁ / ▁ ( ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* line s ▁ ) ▁ , ▁ long ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* line s ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ long ▁ value ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ value ▁= ▁ value ▁* ▁ ( ▁i ▁ - ▁j ▁ ) ▁ / ▁ ( ▁j ▁+ ▁ 1 ▁ ) ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* e ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁av era ge ▁ ; ▁ @ ▁ ; ▁ @ ▁av era ge ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁+ ▁ ( ▁* e ▁ ) ▁ ) ▁ / ▁ 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁av era ge ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ value s ▁ [ ▁10 ▁ ] ▁ ; ▁ @ ▁int ▁max ▁= ▁0 ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁count ▁= = ▁0 ▁ | | ▁ ( ▁* number ▁ ) ▁ > ▁max ▁ ) ▁ { ▁ @ ▁max ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁count ▁< ▁10 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁max ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* search ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* search ▁ ) ▁= = ▁array ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁print P attern ▁ ( ▁int ▁ n ▁ , ▁int ▁ p attern T y p e ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ row ▁< = ▁ n ▁ ; ▁ row ++ ▁ ) ▁ { ▁ @ ▁int ▁ start ▁= ▁ ( ▁ p attern T y p e ▁= = ▁ 1 ▁ | | ▁ p attern T y p e ▁= = ▁ 2 ▁ ) ▁ ? ▁ 1 ▁ : ▁ row ▁ ; ▁ @ ▁int ▁ end ▁= ▁ ( ▁ p attern T y p e ▁= = ▁ 1 ▁ ) ▁ ? ▁ row ▁ : ▁ ( ▁ p attern T y p e ▁= = ▁ 2 ▁ ) ▁ ? ▁ n ▁ - ▁ row ▁+ ▁ 1 ▁ : ▁ 1 ▁ ; ▁ @ ▁int ▁ in crement ▁= ▁ ( ▁ p attern T y p e ▁= = ▁ 3 ▁ ) ▁ ? ▁ - 1 ▁ : ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁int ▁ num ▁= ▁ start ▁ ; ▁ p attern T y p e ▁! = ▁ 3 ▁ ? ▁ num ▁< = ▁ end ▁ : ▁ num ▁ > = ▁ end ▁ ; ▁ @ ▁ num ▁+ = ▁ in crement ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ if ▁ ( ▁ p attern T y p e ▁= = ▁ 2 ▁ | | ▁ p attern T y p e ▁= = ▁ 3 ▁ ) ▁ n - - ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁print P attern ▁ ( ▁ ( ▁* n ▁ ) ▁ , ▁ 1 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁print P attern ▁ ( ▁ ( ▁* n ▁ ) ▁ , ▁ 2 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁print P attern ▁ ( ▁ ( ▁* n ▁ ) ▁ , ▁ 3 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁ % ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* li m _ u p ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁int ▁ C ▁ ; ▁ @ ▁int ▁ B ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ A ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ B ▁< = ▁ ( ▁* li m _ u p ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁< = ▁ 1 ▁ ) ▁ { ▁ @ ▁ C ▁= ▁i ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ C ▁= ▁ A ▁+ ▁ B ▁ ; ▁ @ ▁ A ▁= ▁ B ▁ ; ▁ @ ▁ B ▁= ▁ C ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ A ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁cnt ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ ; ▁ ( ▁* num ▁ ) ▁ > ▁0 ▁ ; ▁ ( ▁* num ▁ ) ▁ / = ▁10 ▁ ) ▁ { ▁ @ ▁cnt ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁cnt ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ n ▁ ; ▁ @ ▁int ▁temp Number ▁ ; ▁ @ ▁int ▁rem ▁= ▁0 ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁temp Number ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁temp Number ▁! = ▁0 ▁ ; ▁temp Number ▁ / = ▁10 ▁ ) ▁ { ▁ @ ▁rem ▁= ▁temp Number ▁ % ▁10 ▁ ; ▁ @ ▁sum ▁+ = ▁rem ▁* ▁rem ▁* ▁rem ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁ ( ▁* number ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ 2 ▁* ▁ ( ▁ 1 ▁+ ▁sqrt ▁ ( ▁ 2 ▁ ) ▁ ) ▁* ▁ ( ▁* side ▁ ) ▁* ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁< < ▁ 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is Divi s ible ▁ ; ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁is Divi s ible ▁= ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 3 ▁= = ▁0 ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁is Divi s ible ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Divi s ible ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* speed _ k mph ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ speed _ mph ▁ ; ▁ @ ▁ ; ▁ @ ▁ speed _ mph ▁= ▁ ( ▁* speed _ k mph ▁ ) ▁* ▁0 . 6 2 1 3 7 1 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ speed _ mph ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* first ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ second ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ second ▁ [ ▁i ▁ ] ▁= ▁ first ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ first ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ second ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ k ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁str ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str ▁ [ ▁ k ▁ ] ▁! = ▁str ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁ k ++ ▁ ; ▁ @ ▁str ▁ [ ▁ k ▁ ] ▁= ▁str ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁str ▁ [ ▁ k ▁+ ▁ 1 ▁ ] ▁= ▁'\ 0 ' ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* str ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* d ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ or R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ or R esult ▁= ▁ ( ▁* d ▁ ) ▁ | ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ or R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* y ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ d if fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ d if fer e nce ▁= ▁ ( ▁* y ▁ ) ▁ - ▁ 3 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ d if fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* inches ▁ ) ▁ , ▁char ▁ ( ▁* ch oi ce ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ feet ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁ ; ▁ @ ▁ feet ▁= ▁ ( ▁* inches ▁ ) ▁ / ▁12.0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁ ( ▁* ch oi ce ▁ ) ▁= = ▁ ' y ' ▁ | | ▁ ( ▁* ch oi ce ▁ ) ▁= = ▁ ' Y ' ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* pas cal s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁ ; ▁ @ ▁float ▁ at m ▁ ; ▁ @ ▁ c onversion Factor ▁= ▁10 1 3 2 5 ▁ ; ▁ @ ▁ ; ▁ @ ▁ at m ▁= ▁ ( ▁* pas cal s ▁ ) ▁ / ▁ c onversion Factor ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ at m ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁counter ▁= ▁ 5 ▁ ; ▁ @ ▁vo id ▁ in crement Count e r ▁ ( ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ lo cal Count e r ▁= ▁10 ▁ ; ▁ @ ▁int ▁ an o th e r Count e r ▁= ▁ 1 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ lo cal Count e r ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ an o th e r Count e r ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ in crement Count e r ▁ ( ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁counter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ an o th e r Count e r ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ in crement Count e r ▁ ( ▁ ) ▁ { ▁ @ ▁counter ▁+ = ▁ 5 ▁ ; ▁ @ ▁int ▁temp Count e r ▁= ▁20 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁nth T riangular ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁nth T riangular ▁= ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁ ( ▁* n ▁ ) ▁+ ▁ 1 ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth T riangular ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* row s ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* row s ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁char ▁ line ▁ [ ▁ 2 00 ▁ ] ▁= ▁ { ▁0 ▁ } ▁ ; ▁ @ ▁ k ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁ ( ▁* row s ▁ ) ▁ - ▁i ▁ ; ▁j ++ ▁ , ▁ k ++ ▁ ) ▁ { ▁ @ ▁ line ▁ [ ▁ k ▁ ] ▁= ▁ ' ▁ ' ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ , ▁ k ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁ line ▁ [ ▁ k ▁ ] ▁= ▁'*' ▁ ; ▁ @ ▁ if ▁ ( ▁j ▁< ▁i ▁ ) ▁ { ▁ @ ▁ line ▁ [ ▁ k ▁+ ▁ 1 ▁ ] ▁= ▁ ' ▁ ' ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ line ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁array ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁swap ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ - ▁i ▁ - ▁ 1 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ > ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁swap ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁swap ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁0 ▁ ; ▁ k ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁ k ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array ▁ [ ▁ k ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁count B it ▁ ( ▁int ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count B it ▁ ( ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁count B it ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ , ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁ n ▁= = ▁0 ▁ ) ▁re tur n ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁32 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁ 1 ▁< < ▁i ▁ ) ▁& ▁ n ▁ ) ▁count ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ ++ count ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁int ▁ lo w ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ , ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁j ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ lo w ▁= ▁ num ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁i ▁= ▁0 ▁ , ▁j ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁ ; ▁i ▁< ▁ 9 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ lo w ▁ > ▁ num ▁ [ ▁i ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁ lo w ▁= ▁ num ▁ [ ▁i ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ lo w ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* y ear ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁ le a p ▁= ▁ @ ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 ▁= = ▁0 ▁ ) ▁& & ▁ ( ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁100 ▁! = ▁0 ▁ ) ▁ | | ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 00 ▁= = ▁0 ▁ ) ▁ ) ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ le a p ▁ ) ▁ { ▁ @ ▁ case ▁0 : ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ case ▁ 1 : ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* k mph ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ mph ▁ ; ▁ @ ▁ ; ▁ @ ▁ mph ▁= ▁ ( ▁* k mph ▁ ) ▁ / ▁1.6 0 9 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ mph ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁pi Value ▁ ; ▁ @ ▁float ▁circum ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁pi Value ▁= ▁3.14 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁pi Value ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁circum ▁= ▁ 2 ▁* ▁pi Value ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁float ▁ f in al A rea ▁= ▁area ▁ ; ▁ @ ▁float ▁ f in al Circum ▁= ▁circum ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ f in al A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ f in al Circum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ s i mp le Fun ▁ ( ▁int ▁ r o l l n o ▁ , ▁char ▁* n ame ▁ , ▁float ▁ ma r k s ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁ R o l l ▁= ▁100 ▁ ; ▁ @ ▁float ▁ ma r k s ▁= ▁50 .5 ▁ ; ▁ @ ▁char ▁ n ame ▁ [ ▁20 ▁ ] ▁= ▁ " R a m ▁ s r i v a st a v " ▁ ; ▁ @ ▁ s i mp le Fun ▁ ( ▁ R o l l ▁ , ▁ n ame ▁ , ▁ ma r k s ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ y ard s ▁ ; ▁ @ ▁ ; ▁ @ ▁ y ard s ▁= ▁ ( ▁* meters ▁ ) ▁* ▁1.0 9 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* meters ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ y ard s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁char ▁str 2 ▁ [ ▁20 ▁ ] ▁ ; ▁ @ ▁char ▁str 1 ▁ [ ▁20 ▁ ] ▁ ; ▁ @ ▁int ▁ length 2 ▁= ▁0 ▁ ; ▁ @ ▁int ▁ length 1 ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ ) ▁ length 1 ++ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁str 2 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ ) ▁ length 2 ++ ▁ ; ▁ @ ▁ if ▁ ( ▁ length 1 ▁! = ▁ length 2 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ length 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁str 2 ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* grad ian s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁ ; ▁ @ ▁float ▁ de gree s ▁ ; ▁ @ ▁ c onversion Factor ▁= ▁180.0 ▁ / ▁ 2 00.0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ de gree s ▁= ▁ ( ▁* grad ian s ▁ ) ▁* ▁ c onversion Factor ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* distance I n K i lo meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ distance I n M ile s ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ distance I n M ile s ▁= ▁ ( ▁* distance I n K i lo meters ▁ ) ▁* ▁0 . 6 2 1 3 7 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* distance I n K i lo meters ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ distance I n M ile s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁small est ▁ ; ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁large st ▁= ▁small est ▁= ▁arr ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁large st ▁= ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ > ▁large st ▁ ) ▁ ? ▁arr ▁ [ ▁i ▁ ] ▁ : ▁large st ▁ ; ▁ @ ▁small est ▁= ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁< ▁small est ▁ ) ▁ ? ▁arr ▁ [ ▁i ▁ ] ▁ : ▁small est ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁small est ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ 2 ▁* ▁ ( ▁ ( ▁* length ▁ ) ▁+ ▁ ( ▁* w id th ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁ square ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁ square ▁< = ▁ ( ▁* limit ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ square ▁= ▁i ▁* ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁ square ▁< = ▁ ( ▁* limit ▁ ) ▁ ) ▁ { ▁ @ ▁count ▁= ▁count ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁0 .5 ▁* ▁ ( ▁* base ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* prin ci p al ▁ ) ▁ , ▁float ▁ ( ▁* rate ▁ ) ▁ , ▁float ▁ ( ▁* time ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ ci ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁ a m ount ▁= ▁ ( ▁* prin ci p al ▁ ) ▁* ▁pow ▁ ( ▁ ( ▁ 1 ▁+ ▁ ( ▁* rate ▁ ) ▁ / ▁100 ▁ ) ▁ , ▁ ( ▁* time ▁ ) ▁ ) ▁ ; ▁ @ ▁ ci ▁= ▁ a m ount ▁ - ▁ ( ▁* prin ci p al ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ci ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* upper ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁i ▁< = ▁ ( ▁* upper ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ / ▁ 2 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁i ▁& & ▁i ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ at temp t S w a p ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ b ▁= ▁ 8 ▁ ; ▁ @ ▁int ▁ a ▁= ▁ 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ at temp t S w a p ▁ ( ▁ a ▁ , ▁ b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ at temp t S w a p ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ { ▁ @ ▁int ▁temp ▁= ▁ x ▁ ; ▁ @ ▁ x ▁= ▁ y ▁ ; ▁ @ ▁ y ▁= ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ) ▁* ▁ ( ▁* h ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁result ▁= ▁ ( ▁ ( ▁* num ▁ ) ▁ ^ ▁ 1 ▁ ) ▁& ▁ 1 ▁ ; ▁ @ ▁ if ▁ ( ▁result ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* first ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ second ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ) ▁ { ▁ @ ▁ second ▁ [ ▁i ▁ ] ▁= ▁ first ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ first ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ second ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ^ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ^ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ^ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* d i ag 1 ▁ ) ▁ , ▁float ▁ ( ▁* d i ag 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁float ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁pro duc t ▁= ▁ ( ▁* d i ag 1 ▁ ) ▁* ▁ ( ▁* d i ag 2 ▁ ) ▁ ; ▁ @ ▁area ▁= ▁pro duc t ▁ / ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* c m ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ m ▁ ; ▁ @ ▁ ; ▁ @ ▁ m ▁= ▁ ( ▁* c m ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ m ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mm ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ inches ▁= ▁ ( ▁* mm ▁ ) ▁ / ▁25 . 4 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁& & ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* c ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁ > ▁ ( ▁* a ▁ ) ▁& & ▁ ( ▁* b ▁ ) ▁ > ▁ ( ▁* c ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁ > ▁ ( ▁* a ▁ ) ▁& & ▁ ( ▁* c ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* x ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ d ▁ ; ▁ @ ▁float ▁ s ▁ ; ▁ @ ▁float ▁ e _ n eg ▁ ; ▁ @ ▁float ▁ e _ pos ▁ ; ▁ @ ▁ ; ▁ @ ▁ e _ pos ▁= ▁exp f ▁ ( ▁ ( ▁* x ▁ ) ▁ ) ▁ ; ▁ @ ▁ e _ n eg ▁= ▁exp f ▁ ( ▁ - ▁ ( ▁* x ▁ ) ▁ ) ▁ ; ▁ @ ▁ s ▁= ▁ e _ pos ▁+ ▁ e _ n eg ▁ ; ▁ @ ▁ d ▁= ▁ e _ pos ▁ - ▁ e _ n eg ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ d ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁ long ▁find _ ncr ▁ ( ▁int ▁ n ▁ , ▁int ▁ r ▁ ) ▁ { ▁ @ ▁ long ▁result ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ r ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁result ▁* = ▁ n ▁ - ▁ r ▁+ ▁i ▁ ; ▁ @ ▁result ▁ / = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁result ▁ ; ▁ @ ▁ } ▁ @ ▁ long ▁find _ npr ▁ ( ▁int ▁ n ▁ , ▁int ▁ r ▁ ) ▁ { ▁ @ ▁ long ▁result ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ r ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁result ▁* = ▁ n ▁ - ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁result ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* r ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁ long ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁ @ ▁ long ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁ long ▁ ncr ▁ , ▁ npr ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ncr ▁= ▁find _ ncr ▁ ( ▁ ( ▁* n ▁ ) ▁ , ▁ ( ▁* r ▁ ) ▁ ) ▁ ; ▁ @ ▁ npr ▁= ▁find _ npr ▁ ( ▁ ( ▁* n ▁ ) ▁ , ▁ ( ▁* r ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ncr ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ npr ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁ 3 ▁* ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁* n ▁ ) ▁ - ▁ ( ▁* n ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is Divi s ible ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 7 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Divi s ible ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 3 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Divi s ible ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Divi s ible ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 3 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁put s ▁ ( ▁"\ n --------------- --------------- --------------\ n " ▁ ) ▁ ; ▁ @ ▁int ▁vary ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁int ▁col ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ if ▁ ( ▁col ▁= = ▁ 1 ▁ | | ▁col ▁= = ▁vary ▁ | | ▁col ▁= = ▁max Col s ▁+ ▁ 1 ▁ - ▁vary ▁ | | ▁ @ ▁col ▁= = ▁max Col s ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ row ▁< ▁max Col s ▁ / ▁ 2 ▁ ? ▁vary ++ ▁ : ▁vary - - ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁& & ▁ row ▁= = ▁max Col s ▁ / ▁ 2 ▁ ) ▁vary ++ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ Str fun ▁ ( ▁ ) ▁ { ▁ @ ▁char ▁ b u f f ▁ [ ▁20 ▁ ] ▁= ▁ " He l lo ▁ Fun c tion " ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ b u f f ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁ Str fun ▁ ( ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* m 1 ▁ ) ▁ , ▁float ▁ ( ▁* m 2 ▁ ) ▁ , ▁float ▁ ( ▁* m 3 ▁ ) ▁ , ▁float ▁ ( ▁* m 4 ▁ ) ▁ , ▁float ▁ ( ▁* m 5 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁is Pa s s ▁= ▁ @ ▁ ( ▁* m 1 ▁ ) ▁ > ▁32 ▁& & ▁ ( ▁* m 2 ▁ ) ▁ > ▁32 ▁& & ▁ ( ▁* m 3 ▁ ) ▁ > ▁32 ▁& & ▁ ( ▁* m 4 ▁ ) ▁ > ▁32 ▁& & ▁ ( ▁* m 5 ▁ ) ▁ > ▁32 ▁ ; ▁ @ ▁ if ▁ ( ▁is Pa s s ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁sum ▁+ = ▁i ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* arr 1 ▁ ) ▁ , ▁int ▁ ( ▁* arr 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁arr 3 ▁ [ ▁10 ▁ ] ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁arr 3 ▁ [ ▁i ▁ ] ▁= ▁arr 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁arr 3 ▁ [ ▁i ▁+ ▁ 5 ▁ ] ▁= ▁arr 2 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁arr 3 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radi an s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ de gree s ▁= ▁ ( ▁* radi an s ▁ ) ▁* ▁ ( ▁180.0 ▁ / ▁3.14 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radi an s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ de gree s ▁ ; ▁ @ ▁float ▁ P I ▁= ▁3.14 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ de gree s ▁= ▁ ( ▁* radi an s ▁ ) ▁* ▁ ( ▁180.0 f ▁ / ▁ P I ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁rem ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁rem ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁rem ▁ > = ▁ ( ▁* b ▁ ) ▁ ) ▁ { ▁ @ ▁rem ▁= ▁rem ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁rem ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁float ▁av g ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁av g ▁= ▁ ( ▁float ▁ ) ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁av g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ totalS urface A rea ▁ ; ▁ @ ▁float ▁ side A rea ▁ ; ▁ @ ▁float ▁ ci r cl e A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ci r cl e A rea ▁= ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ side A rea ▁= ▁ 2 ▁* ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ; ▁ @ ▁ totalS urface A rea ▁= ▁ 2 ▁* ▁ ci r cl e A rea ▁+ ▁ side A rea ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ totalS urface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ Print Prime Factor s ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 2 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ n ▁! = ▁ 1 ▁ ) ▁ { ▁ @ ▁w h ile ▁ ( ▁ n ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ n ▁= ▁ n ▁ / ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ Print Prime Factor s ▁ ( ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* de gree s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ grad ian s ▁ ; ▁ @ ▁ ; ▁ @ ▁ grad ian s ▁= ▁ ( ▁* de gree s ▁ ) ▁* ▁ 1 . 1 1 1 1 1 1 1 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ grad ian s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ( ▁* num 1 ▁ ) ▁= ▁ f a b s ▁ ( ▁ ( ▁* num 1 ▁ ) ▁ ) ▁ ; ▁ @ ▁ ( ▁* num 2 ▁ ) ▁= ▁ f a b s ▁ ( ▁ ( ▁* num 2 ▁ ) ▁ ) ▁ ; ▁ @ ▁int ▁max ▁= ▁ ( ▁* num 1 ▁ ) ▁ > ▁ ( ▁* num 2 ▁ ) ▁ ? ▁ ( ▁* num 1 ▁ ) ▁ : ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁int ▁min ▁= ▁ ( ▁* num 1 ▁ ) ▁< ▁ ( ▁* num 2 ▁ ) ▁ ? ▁ ( ▁* num 1 ▁ ) ▁ : ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁int ▁hcf ▁ ; ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁re ma inde r ▁= ▁ ( ▁* num 1 ▁ ) ▁ % ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ ( ▁* num 1 ▁ ) ▁= ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ ( ▁* num 2 ▁ ) ▁= ▁re ma inde r ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁re ma inde r ▁ ) ▁ ; ▁ @ ▁hcf ▁= ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁hcf ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁char ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ b u f fer ▁ [ ▁10 ▁ ] ▁= ▁ { ▁0 ▁ } ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ b u f fer ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ m e m se t ▁ ( ▁ b u f fer ▁ , ▁ ' ▁ ' ▁ , ▁ 9 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ b u f fer ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ m e m se t ▁ ( ▁ b u f fer ▁ , ▁ ' x ' ▁ , ▁ 9 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ b u f fer ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ m e m se t ▁ ( ▁ b u f fer ▁ , ▁ 1 5 ▁ , ▁ 9 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ b u f fer ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ b u f fer ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* inches ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ feet ▁= ▁ ( ▁* inches ▁ ) ▁ / ▁12.0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* w id th ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* sides ▁ ) ▁ , ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁pi O ve r N ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁pi O ve r N ▁= ▁ M _ P I ▁ / ▁ ( ▁* sides ▁ ) ▁ ; ▁ @ ▁area ▁= ▁ ( ▁ ( ▁* sides ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁ ) ▁ / ▁ ( ▁ 4 ▁* ▁tan ▁ ( ▁pi O ve r N ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁tally ▁ ; ▁ @ ▁int ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁tally ▁= ▁ 2 ▁ ; ▁tally ▁< ▁ ( ▁ ( ▁* number ▁ ) ▁ / ▁ 2 ▁ ) ▁ ; ▁tally ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁tally ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fl ag ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁is C o m posit e ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁ > ▁ 2 ▁ ) ▁count ▁= ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁ 2 ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 3 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁is C o m posit e ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 3 ▁ ; ▁j ▁* ▁j ▁< = ▁i ▁ ; ▁j ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is C o m posit e ▁= ▁ 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is C o m posit e ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁i ▁= = ▁ 2 ▁ ) ▁ { ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁count ▁+ = ▁ ( ▁ ( ▁* n ▁ ) ▁ > = ▁ 2 ▁ ) ▁ ? ▁ 1 ▁ : ▁0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁* ▁ 2 ▁ - ▁ 1 ▁ ; ▁ @ ▁put s ▁ ( ▁"\ n --------------- --------------- --------------\ n " ▁ ) ▁ ; ▁ @ ▁int ▁space sIn C urrent Row ▁ ; ▁ @ ▁int ▁col sIn C urrent Row ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁space sIn C urrent Row ▁= ▁ ( ▁ ( ▁* max Row s ▁ ) ▁ - ▁ row ▁ ) ▁* ▁ 2 ▁ ; ▁ @ ▁col sIn C urrent Row ▁= ▁max Col s ▁ - ▁space sIn C urrent Row ▁ ; ▁ @ ▁int ▁space ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁col ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁temp ▁= ▁ ( ▁ ( ▁* num ▁ ) ▁ / ▁ 2 ▁ ) ▁* ▁ 2 ▁ ; ▁ @ ▁ if ▁ ( ▁temp ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ multipl y ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ { ▁ @ ▁ x ▁* = ▁ 2 ▁ ; ▁ @ ▁ y ▁* = ▁ 3 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ b ▁= ▁ 5 ▁ ; ▁ @ ▁int ▁ a ▁= ▁ 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ multipl y ▁ ( ▁ a ▁ , ▁ b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁str ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁i ++ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* str ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* speed O f V e h ic le ▁ ) ▁ , ▁float ▁ ( ▁* time O f T r a ve l ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ distance T r a ve l le d ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ distance T r a ve l le d ▁= ▁ ( ▁* speed O f V e h ic le ▁ ) ▁* ▁ ( ▁* time O f T r a ve l ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ distance T r a ve l le d ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ value ▁= ▁25 5 ▁ ; ▁ @ ▁int ▁int Value ▁= ▁ ( ▁int ▁ ) ▁ value ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁int Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁int Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁int Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁int Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁add ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ { ▁ @ ▁ x ▁+ = ▁ 5 ▁ ; ▁ @ ▁ y ▁+ = ▁10 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ b ▁= ▁ 2 ▁ ; ▁ @ ▁int ▁ a ▁= ▁ 3 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁add ▁ ( ▁ a ▁ , ▁ b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁fl ag ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ num ▁= ▁ ( ▁* n ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ 1 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁< ▁ 2 ▁ ) ▁ { ▁ @ ▁ num ++ ▁ ; ▁ @ ▁ cont in ue ▁ ; ▁ @ ▁ } ▁ @ ▁fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< = ▁sqrt ▁ ( ▁ num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fl ag ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ num ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ d if f ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁ ) ▁ ? ▁ ( ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ) ▁ : ▁ ( ▁ ( ▁* b ▁ ) ▁ - ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* li m _ u p ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ C ▁ ; ▁ @ ▁int ▁ B ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ A ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ A ▁< ▁ ( ▁* li m _ u p ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ A ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ C ▁= ▁ A ▁+ ▁ B ▁ ; ▁ @ ▁ A ▁= ▁ B ▁ ; ▁ @ ▁ B ▁= ▁ C ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< = ▁ 8 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁arr ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* de gree s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ grad ian s ▁ ; ▁ @ ▁ ; ▁ @ ▁ grad ian s ▁= ▁ ( ▁* de gree s ▁ ) ▁* ▁ ( ▁ 2 00.0 ▁ / ▁180.0 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ grad ian s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ p ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ p ▁= ▁ 2 ▁* ▁ ( ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* s ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ p ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁factor i al ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁factor i al ▁= ▁factor i al ▁* ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁factor i al ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ k ▁ > ▁i ▁ ; ▁ k - - ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁j ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁ > = ▁ 1 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ k ▁ > ▁i ▁ ; ▁ k - - ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁j ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁ 1 ▁ ; ▁ k ▁< ▁i ▁ ; ▁ k ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁ ; ▁j ▁ > = ▁ 1 ▁ ; ▁j - - ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁j ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁put s ▁ ( ▁"\ ▁ ( ▁* n ▁ ) ▁ --------------- --------------- --------------\ ▁ ( ▁* n ▁ ) ▁ " ▁ ) ▁ ; ▁ @ ▁int ▁ row ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ row ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁space ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁space ▁< ▁ row ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁space ++ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ st ar ▁= ▁ ( ▁ 2 ▁* ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁ row ▁ ) ▁ - ▁ 1 ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁ st ar ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ st ar - - ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ row ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ a ▁= ▁5.0 ▁ ; ▁ @ ▁float ▁ b ▁= ▁ 1 0.0 ▁ ; ▁ @ ▁float ▁sum ▁= ▁ a ▁+ ▁ b ▁ ; ▁ @ ▁float ▁ d if f ▁= ▁ a ▁ - ▁ b ▁ ; ▁ @ ▁float ▁pro duc t ▁= ▁ a ▁* ▁ b ▁ ; ▁ @ ▁float ▁ q u o t i ent ▁= ▁ a ▁ / ▁ b ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ q u o t i ent ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ 4 ▁* ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ch ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁char ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* ch ▁ ) ▁ > = ▁ ' A ' ▁& & ▁ ( ▁* ch ▁ ) ▁< = ▁ ' Z ' ▁ ) ▁ | | ▁ ( ▁ ( ▁* ch ▁ ) ▁ > = ▁ ' a ' ▁& & ▁ ( ▁* ch ▁ ) ▁< = ▁ ' z ' ▁ ) ▁ ) ▁ { ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* ch ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ ' A ' : ▁ @ ▁ case ▁ ' E ' : ▁ @ ▁ case ▁ ' I ' : ▁ @ ▁ case ▁ ' O ' : ▁ @ ▁ case ▁ ' U ' : ▁ @ ▁ case ▁ ' a ' : ▁ @ ▁ case ▁ ' e ' : ▁ @ ▁ case ▁ ' i ' : ▁ @ ▁ case ▁ ' o ' : ▁ @ ▁ case ▁ ' u ' : ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ brea k ▁ ; ▁ @ ▁default ▁ : ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* total ▁ ) ▁ , ▁int ▁ ( ▁* e lement s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ex ch an ge ▁ ; ▁ @ ▁int ▁ y ▁ ; ▁ @ ▁int ▁ x ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ x ▁= ▁0 ▁ ; ▁ x ▁< ▁ ( ▁* total ▁ ) ▁ ; ▁ x ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ x ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ x ▁= ▁0 ▁ ; ▁ x ▁< ▁ ( ▁* total ▁ ) ▁ - ▁ 1 ▁ ; ▁ x ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁ y ▁= ▁0 ▁ ; ▁ y ▁< ▁ ( ▁* total ▁ ) ▁ - ▁ x ▁ - ▁ 1 ▁ ; ▁ y ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ e lement s ▁ [ ▁ y ▁ ] ▁< ▁ e lement s ▁ [ ▁ y ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁ex ch an ge ▁= ▁ e lement s ▁ [ ▁ y ▁ ] ▁ ; ▁ @ ▁ e lement s ▁ [ ▁ y ▁ ] ▁= ▁ e lement s ▁ [ ▁ y ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ e lement s ▁ [ ▁ y ▁+ ▁ 1 ▁ ] ▁= ▁ex ch an ge ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁ x ▁= ▁0 ▁ ; ▁ x ▁< ▁ ( ▁* total ▁ ) ▁ ; ▁ x ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ e lement s ▁ [ ▁ x ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁j ▁< = ▁ ( ▁* upper ▁ ) ▁& & ▁j ▁ > = ▁0 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁i ▁= ▁ 2 ▁ ; ▁ @ ▁result ▁= ▁1.0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁j ▁& & ▁result ▁< = ▁ ( ▁* upper ▁ ) ▁ ) ▁ { ▁ @ ▁result ▁* = ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁result ▁< ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ - 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁result ▁< = ▁ ( ▁* upper ▁ ) ▁& & ▁result ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁j ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a m ount ▁ ) ▁ , ▁float ▁ ( ▁* rate ▁ ) ▁ , ▁float ▁ ( ▁* time ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ( ▁* a m ount ▁ ) ▁= ▁ ( ▁ ( ▁* a m ount ▁ ) ▁* ▁ ( ▁* rate ▁ ) ▁* ▁ ( ▁* time ▁ ) ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a m ount ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* octa l ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ base ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁dec i mal ▁= ▁0 ▁ ; ▁ @ ▁int ▁reverse ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* octa l ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁reverse ▁= ▁reverse ▁* ▁10 ▁+ ▁ ( ▁ ( ▁* octa l ▁ ) ▁ % ▁10 ▁ ) ▁ ; ▁ @ ▁ ( ▁* octa l ▁ ) ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁reverse ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁dec i mal ▁+ = ▁ ( ▁reverse ▁ % ▁10 ▁ ) ▁* ▁ base ▁ ; ▁ @ ▁ base ▁* = ▁ 8 ▁ ; ▁ @ ▁reverse ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁dec i mal ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁swap ▁ ( ▁int * ▁ a ▁ , ▁int * ▁ b ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁swap ▁ ( ▁& ▁ ( ▁* a ▁ ) ▁ , ▁& ▁ ( ▁* b ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁swap ▁ ( ▁int * ▁ a ▁ , ▁int * ▁ b ▁ ) ▁ { ▁ @ ▁* a ▁= ▁* a ▁ ^ ▁* b ▁ ; ▁ @ ▁* b ▁= ▁* a ▁ ^ ▁* b ▁ ; ▁ @ ▁* a ▁= ▁* a ▁ ^ ▁* b ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ st e p ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ value ▁= ▁100 ▁ ; ▁ @ ▁ if ▁ ( ▁ st e p ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ st e p ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ st e p ▁= = ▁ 2 ▁ ) ▁ { ▁ @ ▁ value ▁= ▁ 2 00 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 6 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 7 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 8 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 9 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁i mag in a ry P art ▁ ; ▁ @ ▁float ▁ r 2 ▁ ; ▁ @ ▁float ▁ r 1 ▁ ; ▁ @ ▁float ▁disc ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁! ▁ ( ▁* a ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁disc ▁= ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ - ▁ 4 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁disc ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁sw it ch ▁ ( ▁disc ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ case ▁ 1 : ▁ ; ▁ @ ▁ r 1 ▁= ▁ ( ▁ - ▁ ( ▁* b ▁ ) ▁+ ▁sqrt ▁ ( ▁disc ▁ ) ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ r 2 ▁= ▁ ( ▁ - ▁ ( ▁* b ▁ ) ▁ - ▁sqrt ▁ ( ▁disc ▁ ) ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ r 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ r 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁0 : ▁ @ ▁sw it ch ▁ ( ▁disc ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ case ▁0 : ▁ ; ▁ @ ▁ r 1 ▁= ▁ r 2 ▁= ▁ - ▁ ( ▁* b ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ r 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ r 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 1 : ▁ ; ▁ @ ▁ r 1 ▁= ▁ - ▁ ( ▁* b ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁i mag in a ry P art ▁= ▁sqrt ▁ ( ▁ - d i s c ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ r 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 7 ▁ ) ▁= ▁i mag in a ry P art ▁ ; ▁ @ ▁ ( ▁* temptemp 8 ▁ ) ▁= ▁ r 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 9 ▁ ) ▁= ▁i mag in a ry P art ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁= ▁10 ▁ ; ▁ @ ▁char ▁ ch ▁= ▁'*' ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁ > = ▁0 ▁ ) ▁ { ▁ @ ▁j ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁j ▁< ▁i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ch ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁j ++ ▁ ; ▁ @ ▁ } ▁ @ ▁i - - ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁ > = ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i - - ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp Number ▁ ; ▁ @ ▁int ▁rem ▁= ▁0 ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁temp Number ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁rem ▁= ▁temp Number ▁ % ▁10 ▁ ; ▁ @ ▁sum ▁= ▁sum ▁+ ▁ ( ▁rem ▁* ▁rem ▁* ▁rem ▁ ) ▁ ; ▁ @ ▁temp Number ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁temp Number ▁! = ▁0 ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁ ( ▁* number ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* k mph ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁knots ▁= ▁ ( ▁* k mph ▁ ) ▁ / ▁ 1 . 8 5 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁= ▁ 4 ▁* ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁ | ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* brea d th ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁sum _ of _ sides ▁ ; ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sum _ of _ sides ▁= ▁ ( ▁* length ▁ ) ▁+ ▁ ( ▁* brea d th ▁ ) ▁ ; ▁ @ ▁area ▁= ▁sum _ of _ sides ▁* ▁ ( ▁* brea d th ▁ ) ▁ ; ▁ @ ▁perim eter ▁= ▁ 2 ▁* ▁sum _ of _ sides ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* at m ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ mm H g ▁= ▁ ( ▁* at m ▁ ) ▁* ▁ 7 6 0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁cel s i u s ▁= ▁ 3 6 . 6 f ▁ ; ▁ @ ▁float ▁ fah r e n h e it ▁ ; ▁ @ ▁ fah r e n h e it ▁= ▁ ( ▁cel s i u s ▁* ▁ 9 ▁ / ▁ 5 ▁ ) ▁+ ▁32 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁cel s i u s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ fah r e n h e it ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁ long ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ u nsi gn ed ▁ long ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁sum ▁= ▁sum ▁+ ▁ ( ▁i ▁* ▁i ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* input ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ shift R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ shift R esult ▁= ▁ ( ▁ ( ▁* input ▁ ) ▁< < ▁ 1 ▁ ) ▁+ ▁ 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ shift R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* li m _ u p ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ B ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ A ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ A ▁< = ▁ ( ▁* li m _ u p ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ A ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ B ▁= ▁ B ▁+ ▁ A ▁ ; ▁ @ ▁ A ▁= ▁ B ▁ - ▁ A ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁ radius Square d ▁= ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁float ▁ surface A rea ▁= ▁ 4 ▁* ▁ M _ P I ▁* ▁ radius Square d ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* de gree s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁= ▁ 2 00.0 ▁ / ▁180.0 ▁ ; ▁ @ ▁float ▁ grad ian s ▁ ; ▁ @ ▁ ; ▁ @ ▁ grad ian s ▁= ▁ ( ▁* de gree s ▁ ) ▁* ▁ c onversion Factor ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ grad ian s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* grad ian s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ de gree s ▁= ▁ ( ▁* grad ian s ▁ ) ▁* ▁0 . 9 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁ 1 . 7 3 2 0 5 f ▁ / ▁ 2 ▁* ▁ 3 ▁ ) ▁* ▁ ( ▁ ( ▁* side ▁ ) ▁* ▁ ( ▁* side ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ 4 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁perim eter ▁+ = ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁array ▁ [ ▁100 ▁ ] ▁ , ▁array 1 ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁vo id ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁array 1 ▁ [ ▁i ▁ ] ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁0 ▁ ; ▁ k ▁< ▁ 3 ▁ ; ▁ k ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁array ▁ [ ▁i ▁ ] ▁ % ▁10 ▁ ) ▁ > ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ % ▁10 ▁ ) ▁ ) ▁ { ▁ @ ▁temp ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁i ▁ ] ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁temp ▁= ▁array 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁array 1 ▁ [ ▁i ▁ ] ▁= ▁array 1 ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array 1 ▁ [ ▁j ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁array ▁ [ ▁i ▁ ] ▁= ▁array ▁ [ ▁i ▁ ] ▁ / ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁array 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ t ext ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁j ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁str ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁i ++ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ t ext ▁ [ ▁j ▁ ] ▁= ▁str ▁ [ ▁ - - i ▁ ] ▁ ; ▁ @ ▁ ++ j ▁ ; ▁ @ ▁ } ▁ @ ▁ t ext ▁ [ ▁j ▁ ] ▁= ▁'\ 0 ' ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁ t ext ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ t ext ▁ [ ▁i ▁+ ▁ 1 ▁ ] ▁= = ▁ ' ▁ ' ▁ | | ▁ t ext ▁ [ ▁i ▁+ ▁ 1 ▁ ] ▁= = ▁ N U L L ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁ ; ▁j ▁ > = ▁0 ▁& & ▁ t ext ▁ [ ▁j ▁ ] ▁! = ▁ ' ▁ ' ▁ ; ▁j - - ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ t ext ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* pos ▁ ) ▁ , ▁int ▁ ( ▁* val ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ ; ▁ @ ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁ > = ▁ ( ▁* pos ▁ ) ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁i ▁ - ▁ 1 ▁ ] ▁ ; ▁ @ ▁i - - ▁ ; ▁ @ ▁ } ▁ @ ▁arr ▁ [ ▁ ( ▁* pos ▁ ) ▁ - ▁ 1 ▁ ] ▁= ▁ ( ▁* val ▁ ) ▁ ; ▁ @ ▁ ( ▁* n ▁ ) ▁ ++ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁large st ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁ > ▁large st ▁ ) ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁ > ▁large st ▁ ) ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ x ▁= ▁ ' C ' ▁ ; ▁ @ ▁int ▁ y ▁= ▁ 6 7 8 ▁ ; ▁ @ ▁float ▁ z ▁= ▁ 7 8 9 . 0 1 f ▁ ; ▁ @ ▁float ▁ q ▁= ▁ 4 5 6 7 . 8 9 f ▁ ; ▁ @ ▁char ▁ gree t in g ▁ [ ▁ ] ▁= ▁ " He l lo ▁ , ▁ C ! " ▁ ; ▁ @ ▁int ▁ size _ x ▁= ▁ size of ▁ ( ▁ x ▁ ) ▁ ; ▁ @ ▁int ▁ size _ y ▁= ▁ size of ▁ ( ▁ y ▁ ) ▁ ; ▁ @ ▁int ▁ size _ z ▁= ▁ size of ▁ ( ▁ z ▁ ) ▁ ; ▁ @ ▁int ▁ size _ q ▁= ▁ size of ▁ ( ▁ q ▁ ) ▁ ; ▁ @ ▁int ▁ size _ gree t in g ▁= ▁ size of ▁ ( ▁ gree t in g ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ size _ x ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ size _ y ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ size _ z ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ size _ q ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ size _ gree t in g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁array fun ▁ ( ▁int * ▁ ptr ▁ , ▁int ▁count ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁count ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁array ▁ [ ▁10 ▁ ] ▁= ▁ { ▁ 1 ▁ , ▁ 2 ▁ , ▁ 3 ▁ , ▁ 4 ▁ , ▁ 5 ▁ , ▁ 6 ▁ , ▁ 7 ▁ , ▁ 8 ▁ , ▁ 9 ▁ } ▁ ; ▁ @ ▁array fun ▁ ( ▁array ▁ , ▁ 9 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁display S t ude n t I n f o ▁ ( ▁int ▁ r o l l n o ▁ , ▁char ▁* n ame ▁ , ▁float ▁ ma r k s ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁ r o u nde d M ar k s ▁= ▁ ( ▁int ▁ ) ▁ ( ▁ ma r k s ▁* ▁100 ▁+ ▁0 .5 ▁ ) ▁ / ▁ 1 00.0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁display S t ude n t I n f o ▁ ( ▁10 1 ▁ , ▁ " S h y a m ▁ V erm a " ▁ , ▁ 7 5 . 2 5 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mp s ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ mph ▁ ; ▁ @ ▁ ; ▁ @ ▁ mph ▁= ▁ ( ▁* mp s ▁ ) ▁* ▁ 2 . 2 3 6 ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ 8 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ , ▁count ▁= ▁! count ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁count ▁= ▁i ▁ % ▁ 2 ▁ ? ▁0 ▁ : ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁counter ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁counter ▁= ▁0 ▁ ; ▁str ▁ [ ▁counter ▁ ] ▁! = ▁ N U L L ▁ ; ▁counter ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str ▁ [ ▁counter ▁ ] ▁ > = ▁ ' A ' ▁& & ▁str ▁ [ ▁counter ▁ ] ▁< = ▁ ' Z ' ▁ ) ▁ @ ▁str ▁ [ ▁counter ▁ ] ▁= ▁str ▁ [ ▁counter ▁ ] ▁+ ▁32 ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁str ▁ [ ▁counter ▁ ] ▁ > = ▁ ' a ' ▁& & ▁str ▁ [ ▁counter ▁ ] ▁< = ▁ ' z ' ▁ ) ▁ @ ▁str ▁ [ ▁counter ▁ ] ▁= ▁str ▁ [ ▁counter ▁ ] ▁ - ▁32 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* str ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* line ▁ ) ▁ , ▁ long ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* line ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* line ▁ ) ▁ - ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ long ▁ value ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁j ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ value ▁= ▁ value ▁* ▁ ( ▁i ▁ - ▁j ▁+ ▁ 1 ▁ ) ▁ / ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radi an s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ de gree s ▁= ▁ ( ▁* radi an s ▁ ) ▁* ▁ 5 7 . 2 9 5 7 7 9 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* radi an s ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁double ▁ ( ▁* a ▁ ) ▁ , ▁double ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁double ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁circum fer e nce ▁= ▁ 2 ▁* ▁3.14159 2 ▁* ▁sqrt ▁ ( ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ) ▁ / ▁ 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁int ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁int ▁w c ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁str ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str ▁ [ ▁i ▁ ] ▁= = ▁ ' ▁ ' ▁ | | ▁str ▁ [ ▁i ▁ ] ▁= = ▁'\ n ' ▁ | | ▁str ▁ [ ▁i ▁ ] ▁= = ▁'\ t ' ▁ ) ▁ @ ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁fl ag ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁ ++ w c ▁ ; ▁ @ ▁ } ▁ @ ▁ ++ i ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* str ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁w c ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* value s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁float ▁cube D if f S um ▁= ▁0 ▁ ; ▁ @ ▁float ▁ s k e w ▁ ; ▁ @ ▁float ▁ stdDev ▁ ; ▁ @ ▁float ▁ var ▁= ▁0 ▁ ; ▁ @ ▁float ▁av g ▁ ; ▁ @ ▁float ▁total ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁total ▁+ = ▁ value s ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁av g ▁= ▁total ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ var ▁+ = ▁pow ▁ ( ▁ value s ▁ [ ▁i ▁ ] ▁ - ▁av g ▁ , ▁ 2 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ var ▁= ▁ var ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ stdDev ▁= ▁sqrt ▁ ( ▁ var ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁cube D if f S um ▁+ = ▁pow ▁ ( ▁ value s ▁ [ ▁i ▁ ] ▁ - ▁av g ▁ , ▁ 3 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ s k e w ▁= ▁ ( ▁ ( ▁* n ▁ ) ▁ / ▁ ( ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁1.0 f ▁ ) ▁* ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁2.0 f ▁ ) ▁ ) ▁ ) ▁* ▁ ( ▁cube D if f S um ▁ / ▁ ( ▁* n ▁ ) ▁ ) ▁ / ▁ @ ▁pow ▁ ( ▁ stdDev ▁ , ▁ 3 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁av g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ var ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ stdDev ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ s k e w ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁float ▁area Factor ▁= ▁0 .5 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁area Factor ▁* ▁ ( ▁* base ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* power W att s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ power Ho r se power ▁ ; ▁ @ ▁float ▁ c onversion Factor ▁= ▁746 . 0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ power Ho r se power ▁= ▁ ( ▁* power W att s ▁ ) ▁ / ▁ c onversion Factor ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ power Ho r se power ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* value ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁floor Value ▁= ▁floor ▁ ( ▁ ( ▁* value ▁ ) ▁ ) ▁ ; ▁ @ ▁float ▁ ce i l Value ▁= ▁ ce i l ▁ ( ▁ ( ▁* value ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁floor Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ce i l Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number _ of _ e lement s ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ c o mp are _ index ▁ ; ▁ @ ▁int ▁current _ index ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁current _ index ▁= ▁0 ▁ ; ▁current _ index ▁< ▁ ( ▁* number _ of _ e lement s ▁ ) ▁ ; ▁ @ ▁current _ index ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁current _ index ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁current _ index ▁= ▁ 1 ▁ ; ▁current _ index ▁< ▁ ( ▁* number _ of _ e lement s ▁ ) ▁ ; ▁ @ ▁current _ index ++ ▁ ) ▁ { ▁ @ ▁temp ▁= ▁array ▁ [ ▁current _ index ▁ ] ▁ ; ▁ @ ▁ c o mp are _ index ▁= ▁current _ index ▁ - ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ c o mp are _ index ▁ > = ▁0 ▁& & ▁array ▁ [ ▁ c o mp are _ index ▁ ] ▁ > ▁temp ▁ ) ▁ { ▁ @ ▁array ▁ [ ▁ c o mp are _ index ▁+ ▁ 1 ▁ ] ▁= ▁array ▁ [ ▁ c o mp are _ index ▁ ] ▁ ; ▁ @ ▁ c o mp are _ index - - ▁ ; ▁ @ ▁ } ▁ @ ▁array ▁ [ ▁ c o mp are _ index ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁current _ index ▁= ▁0 ▁ ; ▁current _ index ▁< ▁ ( ▁* number _ of _ e lement s ▁ ) ▁ ; ▁ @ ▁current _ index ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array ▁ [ ▁current _ index ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁fo u n d ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁* ▁i ▁< = ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁* ▁i ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁fo u n d ▁= ▁ 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fo u n d ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁nth O dd ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁counter ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁counter ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁ 2 ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁nth O dd ▁= ▁i ▁ ; ▁ @ ▁counter ++ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth O dd ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ index ▁ ; ▁ @ ▁float ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ index ▁= ▁0 ▁ ; ▁ index ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁ index ++ ▁ ) ▁ { ▁ @ ▁ } ▁ @ ▁ index ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ index ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ index ▁= = ▁0 ▁ | | ▁array ▁ [ ▁ index ▁ - ▁ 1 ▁ ] ▁< = ▁array ▁ [ ▁ index ▁ ] ▁ ) ▁ { ▁ @ ▁ index ++ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁temp ▁= ▁array ▁ [ ▁ index ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁ index ▁ ] ▁= ▁array ▁ [ ▁ index ▁ - ▁ 1 ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁ index ▁ - ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ index - - ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁ index ▁= ▁0 ▁ ; ▁ index ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁ index ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array ▁ [ ▁ index ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁pro duc t ▁ ; ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁pro duc t ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁= ▁sum ▁+ ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁pro duc t ▁= ▁pro duc t ▁* ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* divi d end ▁ ) ▁ , ▁int ▁ ( ▁* divisor ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁int ▁temp Divi d end ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁temp Divi d end ▁= ▁ ( ▁* divi d end ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁temp Divi d end ▁ > = ▁ ( ▁* divisor ▁ ) ▁ ) ▁ { ▁ @ ▁temp Divi d end ▁ - = ▁ ( ▁* divisor ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁re ma inde r ▁= ▁temp Divi d end ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁re ma inde r ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁float ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁sum ▁+ = ▁i ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁sum C D ▁ ; ▁ @ ▁float ▁sum A B ▁ ; ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁sum A B ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁sum C D ▁= ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁sum C D ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ - 1 ▁ ; ▁ @ ▁ } ▁ @ ▁result ▁= ▁sum A B ▁ / ▁sum C D ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁total _ per imeter ▁ ; ▁ @ ▁ ; ▁ @ ▁total _ per imeter ▁= ▁ 8 . 0 f ▁* ▁ ( ▁* length ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁total _ per imeter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mil li meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* mil li meters ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁float ▁ centimeter s ▁= ▁ ( ▁* mil li meters ▁ ) ▁ / ▁ 1 0.0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ centimeter s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁is E ven ▁= ▁ ( ▁* num ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ? ▁ 1 ▁ : ▁0 ▁ ; ▁ @ ▁ if ▁ ( ▁is E ven ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ h al f ▁ ; ▁ @ ▁ ; ▁ @ ▁ h al f ▁= ▁ ( ▁* num ▁ ) ▁ / ▁2.0 f ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ h al f ▁ - ▁ ( ▁int ▁ ) ▁ h al f ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 2 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* d ▁ ) ▁ , ▁int ▁ ( ▁* e ▁ ) ▁ , ▁int ▁ ( ▁* f ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ x ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ x ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ / ▁ ( ▁* d ▁ ) ▁* ▁ ( ▁ ( ▁* e ▁ ) ▁ - ▁ ( ▁* f ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ x ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁circum ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁3.14 2 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁circum ▁= ▁ 2 ▁* ▁3.14 2 ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁circum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ f ▁ ( ▁int ▁ n ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ f ▁ ( ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ f ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ n ▁= = ▁0 ▁ ) ▁re tur n ▁ ; ▁ @ ▁ f ▁ ( ▁ n ▁ / ▁10 ▁ ) ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ n ▁ % ▁10 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁array ▁ [ ▁10 ▁ ] ▁= ▁ { ▁ 1 ▁ , ▁ 2 ▁ , ▁ 3 ▁ , ▁ 4 ▁ , ▁ 5 ▁ , ▁ 6 ▁ , ▁ 7 ▁ , ▁ 8 ▁ , ▁ 9 ▁ , ▁0 ▁ } ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ 9 ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base ▁ ) ▁ , ▁float ▁ ( ▁* h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁vol ▁= ▁ ( ▁ ( ▁* base ▁ ) ▁* ▁ ( ▁* base ▁ ) ▁* ▁ ( ▁* h ▁ ) ▁ ) ▁ / ▁3.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* m ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ c ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ a ▁ [ ▁i ▁ ] ▁= = ▁ ( ▁* m ▁ ) ▁ ) ▁ { ▁ @ ▁ c ▁= ▁ 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ c ▁= = ▁0 ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* y ard s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁mile s ▁= ▁ ( ▁* y ard s ▁ ) ▁ / ▁ 1 7 6 0.0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁find H c f ▁ ( ▁int ▁ a ▁ , ▁int ▁ b ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁ if ▁ ( ▁ a ▁= = ▁0 ▁ | | ▁ b ▁= = ▁0 ▁ ) ▁re tur n ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ b ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁temp ▁= ▁ a ▁ % ▁ b ▁ ; ▁ @ ▁ a ▁= ▁ b ▁ ; ▁ @ ▁ b ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ a ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁hcf ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁hcf ▁= ▁find H c f ▁ ( ▁ ( ▁* a ▁ ) ▁ , ▁ ( ▁* b ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁hcf ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁char ▁ ch ▁ [ ▁50 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁ ch ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ch ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁find M in im um ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁array ▁ [ ▁ 6 ▁ ] ▁= ▁ { ▁ 2 2 ▁ , ▁ 4 5 ▁ , ▁ 3 ▁ , ▁ 8 ▁ , ▁ 1 9 ▁ , ▁ 1 2 ▁ } ▁ ; ▁ @ ▁int ▁min ▁= ▁array ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁ 6 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁i ▁ ] ▁< ▁min ▁ ) ▁ { ▁ @ ▁min ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁find M in im um ▁ ( ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* p i ▁ ) ▁ , ▁float ▁ ( ▁* radi an s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ de gree s ▁= ▁ ( ▁* radi an s ▁ ) ▁* ▁ ( ▁180.0 ▁ / ▁ ( ▁* p i ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* radi an s ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* x ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ d if fer e nce ▁ ; ▁ @ ▁float ▁sum ▁ ; ▁ @ ▁float ▁exp _ n eg ▁ ; ▁ @ ▁float ▁exp _ pos ▁ ; ▁ @ ▁ ; ▁ @ ▁exp _ pos ▁= ▁exp f ▁ ( ▁ ( ▁* x ▁ ) ▁ ) ▁ ; ▁ @ ▁exp _ n eg ▁= ▁exp f ▁ ( ▁ - ▁ ( ▁* x ▁ ) ▁ ) ▁ ; ▁ @ ▁sum ▁= ▁exp _ pos ▁+ ▁exp _ n eg ▁ ; ▁ @ ▁ d if fer e nce ▁= ▁exp _ pos ▁ - ▁exp _ n eg ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ d if fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* outer R adius ▁ ) ▁ , ▁float ▁ ( ▁* inner R adius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁float ▁ inner A rea ▁ ; ▁ @ ▁float ▁ outer A rea ▁ ; ▁ @ ▁float ▁pi ▁ ; ▁ @ ▁pi ▁= ▁3.14159 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ outer A rea ▁= ▁pi ▁* ▁ ( ▁* outer R adius ▁ ) ▁* ▁ ( ▁* outer R adius ▁ ) ▁ ; ▁ @ ▁ inner A rea ▁= ▁pi ▁* ▁ ( ▁* inner R adius ▁ ) ▁* ▁ ( ▁* inner R adius ▁ ) ▁ ; ▁ @ ▁area ▁= ▁ outer A rea ▁ - ▁ inner A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ surface A rea ▁= ▁ 4 ▁* ▁ M _ P I ▁* ▁ ( ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* input Number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁current Digit ▁ ; ▁ @ ▁int ▁ totalS um ▁= ▁0 ▁ ; ▁ @ ▁int ▁total Pro duc t ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ ; ▁ ( ▁* input Number ▁ ) ▁ > ▁0 ▁ ; ▁ ( ▁* input Number ▁ ) ▁ / = ▁10 ▁ ) ▁ { ▁ @ ▁current Digit ▁= ▁ ( ▁* input Number ▁ ) ▁ % ▁10 ▁ ; ▁ @ ▁ totalS um ▁+ = ▁current Digit ▁ ; ▁ @ ▁total Pro duc t ▁* = ▁current Digit ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ totalS um ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁total Pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁temp ▁= ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* length ▁ ) ▁ ; ▁ @ ▁float ▁area ▁= ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ ki lo meters ▁ ; ▁ @ ▁ ; ▁ @ ▁ ki lo meters ▁= ▁ ( ▁* meters ▁ ) ▁ / ▁100 0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* meters ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ki lo meters ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁ > > ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* c ▁ ) ▁* ▁ ( ▁* d ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* b L ength ▁ ) ▁ , ▁float ▁ ( ▁* h g t ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ v l m ▁ ; ▁ @ ▁ ; ▁ @ ▁ v l m ▁= ▁ ( ▁ ( ▁* b L ength ▁ ) ▁* ▁ ( ▁* b L ength ▁ ) ▁* ▁ ( ▁* h g t ▁ ) ▁ ) ▁ / ▁3.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ v l m ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ val id at e Dat e ▁ ( ▁int ▁ d ▁ , ▁int ▁ m ▁ , ▁int ▁ y ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ y ▁ > = ▁18 00 ▁& & ▁ y ▁< = ▁ 2 9 9 9 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ m ▁ > = ▁ 1 ▁& & ▁ m ▁< = ▁ 1 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ d ▁ > = ▁ 1 ▁& & ▁ d ▁< = ▁ 3 1 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁ d ▁ > = ▁ 1 ▁& & ▁ d ▁< = ▁30 ▁ ) ▁& & ▁ ( ▁ m ▁= = ▁ 4 ▁ | | ▁ m ▁= = ▁ 6 ▁ | | ▁ m ▁= = ▁ 9 ▁ | | ▁ m ▁= = ▁ 1 1 ▁ ) ▁ ) ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁ d ▁ > = ▁ 1 ▁& & ▁ d ▁< = ▁30 ▁ ) ▁& & ▁ ( ▁ m ▁= = ▁ 1 ▁ | | ▁ m ▁= = ▁ 3 ▁ | | ▁ m ▁= = ▁ 5 ▁ | | ▁ m ▁= = ▁ 7 ▁ | | ▁ @ ▁ m ▁= = ▁ 8 ▁ | | ▁ m ▁= = ▁10 ▁ | | ▁ m ▁= = ▁ 1 2 ▁ ) ▁ ) ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁ d ▁ > = ▁ 1 ▁& & ▁ d ▁< = ▁ 2 8 ▁ ) ▁& & ▁ ( ▁ m ▁= = ▁ 2 ▁ ) ▁ ) ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ d ▁= = ▁ 2 9 ▁& & ▁ m ▁= = ▁ 2 ▁& & ▁ @ ▁ ( ▁ ( ▁ y ▁ % ▁ 4 00 ▁= = ▁0 ▁ ) ▁ | | ▁ ( ▁ y ▁ % ▁ 4 ▁= = ▁0 ▁& & ▁ y ▁ % ▁100 ▁! = ▁0 ▁ ) ▁ ) ▁ ) ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁el se ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁w d ▁ ( ▁int ▁ y ear ▁ , ▁int ▁ mon th ▁ , ▁int ▁ day ▁ ) ▁ { ▁ @ ▁int ▁w day ▁= ▁0 ▁ ; ▁ @ ▁w day ▁= ▁ ( ▁ day ▁+ ▁ ( ▁ ( ▁ 1 5 3 ▁* ▁ ( ▁ mon th ▁+ ▁ 1 2 ▁* ▁ ( ▁ ( ▁ 1 4 ▁ - ▁ mon th ▁ ) ▁ / ▁ 1 2 ▁ ) ▁ - ▁ 3 ▁ ) ▁+ ▁ 2 ▁ ) ▁ / ▁ 5 ▁ ) ▁+ ▁ @ ▁ ( ▁ 3 6 5 ▁* ▁ ( ▁ y ear ▁+ ▁ 4 8 00 ▁ - ▁ ( ▁ ( ▁ 1 4 ▁ - ▁ mon th ▁ ) ▁ / ▁ 1 2 ▁ ) ▁ ) ▁ ) ▁+ ▁ @ ▁ ( ▁ ( ▁ y ear ▁+ ▁ 4 8 00 ▁ - ▁ ( ▁ ( ▁ 1 4 ▁ - ▁ mon th ▁ ) ▁ / ▁ 1 2 ▁ ) ▁ ) ▁ / ▁ 4 ▁ ) ▁ - ▁ @ ▁ ( ▁ ( ▁ y ear ▁+ ▁ 4 8 00 ▁ - ▁ ( ▁ ( ▁ 1 4 ▁ - ▁ mon th ▁ ) ▁ / ▁ 1 2 ▁ ) ▁ ) ▁ / ▁100 ▁ ) ▁+ ▁ @ ▁ ( ▁ ( ▁ y ear ▁+ ▁ 4 8 00 ▁ - ▁ ( ▁ ( ▁ 1 4 ▁ - ▁ mon th ▁ ) ▁ / ▁ 1 2 ▁ ) ▁ ) ▁ / ▁ 4 00 ▁ ) ▁ - ▁32 0 4 5 ▁ ) ▁ % ▁ @ ▁ 7 ▁ ; ▁ @ ▁re tur n ▁w day ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* day ▁ ) ▁ , ▁int ▁ ( ▁* mon th ▁ ) ▁ , ▁int ▁ ( ▁* y ear ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ wDay N o ▁= ▁0 ▁ ; ▁ @ ▁char ▁ day Name s ▁ [ ▁ ] ▁ [ ▁ 1 2 ▁ ] ▁= ▁ { ▁ " M o n day " ▁ , ▁ " T ue s day " ▁ , ▁ " W ed n e s day " ▁ , ▁ " T h u r s day " ▁ , ▁ @ ▁ " F r i day " ▁ , ▁ " S a tur day " ▁ , ▁ " S u n day " ▁ } ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ val id at e Dat e ▁ ( ▁ ( ▁* day ▁ ) ▁ , ▁ ( ▁* mon th ▁ ) ▁ , ▁ ( ▁* y ear ▁ ) ▁ ) ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* day ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* mon th ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ wDay N o ▁= ▁w d ▁ ( ▁ ( ▁* y ear ▁ ) ▁ , ▁ ( ▁* mon th ▁ ) ▁ , ▁ ( ▁* day ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ day Name s ▁ [ ▁ wDay N o ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁4.0 ▁ / ▁3.0 ▁ ) ▁* ▁ M _ P I ▁* ▁ ( ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< = ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std bool . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ num ▁ ; ▁ @ ▁ bool ▁is Prime ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* upper ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ num ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ num ▁< = ▁ ( ▁* upper ▁ ) ▁ ; ▁ num ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁< = ▁ 1 ▁ ) ▁ cont in ue ▁ ; ▁ @ ▁is Prime ▁= ▁ t r ue ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁* ▁i ▁< = ▁ num ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁ f al se ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Prime ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is N eg at i ve ▁ ; ▁ @ ▁int ▁is Pos it i ve ▁ ; ▁ @ ▁ ; ▁ @ ▁is Pos it i ve ▁= ▁ ( ▁* num ▁ ) ▁ > ▁0 ▁ ; ▁ @ ▁is N eg at i ve ▁= ▁ ( ▁* num ▁ ) ▁< ▁0 ▁ ; ▁ @ ▁ if ▁ ( ▁is Pos it i ve ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁is N eg at i ve ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* string ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁freq ue n cy ▁ [ ▁25 5 ▁ ] ▁ ; ▁ @ ▁int ▁max ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁int ▁ascii ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁25 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁freq ue n cy ▁ [ ▁i ▁ ] ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ string ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ascii ▁= ▁ ( ▁int ▁ ) ▁ string ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁freq ue n cy ▁ [ ▁ascii ▁ ] ▁+ = ▁ 1 ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁max ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁25 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁freq ue n cy ▁ [ ▁i ▁ ] ▁ > ▁freq ue n cy ▁ [ ▁max ▁ ] ▁ ) ▁max ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁max ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁freq ue n cy ▁ [ ▁max ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁find H c f ▁ ( ▁int ▁ a ▁ , ▁int ▁ b ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁ if ▁ ( ▁ a ▁= = ▁0 ▁ | | ▁ b ▁= = ▁0 ▁ ) ▁re tur n ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ b ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁temp ▁= ▁ a ▁ % ▁ b ▁ ; ▁ @ ▁ a ▁= ▁ b ▁ ; ▁ @ ▁ b ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ a ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁hcf ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁hcf ▁= ▁find H c f ▁ ( ▁ ( ▁* a ▁ ) ▁ , ▁ ( ▁* b ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁hcf ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* x ▁ ) ▁ , ▁int ▁ ( ▁* y ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁temp ▁= ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ ( ▁* x ▁ ) ▁= ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁ ( ▁* y ▁ ) ▁= ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ string ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁freq ue n cy ▁ [ ▁25 5 ▁ ] ▁ ; ▁ @ ▁int ▁ascii ▁ ; ▁ @ ▁int ▁min ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁25 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁freq ue n cy ▁ [ ▁i ▁ ] ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁ string ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ascii ▁= ▁ string ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁freq ue n cy ▁ [ ▁ascii ▁ ] ▁ ++ ▁ ; ▁ @ ▁ } ▁ @ ▁min ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁25 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁freq ue n cy ▁ [ ▁i ▁ ] ▁< ▁freq ue n cy ▁ [ ▁min ▁ ] ▁& & ▁freq ue n cy ▁ [ ▁i ▁ ] ▁! = ▁0 ▁ | | ▁ @ ▁freq ue n cy ▁ [ ▁min ▁ ] ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁min ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁min ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁freq ue n cy ▁ [ ▁min ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* grade ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ s c or e ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁int ▁ grade Num ▁= ▁0 ▁ ; ▁ @ ▁float ▁av g ▁= ▁0 ▁ ; ▁ @ ▁int ▁ pas s ▁= ▁0 ▁ ; ▁ @ ▁int ▁total G r a de s ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* grade ▁ ) ▁! = ▁ - 1 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* grade ▁ ) ▁< = ▁100 ▁& & ▁ ( ▁* grade ▁ ) ▁ > = ▁ 7 0 ▁ ) ▁ { ▁ @ ▁ pas s ▁= ▁ pas s ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ pas s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* grade ▁ ) ▁ > = ▁0 ▁& & ▁ ( ▁* grade ▁ ) ▁< = ▁100 ▁ ) ▁ { ▁ @ ▁total G r a de s ▁= ▁total G r a de s ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁av g ▁= ▁100 ▁* ▁ pas s ▁ / ▁total G r a de s ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁av g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ number s ▁ [ ▁ 5 ▁ ] ▁= ▁ { ▁1.0 ▁ , ▁2.0 ▁ , ▁3.0 ▁ , ▁4.0 ▁ , ▁5.0 ▁ } ▁ ; ▁ @ ▁float ▁total ▁= ▁ 0.0 ▁ ; ▁ @ ▁float ▁av era ge ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁total ▁+ = ▁ number s ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁av era ge ▁= ▁total ▁ / ▁ 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁total ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁av era ge ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side 1 ▁ ) ▁ , ▁float ▁ ( ▁* side 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁perim ▁= ▁ 2 ▁* ▁ ( ▁ ( ▁* side 1 ▁ ) ▁+ ▁ ( ▁* side 2 ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ x ▁= ▁ 1 5 ▁ ; ▁ @ ▁vo id ▁display ▁ ( ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ x ▁= ▁25 ▁ ; ▁ @ ▁int ▁ y ▁= ▁ 3 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ x ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ y ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁display ▁ ( ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ y ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁display ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁ y ▁= ▁ 4 5 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* R ▁ ) ▁ , ▁float ▁ ( ▁* r ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁float ▁factor ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁factor ▁= ▁ 3 .141592653589793 2 384 6 ▁* ▁ 3 .141592653589793 2 384 6 ▁ ; ▁ @ ▁ surface A rea ▁= ▁factor ▁* ▁ 4 ▁* ▁ ( ▁* R ▁ ) ▁* ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* x ▁ ) ▁ , ▁int ▁ ( ▁* y ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁add i tion ▁ ; ▁ @ ▁float ▁av era ge ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁add i tion ▁= ▁ ( ▁* x ▁ ) ▁+ ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁av era ge ▁= ▁add i tion ▁ / ▁2.0 f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁add i tion ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁av era ge ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ le n 1 ▁ ; ▁ @ ▁int ▁ le n ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ le n ▁= ▁0 ▁ ; ▁str ▁ [ ▁ le n ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁ le n ++ ▁ ) ▁ @ ▁ ; ▁ @ ▁ le n 1 ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁ le n ▁ - ▁ le n 1 ▁ ) ▁ ; ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str ▁ [ ▁i ▁ ] ▁= = ▁str ▁ [ ▁i ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁ ; ▁j ▁< ▁ ( ▁ le n ▁ - ▁ le n 1 ▁ ) ▁ ; ▁j ++ ▁ ) ▁str ▁ [ ▁j ▁ ] ▁= ▁str ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ le n 1 ++ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* str ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* s 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁i ▁ ; ▁ @ ▁char ▁ s 2 ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁ s 1 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁ s 2 ▁ [ ▁i ▁ ] ▁= ▁ s 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ s 2 ▁ [ ▁i ▁ ] ▁= ▁'\ 0 ' ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ s 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* a ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁= = ▁ ' M ' ▁ | | ▁ ( ▁* b ▁ ) ▁= = ▁ ' m ' ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁< = ▁25 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁= = ▁ ' F ' ▁ | | ▁ ( ▁* b ▁ ) ▁= = ▁ ' f ' ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁< = ▁20 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* centimeter s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ meters ▁ ; ▁ @ ▁ ; ▁ @ ▁ meters ▁= ▁ ( ▁* centimeter s ▁ ) ▁ / ▁ 1 00.0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ meters ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ u nsi gn ed ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ a ▁ [ ▁ 3 ▁ ] ▁= ▁ { ▁ 1 1 ▁ , ▁ 2 2 ▁ , ▁ 3 3 ▁ } ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ 3 ▁ ) ▁ { ▁ @ ▁int ▁ value ▁= ▁ a ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ u nsi gn ed ▁int ▁address ▁= ▁ ( ▁ u nsi gn ed ▁int ▁ ) ▁& a ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ value ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁address ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* pos ▁ ) ▁ , ▁int ▁ ( ▁* val ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁ > = ▁ ( ▁* pos ▁ ) ▁ ; ▁ - - i ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁i ▁ - ▁ 1 ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁arr ▁ [ ▁ ( ▁* pos ▁ ) ▁ - ▁ 1 ▁ ] ▁= ▁ ( ▁* val ▁ ) ▁ ; ▁ @ ▁ ++ ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ @ ▁ ( ▁ ( ▁* radius ▁ ) ▁+ ▁sqrt ▁ ( ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁+ ▁ ( ▁* height ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁ long ▁find _ ncr ▁ ( ▁int ▁ n ▁ , ▁int ▁ r ▁ ) ▁ { ▁ @ ▁ long ▁ n _ fact ▁= ▁ 1 ▁ , ▁ r _ fact ▁= ▁ 1 ▁ , ▁ n _ r _ fact ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ n ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ n _ fact ▁* = ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁i ▁< = ▁ r ▁ ) ▁ r _ fact ▁* = ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁i ▁< = ▁ n ▁ - ▁ r ▁ ) ▁ n _ r _ fact ▁* = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ n _ fact ▁ / ▁ ( ▁ r _ fact ▁* ▁ n _ r _ fact ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ long ▁find _ npr ▁ ( ▁int ▁ n ▁ , ▁int ▁ r ▁ ) ▁ { ▁ @ ▁ long ▁ n _ fact ▁= ▁ 1 ▁ , ▁ n _ r _ fact ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ n ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ n _ fact ▁* = ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁i ▁< = ▁ n ▁ - ▁ r ▁ ) ▁ n _ r _ fact ▁* = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ n _ fact ▁ / ▁ n _ r _ fact ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* r ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁ long ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁ @ ▁ long ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁ long ▁ ncr ▁ , ▁ npr ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ncr ▁= ▁find _ ncr ▁ ( ▁ ( ▁* n ▁ ) ▁ , ▁ ( ▁* r ▁ ) ▁ ) ▁ ; ▁ @ ▁ npr ▁= ▁find _ npr ▁ ( ▁ ( ▁* n ▁ ) ▁ , ▁ ( ▁* r ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ncr ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ npr ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* e ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁pro duc t ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁* ▁ ( ▁* d ▁ ) ▁* ▁ ( ▁* e ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ M o d ▁ ; ▁ @ ▁int ▁ D ▁ ; ▁ @ ▁int ▁ M ▁ ; ▁ @ ▁int ▁ S ▁ ; ▁ @ ▁int ▁ A ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ A ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ S ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ M ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ D ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ M o d ▁= ▁ ( ▁* a ▁ ) ▁ % ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ A ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ S ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ M ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ D ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ M o d ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ cy cl ic S w a p ▁ ( ▁int ▁* a ▁ , ▁int ▁* b ▁ , ▁int ▁* c ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ cy cl ic S w a p ▁ ( ▁& ▁ ( ▁* a ▁ ) ▁ , ▁& ▁ ( ▁* b ▁ ) ▁ , ▁& ▁ ( ▁* c ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ cy cl ic S w a p ▁ ( ▁int ▁* a ▁ , ▁int ▁* b ▁ , ▁int ▁* c ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁temp ▁= ▁* b ▁ ; ▁ @ ▁* b ▁= ▁* a ▁ ; ▁ @ ▁* a ▁= ▁* c ▁ ; ▁ @ ▁* c ▁= ▁temp ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* o p tion ▁ ) ▁ , ▁float ▁ ( ▁* temperature F ▁ ) ▁ , ▁float ▁ ( ▁* temperature C ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* o p tion ▁ ) ▁= = ▁ ' F ' ▁ | | ▁ ( ▁* o p tion ▁ ) ▁= = ▁ ' f ' ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ( ▁* temperature C ▁ ) ▁= ▁ ( ▁ ( ▁* temperature F ▁ ) ▁ - ▁32 ▁ ) ▁* ▁5.0 ▁ / ▁ 9 . 0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* temperature C ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* o p tion ▁ ) ▁= = ▁ ' C ' ▁ | | ▁ ( ▁* o p tion ▁ ) ▁= = ▁ ' c ' ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ( ▁* temperature F ▁ ) ▁= ▁ ( ▁ ( ▁* temperature C ▁ ) ▁* ▁ 9 . 0 ▁ / ▁5.0 ▁ ) ▁+ ▁32 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* temperature F ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* w eight ▁ ) ▁ , ▁float ▁ ( ▁* height C m ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ b mi ▁ ; ▁ @ ▁float ▁ height M ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ height M ▁= ▁ ( ▁* height C m ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ b mi ▁= ▁ ( ▁* w eight ▁ ) ▁ / ▁ ( ▁ height M ▁* ▁ height M ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ b mi ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁nth Cub ic ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 3 ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁nth Cub ic ▁* = ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth Cub ic ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* n ame ▁ ) ▁ , ▁float ▁ ( ▁* basic ▁ ) ▁ , ▁float ▁ ( ▁* hra ▁ ) ▁ , ▁float ▁ ( ▁* d a ▁ ) ▁ , ▁ @ ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁gr os s ▁ ; ▁ @ ▁float ▁ p f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ p f ▁= ▁ ( ▁ ( ▁* basic ▁ ) ▁* ▁ 1 2 ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁gr os s ▁= ▁ ( ▁* basic ▁ ) ▁+ ▁ ( ▁* d a ▁ ) ▁+ ▁ ( ▁* hra ▁ ) ▁+ ▁ p f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ame ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* basic ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* hra ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* d a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ p f ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁gr os s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ Str fun ▁ ( ▁char ▁* * ptr ▁ , ▁int ▁count ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁count ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁char ▁* b u f f ▁ [ ▁ 4 ▁ ] ▁= ▁ { ▁ " He l lo ▁func tion " ▁ , ▁ " Ho w ▁ are ▁ y o u ? " ▁ , ▁ " C a tch ▁ s o m e ▁ string s " ▁ } ▁ ; ▁ @ ▁ Str fun ▁ ( ▁ b u f f ▁ , ▁ 3 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radi an s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁float ▁ ) ▁ ( ▁ ( ▁* radi an s ▁ ) ▁* ▁ ( ▁180.0 f ▁ / ▁3.14 f ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁add T wo Number s ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ { ▁re tur n ▁ x ▁+ ▁ y ▁ ; ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ b ▁= ▁20 ▁ ; ▁ @ ▁int ▁ a ▁= ▁10 ▁ ; ▁ @ ▁int ▁result ▁= ▁add T wo Number s ▁ ( ▁ a ▁ , ▁ b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* number s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁swap p ed ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁swap p ed ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ - ▁i ▁ - ▁ 1 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ number s ▁ [ ▁j ▁ ] ▁ > ▁ number s ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁ number s ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ number s ▁ [ ▁j ▁ ] ▁= ▁ number s ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ number s ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁swap p ed ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁! s w a p p ed ▁ ) ▁ { ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ number s ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n 1 ▁ ) ▁ , ▁int ▁ ( ▁* n 2 ▁ ) ▁ , ▁int ▁ ( ▁* n 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁small est ▁ ; ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n 1 ▁ ) ▁ > = ▁ ( ▁* n 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* n 1 ▁ ) ▁ > = ▁ ( ▁* n 3 ▁ ) ▁ ) ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* n 1 ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* n 3 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* n 2 ▁ ) ▁ > = ▁ ( ▁* n 3 ▁ ) ▁ ) ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* n 2 ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* n 3 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* n 1 ▁ ) ▁< = ▁ ( ▁* n 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* n 1 ▁ ) ▁< = ▁ ( ▁* n 3 ▁ ) ▁ ) ▁ { ▁ @ ▁small est ▁= ▁ ( ▁* n 1 ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁small est ▁= ▁ ( ▁* n 3 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* n 2 ▁ ) ▁< = ▁ ( ▁* n 3 ▁ ) ▁ ) ▁ { ▁ @ ▁small est ▁= ▁ ( ▁* n 2 ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁small est ▁= ▁ ( ▁* n 3 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁small est ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mm ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁= ▁25 . 4 ▁ ; ▁ @ ▁float ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ inches ▁= ▁ ( ▁* mm ▁ ) ▁ / ▁ c onversion Factor ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ feet ▁= ▁ ( ▁* meters ▁ ) ▁* ▁ 3 . 2 8 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* meters ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* n ame ▁ ) ▁ , ▁float ▁ ( ▁* basic ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ n e t ▁ ; ▁ @ ▁float ▁gr os s ▁ ; ▁ @ ▁float ▁ t a x ▁ ; ▁ @ ▁float ▁ p f ▁ ; ▁ @ ▁float ▁ hra ▁ ; ▁ @ ▁float ▁da ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ p f ▁= ▁ ( ▁* basic ▁ ) ▁* ▁ 0.0 8 ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* basic ▁ ) ▁< ▁500 0 ▁ ) ▁ { ▁ @ ▁da ▁= ▁ ( ▁* basic ▁ ) ▁* ▁0 . 3 ▁ ; ▁ @ ▁ hra ▁= ▁ ( ▁* basic ▁ ) ▁* ▁ 0.0 8 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁da ▁= ▁ ( ▁* basic ▁ ) ▁< ▁100 00 ▁ ? ▁ ( ▁* basic ▁ ) ▁* ▁0 . 4 ▁ : ▁ ( ▁* basic ▁ ) ▁* ▁0 .5 ▁ ; ▁ @ ▁ hra ▁= ▁ ( ▁* basic ▁ ) ▁< ▁100 00 ▁ ? ▁ ( ▁* basic ▁ ) ▁* ▁0 . 1 ▁ : ▁ ( ▁* basic ▁ ) ▁* ▁0 . 2 ▁ ; ▁ @ ▁ } ▁ @ ▁gr os s ▁= ▁ ( ▁* basic ▁ ) ▁+ ▁da ▁+ ▁ hra ▁ ; ▁ @ ▁ t a x ▁= ▁gr os s ▁* ▁ 0.0 5 ▁ ; ▁ @ ▁ n e t ▁= ▁gr os s ▁ - ▁ t a x ▁ - ▁ p f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁gr os s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ n e t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* outer R adius ▁ ) ▁ , ▁float ▁ ( ▁* inner R adius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁float ▁pi Value ▁= ▁3.14159 ▁ ; ▁ @ ▁float ▁ inner Square ▁ ; ▁ @ ▁float ▁ outer Square ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ outer Square ▁= ▁ ( ▁* outer R adius ▁ ) ▁* ▁ ( ▁* outer R adius ▁ ) ▁ ; ▁ @ ▁ inner Square ▁= ▁ ( ▁* inner R adius ▁ ) ▁* ▁ ( ▁* inner R adius ▁ ) ▁ ; ▁ @ ▁area ▁= ▁pi Value ▁* ▁ ( ▁ outer Square ▁ - ▁ inner Square ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base ▁ ) ▁ , ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ 2 ▁* ▁ ( ▁ ( ▁* base ▁ ) ▁+ ▁ ( ▁* side ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ) ▁ / ▁ ( ▁ ( ▁* c ▁ ) ▁ - ▁ ( ▁* d ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁factor i al ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁result ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< = ▁ n ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁result ▁* = ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁result ▁< ▁0 ▁ ) ▁ { ▁ @ ▁re tur n ▁ - 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁result ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁j ▁< = ▁ ( ▁* upper ▁ ) ▁& & ▁j ▁ > = ▁0 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁int ▁fact ▁= ▁factor i al ▁ ( ▁j ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁fact ▁< = ▁ ( ▁* upper ▁ ) ▁& & ▁fact ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁j ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁fact ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁float ▁sum ▁= ▁ 0.0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁float ▁odd ▁= ▁ 2 ▁* ▁i ▁ - ▁ 1 ▁ ; ▁ @ ▁sum ▁+ = ▁odd ▁ / ▁ ( ▁odd ▁* ▁odd ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁j ▁= ▁ 1 ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁j ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁j ▁< = ▁i ▁ / ▁ 2 ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mm ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ inches ▁= ▁ ( ▁* mm ▁ ) ▁ / ▁25 . 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ Print Prime Factor s ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁w h ile ▁ ( ▁ n ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ n ▁ / = ▁ 2 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁int ▁i ▁= ▁ 3 ▁ ; ▁i ▁< = ▁ n ▁ ; ▁i ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁w h ile ▁ ( ▁ n ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ n ▁ / = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ Print Prime Factor s ▁ ( ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ base A rea ▁ ; ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ base A rea ▁= ▁3.14159 ▁* ▁pow ▁ ( ▁ ( ▁* radius ▁ ) ▁ , ▁ 2 ▁ ) ▁ ; ▁ @ ▁vol um e ▁= ▁ base A rea ▁* ▁ ( ▁* height ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* h o u r ▁ ) ▁ , ▁float ▁ ( ▁* minute ▁ ) ▁ , ▁float ▁ ( ▁* second ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* h o u r ▁ ) ▁ > = ▁0 ▁& & ▁ ( ▁* h o u r ▁ ) ▁< = ▁ 2 3 ▁& & ▁ ( ▁* minute ▁ ) ▁ > = ▁0 ▁& & ▁ ( ▁* minute ▁ ) ▁< = ▁ 5 9 ▁& & ▁ @ ▁ ( ▁* second ▁ ) ▁ > = ▁0 ▁& & ▁ ( ▁* second ▁ ) ▁< = ▁ 5 9 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁int ▁ ) ▁ ( ▁* h o u r ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁int ▁ ) ▁ ( ▁* minute ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁int ▁ ) ▁ ( ▁* second ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁temp ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁temp ▁ > = ▁ 7 ▁ ) ▁ { ▁ @ ▁temp ▁ - = ▁ 7 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁temp ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁result ▁= ▁ ( ▁* number ▁ ) ▁& ▁ 1 ▁ ; ▁ @ ▁ if ▁ ( ▁result ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁temp ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁temp ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁char ▁ ( ▁* ch ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* ch ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ ' + ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁+ ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁int ▁ ) ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' - ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁ - ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁int ▁ ) ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁'*' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁* ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁int ▁ ) ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' / ' : ▁ @ ▁ if ▁ ( ▁ ( ▁* num 2 ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁float ▁ ) ▁ ( ▁* num 1 ▁ ) ▁ / ▁ ( ▁float ▁ ) ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' % ' : ▁ @ ▁ if ▁ ( ▁ ( ▁* num 2 ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁ % ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁int ▁ ) ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁ r ▁ ; ▁ @ ▁ ; ▁ @ ▁temp ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* n ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ r ▁= ▁ ( ▁* n ▁ ) ▁ % ▁10 ▁ ; ▁ @ ▁sum ▁= ▁sum ▁+ ▁ ( ▁ r ▁* ▁ r ▁* ▁ r ▁ ) ▁ ; ▁ @ ▁ ( ▁* n ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ / ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁temp ▁= = ▁sum ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* grad ian s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ radi an s ▁= ▁ ( ▁* grad ian s ▁ ) ▁* ▁ 0.0 1 5 7 0 7 9 6 3 2 6 7 9 4 8 9 6 6 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* grad ian s ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* x ▁ ) ▁ , ▁int ▁ ( ▁* y ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ ; ▁ ( ▁* y ▁ ) ▁ > ▁0 ▁ ; ▁ ( ▁* y ▁ ) ▁ - - ▁ ) ▁ { ▁ @ ▁result ▁+ = ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ge ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ge ▁ ) ▁ > ▁18 ▁ ) ▁ { ▁ @ ▁result 1 ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result 1 ▁= ▁0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ var 2 ▁= ▁ 2 00 ▁ ; ▁ @ ▁int ▁ var 1 ▁= ▁100 ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ var 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ var 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁temp ▁= ▁ var 1 ▁ ; ▁ @ ▁ var 1 ▁= ▁ var 2 ▁ ; ▁ @ ▁ var 2 ▁= ▁temp ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ var 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ var 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ b ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ a ▁= ▁0 ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* limit ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* limit ▁ ) ▁ > = ▁ 1 ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁sum ▁< = ▁ ( ▁* limit ▁ ) ▁ ) ▁ { ▁ @ ▁sum ▁= ▁ a ▁+ ▁ b ▁ ; ▁ @ ▁ a ▁= ▁ b ▁ ; ▁ @ ▁ b ▁= ▁sum ▁ ; ▁ @ ▁ if ▁ ( ▁sum ▁< = ▁ ( ▁* limit ▁ ) ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁ u nsi gn ed ▁ long ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁ u nsi gn ed ▁ long ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* N ▁ ) ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁i ▁* ▁i ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁print D e t a i l s ▁ ( ▁int ▁ r o l l n o ▁ , ▁char ▁ n ame ▁ [ ▁ ] ▁ , ▁float ▁ ma r k s ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁char ▁ st ude n t Name ▁ [ ▁ ] ▁= ▁ " G e e t a ▁ K um ar i " ▁ ; ▁ @ ▁print D e t a i l s ▁ ( ▁10 2 ▁ , ▁ st ude n t Name ▁ , ▁ 8 2 . 7 5 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* ch oi ce ▁ ) ▁ , ▁float ▁ ( ▁* temperature ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ converted Temp era tur e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* ch oi ce ▁ ) ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ converted Temp era tur e ▁= ▁ ( ▁ ( ▁* temperature ▁ ) ▁ - ▁32 ▁ ) ▁ / ▁ 1 . 8 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ converted Temp era tur e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* ch oi ce ▁ ) ▁= = ▁ 2 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ converted Temp era tur e ▁= ▁ ( ▁ ( ▁* temperature ▁ ) ▁* ▁ 1 . 8 ▁ ) ▁+ ▁32 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ converted Temp era tur e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁& ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁str 2 ▁ [ ▁20 ▁ ] ▁ ; ▁ @ ▁char ▁str 1 ▁ [ ▁20 ▁ ] ▁ ; ▁ @ ▁int ▁is E q u al ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁str 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁str 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ | | ▁str 2 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁str 2 ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁is E q u al ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is E q u al ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁ u nsi gn ed ▁int ▁ rev B it s ▁ ( ▁ u nsi gn ed ▁int ▁da t a ▁ ) ▁ { ▁ @ ▁ u nsi gn ed ▁char ▁total B it s ▁= ▁ size of ▁ ( ▁da t a ▁ ) ▁* ▁ 8 ▁ ; ▁ @ ▁ u nsi gn ed ▁int ▁ rev Num ▁= ▁0 ▁ , ▁i ▁ , ▁temp ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁total B it s ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁temp ▁= ▁ ( ▁da t a ▁& ▁ ( ▁ 1 ▁< < ▁i ▁ ) ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁temp ▁ ) ▁ rev Num ▁ | = ▁ ( ▁ 1 ▁< < ▁ ( ▁ ( ▁total B it s ▁ - ▁ 1 ▁ ) ▁ - ▁i ▁ ) ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ rev Num ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ u nsi gn ed ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ u nsi gn ed ▁int ▁ num ▁= ▁0 x 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ rev B it s ▁ ( ▁ num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ h an oi _ t ower ▁ ( ▁char ▁ , ▁char ▁ , ▁char ▁ , ▁int ▁ ) ▁ ; ▁ @ ▁vo id ▁ h an oi _ t ower ▁ ( ▁char ▁peg 1 ▁ , ▁char ▁peg 2 ▁ , ▁char ▁peg 3 ▁ , ▁int ▁ n ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ n ▁< = ▁0 ▁ ) ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ n ▁= = ▁ 1 ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ { ▁ @ ▁ h an oi _ t ower ▁ ( ▁peg 1 ▁ , ▁peg 3 ▁ , ▁peg 2 ▁ , ▁ n ▁ - ▁ 1 ▁ ) ▁ ; ▁ @ ▁ h an oi _ t ower ▁ ( ▁peg 1 ▁ , ▁peg 2 ▁ , ▁peg 3 ▁ , ▁ 1 ▁ ) ▁ ; ▁ @ ▁ h an oi _ t ower ▁ ( ▁peg 2 ▁ , ▁peg 1 ▁ , ▁peg 3 ▁ , ▁ n ▁ - ▁ 1 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ h an oi _ t ower ▁ ( ▁ ' x ' ▁ , ▁ ' y ' ▁ , ▁ ' z ' ▁ , ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is U n i q ue ▁ ; ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* size ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁is U n i q ue ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁arr ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁j ▁ ; ▁ k ▁< ▁ ( ▁* size ▁ ) ▁ - ▁ 1 ▁ ; ▁ k ++ ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁ k ▁ ] ▁= ▁arr ▁ [ ▁ k ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* size ▁ ) ▁ - - ▁ ; ▁ @ ▁j - - ▁ ; ▁ @ ▁is U n i q ue ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is U n i q ue ▁! = ▁ 1 ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁ ; ▁j ▁< ▁ ( ▁* size ▁ ) ▁ - ▁ 1 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁j ▁ ] ▁= ▁arr ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* size ▁ ) ▁ - - ▁ ; ▁ @ ▁i - - ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* e ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* e ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁result ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ) ▁* ▁ ( ▁ ( ▁* c ▁ ) ▁ - ▁ ( ▁* d ▁ ) ▁ ) ▁ / ▁ ( ▁* e ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁odd ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ square ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* num ▁ ) ▁ > = ▁odd ▁ ) ▁ { ▁ @ ▁ ( ▁* num ▁ ) ▁ - = ▁odd ▁ ; ▁ @ ▁odd ▁+ = ▁ 2 ▁ ; ▁ @ ▁ square ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ square ▁* ▁ square ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ square ▁* ▁ square ▁+ ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁freq ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁count ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁freq ▁ [ ▁i ▁ ] ▁= ▁ - 1 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁arr ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁freq ▁ [ ▁j ▁ ] ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁freq ▁ [ ▁i ▁ ] ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁freq ▁ [ ▁i ▁ ] ▁= ▁count ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁freq ▁ [ ▁i ▁ ] ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁freq ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ a ▁= ▁ 7 ▁ ; ▁ @ ▁vo id ▁pro ce s s ▁ ( ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ a ▁= ▁ 1 2 ▁ ; ▁ @ ▁int ▁ b ▁= ▁ 2 2 ▁ ; ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁sum ▁= ▁ a ▁+ ▁ b ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁pro ce s s ▁ ( ▁ ) ▁ ; ▁ @ ▁sum ▁= ▁ b ▁ - ▁ a ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁pro ce s s ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁ b ▁= ▁32 ▁ ; ▁ @ ▁int ▁ d if f ▁ ; ▁ @ ▁ d if f ▁= ▁ b ▁ - ▁ a ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁float ▁area 3 ▁ ; ▁ @ ▁float ▁area 2 ▁ ; ▁ @ ▁float ▁area 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area 1 ▁= ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* w id th ▁ ) ▁ ; ▁ @ ▁area 2 ▁= ▁ ( ▁* w id th ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ; ▁ @ ▁area 3 ▁= ▁ ( ▁* height ▁ ) ▁* ▁ ( ▁* length ▁ ) ▁ ; ▁ @ ▁ surface A rea ▁= ▁ 2 ▁* ▁ ( ▁area 1 ▁+ ▁area 2 ▁+ ▁area 3 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* r ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁fact _ n r ▁ ; ▁ @ ▁int ▁fact _ n ▁ ; ▁ @ ▁int ▁ per m u t ation ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fact _ n ▁= ▁ 1 ▁ ; ▁ @ ▁fact _ n r ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fact _ n ▁* = ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁i ▁= = ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁ ( ▁* r ▁ ) ▁ ) ▁ ) ▁ { ▁ @ ▁fact _ n r ▁= ▁fact _ n ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ per m u t ation ▁= ▁fact _ n ▁ / ▁fact _ n r ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ per m u t ation ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* grad ian s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ radi an s ▁= ▁ ( ▁* grad ian s ▁ ) ▁* ▁ ( ▁3.14159 ▁ / ▁ 2 00 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁* ▁ ( ▁* d ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* o per ation ▁ ) ▁ , ▁float ▁ ( ▁* num 1 ▁ ) ▁ , ▁float ▁ ( ▁* num 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* o per ation ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ ' + ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁+ ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' - ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁ - ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁'*' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁* ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' / ' : ▁ @ ▁ if ▁ ( ▁ ( ▁* num 2 ▁ ) ▁! = ▁ 0.0 f ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁ / ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁dec Value ▁= ▁10 2 4 ▁ ; ▁ @ ▁int ▁oct Value ▁= ▁10 2 4 ▁ ; ▁ @ ▁int ▁ h e x Value S mal l ▁= ▁10 2 4 ▁ ; ▁ @ ▁int ▁ h e x Value C a p it al ▁= ▁10 2 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁dec Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁oct Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ h e x Value S mal l ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ h e x Value C a p it al ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ 2 ▁* ▁ ( ▁ ( ▁* length ▁ ) ▁+ ▁ ( ▁* w id th ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mp s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁knots ▁= ▁ ( ▁* mp s ▁ ) ▁* ▁ 1 . 9 4 384 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁knots ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radi an s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ de gree s ▁= ▁ ( ▁* radi an s ▁ ) ▁* ▁ ( ▁180.0 f ▁ / ▁3.14 f ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ge nde r ▁ ) ▁ , ▁int ▁ ( ▁* a ge ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* ge nde r ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ ' M ' : ▁ @ ▁ case ▁ ' m ' : ▁ @ ▁ if ▁ ( ▁ ( ▁* a ge ▁ ) ▁ > ▁ 2 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' F ' : ▁ @ ▁ case ▁ ' f ' : ▁ @ ▁ if ▁ ( ▁ ( ▁* a ge ▁ ) ▁ > ▁ 2 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁double ▁total G r a de s ▁= ▁0 ▁ ; ▁ @ ▁double ▁ pas s ▁= ▁0 ▁ ; ▁ @ ▁double ▁av g ▁= ▁0 ▁ ; ▁ @ ▁double ▁ grade Num ▁= ▁0 ▁ ; ▁ @ ▁double ▁ grade ▁= ▁0 ▁ ; ▁ @ ▁double ▁sum ▁= ▁0 ▁ ; ▁ @ ▁double ▁ s c or e ▁ ; ▁ @ ▁w h ile ▁ ( ▁ grade ▁! = ▁ - 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ grade ▁< = ▁100 ▁& & ▁ grade ▁ > = ▁ 7 0 ▁ ) ▁ { ▁ @ ▁ pas s ++ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ pas s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ grade ▁ > = ▁100 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ grade ▁ > = ▁0 ▁& & ▁ grade ▁< = ▁100 ▁ ) ▁ { ▁ @ ▁total G r a de s ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁av g ▁= ▁ ( ▁ pas s ▁ / ▁total G r a de s ▁ ) ▁* ▁100 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁av g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ p rev ▁= ▁0 ▁ ; ▁ @ ▁int ▁ c u r r ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁next ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁next ▁= ▁ p rev ▁+ ▁ c u r r ▁ ; ▁ @ ▁ p rev ▁= ▁ c u r r ▁ ; ▁ @ ▁ c u r r ▁= ▁next ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ c u r r ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* sides ▁ ) ▁ , ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* sides ▁ ) ▁* ▁ ( ▁* length ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁re duc ed ▁= ▁ ( ▁* num ▁ ) ▁ % ▁10 ▁ ; ▁ @ ▁int ▁result ▁= ▁ ( ▁* num ▁ ) ▁ - ▁re duc ed ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁rem ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁rem ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁rem ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* x ▁ ) ▁ , ▁int ▁ ( ▁* y ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* x ▁ ) ▁= ▁ ( ▁* x ▁ ) ▁ - ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁ ( ▁* y ▁ ) ▁= ▁ ( ▁* x ▁ ) ▁+ ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁ ( ▁* x ▁ ) ▁= ▁ ( ▁* y ▁ ) ▁ - ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* y ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* basic Pa y ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁employer Fun d ▁ ; ▁ @ ▁float ▁employee Fun d ▁ ; ▁ @ ▁ ; ▁ @ ▁employee Fun d ▁= ▁ ( ▁ ( ▁* basic Pa y ▁ ) ▁ / ▁100 ▁ ) ▁* ▁ 1 2 .5 f ▁ ; ▁ @ ▁employer Fun d ▁= ▁ ( ▁ ( ▁* basic Pa y ▁ ) ▁ / ▁100 ▁ ) ▁* ▁12.0 f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* basic Pa y ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁employee Fun d ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁employer Fun d ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁large st ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁ > ▁large st ▁ ) ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁ > ▁large st ▁ ) ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁vo id ▁ in se r t ▁ ( ▁ ) ▁ ; ▁ @ ▁vo id ▁ de le t e ▁ ( ▁ ) ▁ ; ▁ @ ▁vo id ▁display ▁ ( ▁ ) ▁ ; ▁ @ ▁int ▁ queue _ array ▁ [ ▁50 ▁ ] ▁ ; ▁ @ ▁int ▁re ar ▁= ▁ - 1 ▁ ; ▁ @ ▁int ▁front ▁= ▁ - 1 ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* ch oi ce ▁ ) ▁ ) ▁ { ▁ @ ▁w h ile ▁ ( ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* ch oi ce ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ 1 : ▁ @ ▁ in se r t ▁ ( ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 2 : ▁ @ ▁ de le t e ▁ ( ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 3 : ▁ @ ▁display ▁ ( ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 4 : ▁ @ ▁ex it ▁ ( ▁ 1 ▁ ) ▁ ; ▁ @ ▁default : ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ in se r t ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁add _ i tem ▁ ; ▁ @ ▁ if ▁ ( ▁re ar ▁= = ▁50 ▁ - ▁ 1 ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ { ▁ @ ▁ if ▁ ( ▁front ▁= = ▁ - 1 ▁ ) ▁front ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁re ar ▁= ▁re ar ▁+ ▁ 1 ▁ ; ▁ @ ▁ queue _ array ▁ [ ▁re ar ▁ ] ▁= ▁add _ i tem ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁ de le t e ▁ ( ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁front ▁= = ▁ - 1 ▁ | | ▁front ▁ > ▁re ar ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁front ▁= ▁front ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁display ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ if ▁ ( ▁front ▁= = ▁ - 1 ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁front ▁ ; ▁i ▁< = ▁re ar ▁ ; ▁i ++ ▁ ) ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁ 8 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁sum ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ read Array ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁printArray ▁ ( ▁int ▁arr ▁ [ ▁ ] ▁ , ▁int ▁ size ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ size ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁arr ▁ [ ▁10 ▁ ] ▁ ; ▁ @ ▁ read Array ▁ ( ▁arr ▁ , ▁10 ▁ ) ▁ ; ▁ @ ▁printArray ▁ ( ▁arr ▁ , ▁10 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ prime ▁ ( ▁int ▁ num ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ num ▁= ▁ 2 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁w h ile ▁ ( ▁! prime ▁ ( ▁ num ▁ ) ▁ ) ▁ { ▁ @ ▁ num ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ num ++ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ prime ▁ ( ▁int ▁ num ▁ ) ▁ { ▁ @ ▁int ▁i ▁ , ▁fl ag ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< ▁ num ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁ % ▁i ▁! = ▁0 ▁ ) ▁ @ ▁fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁el se ▁ { ▁ @ ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fl ag ▁= = ▁ 1 ▁ | | ▁ num ▁= = ▁ 2 ▁ ) ▁ @ ▁re tur n ▁ ( ▁ 1 ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁re tur n ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁ ) ▁ @ ▁ d if f ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁ d if f ▁= ▁ ( ▁* b ▁ ) ▁ - ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* distance ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ m eter ▁ ; ▁ @ ▁float ▁ feet ▁ ; ▁ @ ▁float ▁ inches ▁ ; ▁ @ ▁float ▁ centimeter ▁ ; ▁ @ ▁ ; ▁ @ ▁ m eter ▁= ▁ ( ▁* distance ▁ ) ▁* ▁100 0 ▁ ; ▁ @ ▁ feet ▁= ▁ ( ▁* distance ▁ ) ▁* ▁32 8 0 . 8 4 ▁ ; ▁ @ ▁ inches ▁= ▁ ( ▁* distance ▁ ) ▁* ▁ 3 9 3 7 0 . 1 ▁ ; ▁ @ ▁ centimeter ▁= ▁ ( ▁* distance ▁ ) ▁* ▁100 00 0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ m eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ centimeter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
