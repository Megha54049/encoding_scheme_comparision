▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base R adius ▁ ) ▁ , ▁float ▁ ( ▁* cy l inde r Height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ base A rea ▁ ; ▁ @ ▁float ▁ cy l inde r V o l um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ base A rea ▁= ▁3.14159 ▁* ▁ ( ▁* base R adius ▁ ) ▁* ▁ ( ▁* base R adius ▁ ) ▁ ; ▁ @ ▁ cy l inde r V o l um e ▁= ▁ base A rea ▁* ▁ ( ▁* cy l inde r Height ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ cy l inde r V o l um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* first _ side ▁ ) ▁ , ▁float ▁ ( ▁* second _ side ▁ ) ▁ , ▁float ▁ ( ▁* th e _ height ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area _ r esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area _ r esult ▁= ▁0 .5 ▁* ▁ ( ▁ ( ▁* first _ side ▁ ) ▁+ ▁ ( ▁* second _ side ▁ ) ▁ ) ▁ ; ▁ @ ▁area _ r esult ▁* = ▁ ( ▁* th e _ height ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area _ r esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length O f Side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁ number O f Side s ▁= ▁ 5 ▁ ; ▁ @ ▁float ▁calculate d Per imeter ▁= ▁ ( ▁* length O f Side ▁ ) ▁* ▁ number O f Side s ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁calculate d Per imeter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁double ▁ ( ▁* de gree s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁double ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ radi an s ▁= ▁ ( ▁* de gree s ▁ ) ▁* ▁ ( ▁3.14 ▁ / ▁180.0 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* l ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ a ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ a ▁= ▁ ( ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁* l ▁ ) ▁* ▁ ( ▁* l ▁ ) ▁ ) ▁ / ▁ ( ▁4.0 ▁* ▁tan ▁ ( ▁ M _ P I ▁ / ▁ ( ▁* n ▁ ) ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ con d i tion ▁ ; ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ con d i tion ▁= ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 7 ▁= = ▁0 ▁ ) ▁ ? ▁0 ▁ : ▁ 1 ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ con d i tion ▁ ) ▁ { ▁ @ ▁ case ▁0 : ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ con d i tion ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* de ci mal ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ place ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ octa l ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* de ci mal ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ octa l ▁+ = ▁ ( ▁ ( ▁* de ci mal ▁ ) ▁ % ▁ 8 ▁ ) ▁* ▁ place ▁ ; ▁ @ ▁ ( ▁* de ci mal ▁ ) ▁ / = ▁ 8 ▁ ; ▁ @ ▁ place ▁* = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ octa l ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁str ▁ [ ▁20 ▁ ] ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁str ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁str ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ p ▁= ▁ 3 .141592653589793 2 384 6 ▁ ; ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ surface A rea ▁= ▁ 4 ▁* ▁ p ▁* ▁ @ ▁pow ▁ ( ▁ ( ▁pow ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ , ▁1.6 f ▁ ) ▁+ ▁pow ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ , ▁1.6 f ▁ ) ▁+ ▁ @ ▁pow ▁ ( ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ , ▁1.6 f ▁ ) ▁ ) ▁ / ▁ @ ▁ 3 ▁ , ▁ @ ▁ 1 ▁ / ▁1.6 f ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ch ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ascii Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ascii Value ▁= ▁ ( ▁int ▁ ) ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ascii Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁float ▁pi ▁= ▁ a c os ▁ ( ▁ - 1 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁ ) ▁ / ▁ ( ▁ 4 ▁* ▁tan ▁ ( ▁pi ▁ / ▁ ( ▁* n ▁ ) ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* R ▁ ) ▁ , ▁float ▁ ( ▁* r ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ @ ▁ 4 ▁* ▁ 3 .141592653589793 2 384 6 ▁* ▁ 3 .141592653589793 2 384 6 ▁* ▁ ( ▁* R ▁ ) ▁* ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁next ▁ ; ▁ @ ▁int ▁ c u r r ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ p rev ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁next ▁= ▁ p rev ▁+ ▁ c u r r ▁ ; ▁ @ ▁ p rev ▁= ▁ c u r r ▁ ; ▁ @ ▁ c u r r ▁= ▁next ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ c u r r ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* y ard s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁mile s ▁ ; ▁ @ ▁float ▁ c onversion Factor ▁= ▁ 1 7 6 0.0 ▁ ; ▁ @ ▁ ; ▁ @ ▁mile s ▁= ▁ ( ▁* y ard s ▁ ) ▁ / ▁ c onversion Factor ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* y ard s ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁4.0 ▁ / ▁3.0 ▁ ) ▁* ▁ 3 .141592653589793 2 384 6 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* feet ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁ y ard s ▁ ; ▁ @ ▁ y ard s ▁= ▁ ( ▁* feet ▁ ) ▁ / ▁3.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ y ard s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁ ^ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁double ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁double ▁sum ▁= ▁0 ▁ ; ▁ @ ▁double ▁ m e an ▁ ; ▁ @ ▁double ▁variance ▁= ▁0 ▁ ; ▁ @ ▁double ▁sumOf Square s ▁= ▁0 ▁ ; ▁ @ ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁sum ▁+ = ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ m e an ▁= ▁sum ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sumOf Square s ▁+ = ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ ) ▁* ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁variance ▁= ▁sumOf Square s ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ m e an ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁variance ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁space ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁space ▁< ▁i ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁space ++ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ num ▁= ▁i ▁ ; ▁ @ ▁w h ile ▁ ( ▁ num ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ num ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ' A ' ▁ ; ▁i ▁< = ▁ ' Z ' ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ' a ' ▁ ; ▁i ▁< = ▁ ' z ' ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* r ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁fact _ n ▁ ; ▁ @ ▁int ▁ c o m b in ation ▁ ; ▁ @ ▁int ▁fact _ r ▁ ; ▁ @ ▁int ▁fact _ n r ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fact _ n ▁= ▁ 1 ▁ ; ▁ @ ▁fact _ r ▁= ▁ 1 ▁ ; ▁ @ ▁fact _ n r ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fact _ n ▁* = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* r ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fact _ r ▁* = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁ ( ▁* r ▁ ) ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fact _ n r ▁* = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ c o m b in ation ▁= ▁fact _ n ▁ / ▁ ( ▁fact _ r ▁* ▁fact _ n r ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ c o m b in ation ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* number s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ - ▁i ▁ - ▁ 1 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ number s ▁ [ ▁j ▁ ] ▁ > ▁ number s ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁ number s ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ number s ▁ [ ▁j ▁ ] ▁= ▁ number s ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ number s ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ number s ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁swap Fl ag ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁swap Fl ag ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ - ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ > ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁int ▁temp ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁swap Fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁swap Fl ag ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* outer R adius ▁ ) ▁ , ▁float ▁ ( ▁* inner R adius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁3.14159 ▁* ▁ @ ▁ ( ▁ ( ▁* outer R adius ▁ ) ▁* ▁ ( ▁* outer R adius ▁ ) ▁ - ▁ ( ▁* inner R adius ▁ ) ▁* ▁ ( ▁* inner R adius ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* number ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁floor R esult ▁= ▁floor ▁ ( ▁ ( ▁* number ▁ ) ▁+ ▁ 0.0 ▁ ) ▁ ; ▁ @ ▁float ▁ ce i l R esult ▁= ▁ ce i l ▁ ( ▁ ( ▁* number ▁ ) ▁ - ▁ 0.0 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁floor R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ce i l R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ line ▁ [ ▁ 1 5 0 ▁ ] ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ , ▁j ▁= ▁0 ▁ ; ▁ line ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁ line ▁ [ ▁i ▁ ] ▁ > = ▁ ' a ' ▁& & ▁ line ▁ [ ▁i ▁ ] ▁< = ▁ ' z ' ▁ ) ▁ | | ▁ @ ▁ ( ▁ line ▁ [ ▁i ▁ ] ▁ > = ▁ ' A ' ▁& & ▁ line ▁ [ ▁i ▁ ] ▁< = ▁ ' Z ' ▁ ) ▁ ) ▁ { ▁ @ ▁ line ▁ [ ▁j ++ ▁ ] ▁= ▁ line ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ line ▁ [ ▁j ▁ ] ▁= ▁'\ 0 ' ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ line ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion R esult ▁ ; ▁ @ ▁float ▁ ki lo meters ▁ ; ▁ @ ▁ ; ▁ @ ▁ c onversion R esult ▁= ▁ ( ▁* meters ▁ ) ▁ / ▁100 0 ▁ ; ▁ @ ▁ ki lo meters ▁= ▁ c onversion R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* meters ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ki lo meters ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁char ▁ ch ▁= ▁'*' ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁10 ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ch ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ surface A rea ▁= ▁ 6 ▁* ▁ ( ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* o per ation ▁ ) ▁ , ▁float ▁ ( ▁* num 1 ▁ ) ▁ , ▁float ▁ ( ▁* num 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* o per ation ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁ ' + ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁+ ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' - ' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁ - ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁'*' : ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁* ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ ' / ' : ▁ @ ▁ if ▁ ( ▁ ( ▁* num 2 ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁ / ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁ multipl i ed Side ▁= ▁ ( ▁* side ▁ ) ▁* ▁ 6 ▁ ; ▁ @ ▁perim eter ▁= ▁ multipl i ed Side ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side L ength ▁ ) ▁ , ▁float ▁ ( ▁* p y r a m id Height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ p y r a m id V o l um e ▁ ; ▁ @ ▁float ▁ h e x ag o n A rea ▁ ; ▁ @ ▁float ▁pi ▁= ▁3.14159 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ h e x ag o n A rea ▁= ▁ ( ▁ 3 ▁* ▁sqrt ▁ ( ▁ 3 ▁ ) ▁ / ▁ 2 ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁* ▁ ( ▁* side L ength ▁ ) ▁ ; ▁ @ ▁ p y r a m id V o l um e ▁= ▁ h e x ag o n A rea ▁* ▁ ( ▁* p y r a m id Height ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ p y r a m id V o l um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* ve lo c it y K m H ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁= ▁0 . 6 2 1 3 7 1 ▁ ; ▁ @ ▁float ▁ ve lo c it y M p H ▁ ; ▁ @ ▁ ; ▁ @ ▁ ve lo c it y M p H ▁= ▁ ( ▁* ve lo c it y K m H ▁ ) ▁* ▁ c onversion Factor ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ve lo c it y M p H ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* de gree s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁ ; ▁ @ ▁float ▁ radi an s ▁ ; ▁ @ ▁ c onversion Factor ▁= ▁3.14 f ▁ / ▁180.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ radi an s ▁= ▁ ( ▁* de gree s ▁ ) ▁* ▁ c onversion Factor ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ C h e c k Divi s io n ▁ ( ▁int ▁ num ▁ , ▁int ▁ a ▁ , ▁int ▁ b ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁ % ▁ a ▁= = ▁0 ▁& & ▁ num ▁ % ▁ b ▁= = ▁0 ▁ ) ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁el se ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* A ▁ ) ▁ , ▁int ▁ ( ▁* B ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ C h e c k Divi s io n ▁ ( ▁ ( ▁* number ▁ ) ▁ , ▁ ( ▁* A ▁ ) ▁ , ▁ ( ▁* B ▁ ) ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* A ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* B ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* A ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ ( ▁* B ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* w id th ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ shift R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ shift R esult ▁= ▁ ( ▁* b ▁ ) ▁ > > ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ shift R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁arr ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁j ▁ ; ▁ k ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁ k ++ ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁ k ▁ ] ▁= ▁arr ▁ [ ▁ k ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* size ▁ ) ▁ - - ▁ ; ▁ @ ▁j - - ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ prime Factor s ▁ ( ▁int ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< = ▁ ( ▁* num ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁w h ile ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* num ▁ ) ▁ / = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* posit io n ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* size ▁ ) ▁ > = ▁100 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* posit io n ▁ ) ▁< ▁ 1 ▁ | | ▁ ( ▁* posit io n ▁ ) ▁ > ▁ ( ▁* size ▁ ) ▁+ ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* size ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* size ▁ ) ▁ ; ▁i ▁ > = ▁ ( ▁* posit io n ▁ ) ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁i ▁ - ▁ 1 ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁arr ▁ [ ▁ ( ▁* posit io n ▁ ) ▁ - ▁ 1 ▁ ] ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* size ▁ ) ▁ ++ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ index 2 ▁ ; ▁ @ ▁int ▁max im um ▁ ; ▁ @ ▁int ▁ index 1 ▁ ; ▁ @ ▁int ▁min im um ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ @ ▁min im um ▁= ▁ a ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁max im um ▁= ▁ a ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁min im um ▁ > ▁ a ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁min im um ▁= ▁ a ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ index 1 ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁max im um ▁< ▁ a ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁max im um ▁= ▁ a ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ index 2 ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁min im um ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ index 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁max im um ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ index 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁perim eter ▁= ▁ 2 ▁* ▁ ( ▁ ( ▁* length ▁ ) ▁+ ▁ ( ▁* w id th ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ num O f Digit s ▁= ▁0 ▁ ; ▁ @ ▁int ▁ copy Num ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁float ▁sum ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ copy Num ▁ ) ▁ { ▁ @ ▁ num O f Digit s ++ ▁ ; ▁ @ ▁ copy Num ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ copy Num ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁ copy Num ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁pow ▁ ( ▁ copy Num ▁ % ▁10 ▁ , ▁ num O f Digit s ▁ ) ▁ ; ▁ @ ▁ copy Num ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁result ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* n ame ▁ ) ▁ , ▁float ▁ ( ▁* basic ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ t a x ▁ ; ▁ @ ▁float ▁ n e t ▁ ; ▁ @ ▁float ▁gr os s ▁ ; ▁ @ ▁float ▁ p f ▁ ; ▁ @ ▁float ▁ hra ▁ ; ▁ @ ▁float ▁da ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ p f ▁= ▁ ( ▁* basic ▁ ) ▁* ▁ 0.0 8 ▁ ; ▁ @ ▁da ▁= ▁ ( ▁* basic ▁ ) ▁< ▁500 0 ▁ ? ▁ ( ▁* basic ▁ ) ▁* ▁0 . 3 ▁ @ ▁ : ▁ ( ▁ ( ▁* basic ▁ ) ▁< ▁100 00 ▁ ? ▁ ( ▁* basic ▁ ) ▁* ▁0 . 4 ▁ : ▁ ( ▁* basic ▁ ) ▁* ▁0 .5 ▁ ) ▁ ; ▁ @ ▁ hra ▁= ▁ ( ▁* basic ▁ ) ▁< ▁500 0 ▁ ? ▁ ( ▁* basic ▁ ) ▁* ▁ 0.0 8 ▁ @ ▁ : ▁ ( ▁ ( ▁* basic ▁ ) ▁< ▁100 00 ▁ ? ▁ ( ▁* basic ▁ ) ▁* ▁0 . 1 ▁ : ▁ ( ▁* basic ▁ ) ▁* ▁0 . 2 ▁ ) ▁ ; ▁ @ ▁gr os s ▁= ▁ ( ▁* basic ▁ ) ▁+ ▁da ▁+ ▁ hra ▁ ; ▁ @ ▁ t a x ▁= ▁gr os s ▁* ▁0 . 1 ▁ ; ▁ @ ▁ n e t ▁= ▁gr os s ▁ - ▁ t a x ▁ - ▁ p f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁gr os s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ n e t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁str ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁count S p a ce s ▁= ▁0 ▁ ; ▁ @ ▁int ▁count S p e ci al C h ar ▁= ▁0 ▁ ; ▁ @ ▁int ▁count A l p h a b e t ▁= ▁0 ▁ ; ▁ @ ▁int ▁count Digit s ▁= ▁0 ▁ ; ▁ @ ▁int ▁counter ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁str ▁ [ ▁counter ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str ▁ [ ▁counter ▁ ] ▁ > = ▁ ' 0 ' ▁& & ▁str ▁ [ ▁counter ▁ ] ▁< = ▁ ' 9 ' ▁ ) ▁ @ ▁count Digit s ++ ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁str ▁ [ ▁counter ▁ ] ▁ > = ▁ ' A ' ▁& & ▁str ▁ [ ▁counter ▁ ] ▁< = ▁ ' Z ' ▁ ) ▁ | | ▁ @ ▁ ( ▁str ▁ [ ▁counter ▁ ] ▁ > = ▁ ' a ' ▁& & ▁str ▁ [ ▁counter ▁ ] ▁< = ▁ ' z ' ▁ ) ▁ ) ▁ @ ▁count A l p h a b e t ++ ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁str ▁ [ ▁counter ▁ ] ▁= = ▁ ' ▁ ' ▁ ) ▁ @ ▁count S p a ce s ++ ▁ ; ▁ @ ▁el se ▁ @ ▁count S p e ci al C h ar ++ ▁ ; ▁ @ ▁counter ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count Digit s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count A l p h a b e t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁count S p a ce s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁count S p e ci al C h ar ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁cnt ▁ ; ▁ @ ▁char ▁ h e x ▁ [ ▁32 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁cnt ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* number ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 1 6 ▁ ) ▁ { ▁ @ ▁ case ▁10 : ▁ @ ▁ h e x ▁ [ ▁cnt ▁ ] ▁= ▁ ' A ' ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 1 1 : ▁ @ ▁ h e x ▁ [ ▁cnt ▁ ] ▁= ▁ ' B ' ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 1 2 : ▁ @ ▁ h e x ▁ [ ▁cnt ▁ ] ▁= ▁ ' C ' ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 1 3 : ▁ @ ▁ h e x ▁ [ ▁cnt ▁ ] ▁= ▁ ' D ' ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 1 4 : ▁ @ ▁ h e x ▁ [ ▁cnt ▁ ] ▁= ▁ ' E ' ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 1 5 : ▁ @ ▁ h e x ▁ [ ▁cnt ▁ ] ▁= ▁ ' F ' ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁default : ▁ @ ▁ h e x ▁ [ ▁cnt ▁ ] ▁= ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ 1 6 ▁ ) ▁+ ▁0 x 3 0 ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* number ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ / ▁ 1 6 ▁ ; ▁ @ ▁cnt ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁cnt ▁ - ▁ 1 ▁ ) ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ h e x ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ @ ▁ @ ▁vo id ▁ string C p y ▁ ( ▁char * ▁ s 1 ▁ , ▁char * ▁ s 2 ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁str 2 ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁char ▁str 1 ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ string C p y ▁ ( ▁str 2 ▁ , ▁str 1 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁str 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁str 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ string C p y ▁ ( ▁char * ▁ s 1 ▁ , ▁char * ▁ s 2 ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ s 2 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ s 1 ▁ [ ▁i ▁ ] ▁= ▁ s 2 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ s 1 ▁ [ ▁i ▁ ] ▁= ▁'\ 0 ' ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁print P attern 1 ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ row ▁< = ▁ n ▁ ; ▁ row ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁ num ▁= ▁ 1 ▁ ; ▁ num ▁< = ▁ row ▁ ; ▁ num ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁print P attern 2 ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁ row ▁= ▁ n ▁ ; ▁ row ▁ > = ▁ 1 ▁ ; ▁ row - - ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁ num ▁= ▁ 1 ▁ ; ▁ num ▁< = ▁ row ▁ ; ▁ num ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁print P attern 3 ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁ row ▁= ▁ n ▁ ; ▁ row ▁ > = ▁ 1 ▁ ; ▁ row - - ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁ num ▁= ▁ row ▁ ; ▁ num ▁ > = ▁ 1 ▁ ; ▁ num - - ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁print P attern 1 ▁ ( ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁print P attern 2 ▁ ( ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁print P attern 3 ▁ ( ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* d ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ge ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is E li g ible ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ge ▁ ) ▁ > = ▁18 ▁ ) ▁ { ▁ @ ▁is E li g ible ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁is E li g ible ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is E li g ible ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁check E ven O dd ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁ number s ▁ [ ▁ 3 ▁ ] ▁= ▁ { ▁ 2 3 ▁ , ▁ 4 2 ▁ , ▁ 5 7 ▁ } ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 3 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ number s ▁ [ ▁i ▁ ] ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁check E ven O dd ▁ ( ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ 4 ▁* ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁ h ▁= ▁pow ▁ ( ▁ ( ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ) ▁ , ▁ 2 ▁ ) ▁ / ▁pow ▁ ( ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ) ▁ , ▁ 2 ▁ ) ▁ ; ▁ @ ▁circum fer e nce ▁= ▁ 3 .141592653589793 2 384 6 ▁* ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ) ▁* ▁ @ ▁ ( ▁ 1 ▁+ ▁ ( ▁ 3 ▁* ▁ h ▁ ) ▁ / ▁ ( ▁10 ▁+ ▁sqrt ▁ ( ▁ 4 ▁ - ▁ 3 ▁* ▁ h ▁ ) ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁double ▁ ( ▁* k m ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁double ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁mile s ▁= ▁ ( ▁* k m ▁ ) ▁* ▁0 . 6 2 1 3 7 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* k m ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁& ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁is E ven ▁= ▁ ( ▁* num ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ? ▁ 1 ▁ : ▁0 ▁ ; ▁ @ ▁ if ▁ ( ▁is E ven ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* posit io n ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* posit io n ▁ ) ▁< ▁ 1 ▁ | | ▁ ( ▁* posit io n ▁ ) ▁ > ▁ ( ▁* size ▁ ) ▁+ ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* size ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁i ▁= ▁ ( ▁* size ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁ > = ▁ ( ▁* posit io n ▁ ) ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁i ▁ - ▁ 1 ▁ ] ▁ ; ▁ @ ▁i - - ▁ ; ▁ @ ▁ } ▁ @ ▁arr ▁ [ ▁ ( ▁* posit io n ▁ ) ▁ - ▁ 1 ▁ ] ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* size ▁ ) ▁ ++ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁int ▁ p ent agonal ▁= ▁ ( ▁ 3 ▁* ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ) ▁* ▁ ( ▁* n ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ p ent agonal ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* grad ian s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ radi an s ▁= ▁ ( ▁* grad ian s ▁ ) ▁* ▁ ( ▁3.14159 ▁ / ▁ 2 00.0 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ radi an s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁ long ▁fact ▁ ( ▁int ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* line ▁ ) ▁ , ▁ long ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* line ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* line ▁ ) ▁ - ▁i ▁ - ▁ 1 ▁ ; ▁j ++ ▁ ) ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁fact ▁ ( ▁i ▁ ) ▁ / ▁ ( ▁fact ▁ ( ▁j ▁ ) ▁* ▁fact ▁ ( ▁i ▁ - ▁j ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ long ▁fact ▁ ( ▁int ▁ num ▁ ) ▁ { ▁ @ ▁ long ▁ f ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ num ▁ ) ▁ { ▁ @ ▁ f ▁= ▁ f ▁* ▁i ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ f ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* y ear ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 ▁= = ▁0 ▁& & ▁ ( ▁* y ear ▁ ) ▁ % ▁100 ▁! = ▁0 ▁ ) ▁ | | ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 00 ▁= = ▁0 ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁nth T riangular ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁nth T riangular ▁= ▁0 .5 f ▁* ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁ ( ▁* n ▁ ) ▁+ ▁ 1 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁int ▁ ) ▁nth T riangular ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ 2 2 . 0 ▁ / ▁ 7 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mil li meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ centimeter s ▁ ; ▁ @ ▁ ; ▁ @ ▁ centimeter s ▁= ▁ ( ▁* mil li meters ▁ ) ▁ / ▁ 1 0.0 ▁ ; ▁ @ ▁float ▁result ▁= ▁ centimeter s ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* start ▁ ) ▁ , ▁int ▁ ( ▁* end ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ num ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁ num ▁< = ▁ ( ▁* end ▁ ) ▁ ; ▁ num ++ ▁ ) ▁ { ▁ @ ▁int ▁original Num ▁ ; ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁int ▁ n ▁= ▁0 ▁ ; ▁ @ ▁float ▁result ▁= ▁ 0.0 ▁ ; ▁ @ ▁original Num ▁= ▁ num ▁ ; ▁ @ ▁fo r ▁ ( ▁original Num ▁= ▁ num ▁ ; ▁original Num ▁! = ▁0 ▁ ; ▁ ++ n ▁ ) ▁ { ▁ @ ▁original Num ▁= ▁original Num ▁ / ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁original Num ▁= ▁ num ▁ ; ▁ @ ▁w h ile ▁ ( ▁original Num ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁re ma inde r ▁= ▁original Num ▁ % ▁10 ▁ ; ▁ @ ▁result ▁= ▁result ▁+ ▁pow ▁ ( ▁re ma inde r ▁ , ▁ n ▁ ) ▁ ; ▁ @ ▁original Num ▁= ▁original Num ▁ / ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁result ▁= = ▁ num ▁ ) ▁ { ▁ @ ▁count ▁= ▁count ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁circum fer e nce ▁= ▁ 2 ▁* ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ @ ▁ @ ▁vo id ▁ ge t B in a ry ▁ ( ▁int ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ge t B in a ry ▁ ( ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ ge t B in a ry ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁loop ▁ ; ▁ @ ▁fo r ▁ ( ▁loop ▁= ▁ 1 5 ▁ ; ▁loop ▁ > = ▁0 ▁ ; ▁loop - - ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁ 1 ▁< < ▁loop ▁ ) ▁& ▁ n ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* A ▁ ) ▁ , ▁int ▁ ( ▁* B ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁ divi s ible B y A ▁= ▁ ( ▁* number ▁ ) ▁ % ▁ ( ▁* A ▁ ) ▁= = ▁0 ▁ ; ▁ @ ▁int ▁ divi s ible B y B ▁= ▁ ( ▁* number ▁ ) ▁ % ▁ ( ▁* B ▁ ) ▁= = ▁0 ▁ ; ▁ @ ▁ if ▁ ( ▁ divi s ible B y A ▁& & ▁ divi s ible B y B ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* A ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* B ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* A ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ ( ▁* B ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁4.0 f ▁ / ▁3.0 f ▁ ) ▁* ▁3.14159 f ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n 1 ▁ ) ▁ , ▁int ▁ ( ▁* n 2 ▁ ) ▁ , ▁int ▁ ( ▁* n 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* n 1 ▁ ) ▁ > ▁ ( ▁* n 2 ▁ ) ▁ ) ▁& & ▁ ( ▁ ( ▁* n 1 ▁ ) ▁ > ▁ ( ▁* n 3 ▁ ) ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n 1 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* n 2 ▁ ) ▁ > ▁ ( ▁* n 3 ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* n 2 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* n 3 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* n 1 ▁ ) ▁< ▁ ( ▁* n 2 ▁ ) ▁ ) ▁& & ▁ ( ▁ ( ▁* n 1 ▁ ) ▁< ▁ ( ▁* n 3 ▁ ) ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* n 1 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* n 2 ▁ ) ▁< ▁ ( ▁* n 3 ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* n 2 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ ( ▁* n 3 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ first ▁= ▁0 ▁ ; ▁ @ ▁int ▁ second ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁next ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* limit ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁< = ▁ 1 ▁ ) ▁ { ▁ @ ▁next ▁= ▁i ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁next ▁= ▁ first ▁+ ▁ second ▁ ; ▁ @ ▁ first ▁= ▁ second ▁ ; ▁ @ ▁ second ▁= ▁next ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁next ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mm ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ in ▁ ; ▁ @ ▁float ▁ c onversion Factor ▁= ▁25 . 4 ▁ ; ▁ @ ▁ ; ▁ @ ▁ in ▁= ▁ ( ▁* mm ▁ ) ▁ / ▁ c onversion Factor ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ in ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* h i g h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e P y r a m id ▁ ; ▁ @ ▁float ▁ base ▁ ; ▁ @ ▁float ▁pi Value ▁= ▁3.14159 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁tan Value ▁= ▁tan ▁ ( ▁pi Value ▁ / ▁5.0 f ▁ ) ▁ ; ▁ @ ▁ base ▁= ▁ ( ▁5.0 f ▁ / ▁4.0 f ▁ ) ▁* ▁ ( ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* length ▁ ) ▁ ) ▁ / ▁tan Value ▁ ; ▁ @ ▁vol um e P y r a m id ▁= ▁ base ▁* ▁ ( ▁* h i g h ▁ ) ▁ / ▁3.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e P y r a m id ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ shift ed Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ shift ed Value ▁= ▁ ( ▁* num ▁ ) ▁ > > ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ shift ed Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁< < ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁circum ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁3.14 2 ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁circum ▁= ▁ 2 ▁* ▁3.14 2 ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁circum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is U n i q ue ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁is U n i q ue ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁! = ▁j ▁& & ▁arr ▁ [ ▁i ▁ ] ▁= = ▁arr ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁is U n i q ue ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is U n i q ue ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁circum fer e nce ▁= ▁ 2 ▁* ▁3.14159 ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁circum fer e nce ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁root ▁ ; ▁ @ ▁int ▁ square d R o o t ▁ ; ▁ @ ▁ ; ▁ @ ▁root ▁= ▁sqrt ▁ ( ▁ ( ▁float ▁ ) ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁ square d R o o t ▁= ▁ r o u n d ▁ ( ▁root ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁= = ▁ square d R o o t ▁* ▁ square d R o o t ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* de ci mal ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ b in a ry ▁ [ ▁32 ▁ ] ▁ ; ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* de ci mal ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ b in a ry ▁ [ ▁i ▁ ] ▁= ▁ ( ▁* de ci mal ▁ ) ▁ % ▁ 2 ▁ ; ▁ @ ▁ ( ▁* de ci mal ▁ ) ▁ / = ▁ 2 ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁ - ▁ 1 ▁ ; ▁j ▁ > = ▁0 ▁ ; ▁j - - ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ b in a ry ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i V ar ▁ ; ▁ @ ▁float ▁ f V ar ▁ ; ▁ @ ▁ ; ▁ @ ▁ f V ar ▁= ▁sqrt ▁ ( ▁ ( ▁double ▁ ) ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁i V ar ▁= ▁ f V ar ▁ ; ▁ @ ▁ if ▁ ( ▁i V ar ▁= = ▁ f V ar ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* w eight ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ b mi ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ( ▁* height ▁ ) ▁= ▁ ( ▁* height ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ b mi ▁= ▁ ( ▁* w eight ▁ ) ▁ / ▁ ( ▁ ( ▁* height ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ b mi ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ de n o m ▁ ; ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ de n o m ▁= ▁ ( ▁* c ▁ ) ▁* ▁ ( ▁* d ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ de n o m ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ) ▁ / ▁ de n o m ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁i ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁ ; ▁ @ ▁put s ▁ ( ▁"\ n --------------- --------------- --------------\ n " ▁ ) ▁ ; ▁ @ ▁int ▁col sIn C urrent Row ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁col sIn C urrent Row ▁= ▁ row ▁ ; ▁ @ ▁int ▁col ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁col ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁ [ ▁100 ▁ ] ▁= ▁ { ▁0 ▁ } ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁= = ▁arr ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁count ▁ [ ▁i ▁ ] ▁ ++ ▁ ; ▁ @ ▁count ▁ [ ▁j ▁ ] ▁ ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁count ▁ [ ▁i ▁ ] ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁sum 1 ▁= ▁0 ▁ ; ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁sum ▁= ▁sum ▁+ ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁sum 1 ▁= ▁sum 1 ▁+ ▁sum ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ P Factor s ▁ ( ▁int ▁ num ▁ ) ▁ ; ▁ @ ▁vo id ▁ I P Factor s ▁ ( ▁int ▁ n ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ P Factor s ▁ ( ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ I P Factor s ▁ ( ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ P Factor s ▁ ( ▁int ▁ num ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 2 ▁ ; ▁ @ ▁ if ▁ ( ▁ num ▁= = ▁ 1 ▁ ) ▁re tur n ▁ ; ▁ @ ▁w h ile ▁ ( ▁ num ▁ % ▁i ▁! = ▁0 ▁ ) ▁i ++ ▁ ; ▁ @ ▁ ; ▁ @ ▁ P Factor s ▁ ( ▁ num ▁ / ▁i ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ I P Factor s ▁ ( ▁int ▁ num ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁ num ▁! = ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ @ ▁w h ile ▁ ( ▁ num ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ num ▁= ▁ num ▁ / ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁calculate A v era ge ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁ number s ▁ [ ▁ 5 ▁ ] ▁= ▁ { ▁ 4 ▁ , ▁ 7 ▁ , ▁ 8 ▁ , ▁ 9 ▁ , ▁10 ▁ } ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁double ▁av era ge ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁ number s ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁av era ge ▁= ▁sum ▁ / ▁5.0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁calculate A v era ge ▁ ( ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* w id th ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁total E d ge L ength ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁total E d ge L ength ▁= ▁ 4 ▁* ▁ ( ▁ ( ▁* length ▁ ) ▁+ ▁ ( ▁* w id th ▁ ) ▁+ ▁ ( ▁* height ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁total E d ge L ength ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* input Pa s cal s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁ ; ▁ @ ▁float ▁result B ar ▁ ; ▁ @ ▁ ; ▁ @ ▁ c onversion Factor ▁= ▁100 00 0 ▁ ; ▁ @ ▁result B ar ▁= ▁ ( ▁* input Pa s cal s ▁ ) ▁ / ▁ c onversion Factor ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result B ar ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* length ▁ ) ▁ , ▁float ▁ ( ▁* brea d th ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁* length ▁ ) ▁* ▁ ( ▁* brea d th ▁ ) ▁ ; ▁ @ ▁perim eter ▁= ▁ ( ▁ 2 ▁* ▁ ( ▁* length ▁ ) ▁ ) ▁+ ▁ ( ▁ 2 ▁* ▁ ( ▁* brea d th ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ shift ed Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ shift ed Value ▁= ▁ ( ▁* num 1 ▁ ) ▁< < ▁ 3 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ shift ed Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ long ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ long ▁int ▁fact ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁i ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁i ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁do ▁ { ▁ @ ▁fact ▁* = ▁i ▁ ; ▁ @ ▁i - - ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁i ▁ > = ▁ 1 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁fact ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* b in a ry ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ octa l ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ length ▁= ▁10 ▁ ; ▁ @ ▁int ▁ power ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁temp ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ length ▁ ; ▁i ▁ > = ▁0 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁temp ▁+ = ▁ ( ▁ b in a ry ▁ [ ▁i ▁ ] ▁ - ▁ ' 0 ' ▁ ) ▁* ▁ power ▁ ; ▁ @ ▁ power ▁* = ▁ 2 ▁ ; ▁ @ ▁ if ▁ ( ▁ power ▁= = ▁ 8 ▁ | | ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ octa l ▁= ▁ octa l ▁* ▁10 ▁+ ▁temp ▁ ; ▁ @ ▁temp ▁= ▁0 ▁ ; ▁ @ ▁ power ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ octa l ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁int ▁ ( ▁* A ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ Temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* N ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* N ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ A ▁ [ ▁i ▁ ] ▁ > ▁ A ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁ Temp ▁= ▁ A ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ A ▁ [ ▁i ▁ ] ▁= ▁ A ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ A ▁ [ ▁j ▁ ] ▁= ▁ Temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ A ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁current ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ p rev ▁= ▁0 ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* limit ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* limit ▁ ) ▁ > = ▁ 1 ▁ ) ▁ { ▁ @ ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁do ▁ { ▁ @ ▁int ▁next ▁= ▁ p rev ▁+ ▁current ▁ ; ▁ @ ▁ p rev ▁= ▁current ▁ ; ▁ @ ▁current ▁= ▁next ▁ ; ▁ @ ▁ if ▁ ( ▁next ▁< = ▁ ( ▁* limit ▁ ) ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁w h ile ▁ ( ▁current ▁< = ▁ ( ▁* limit ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ / ▁ 2 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ - ▁i ▁ ; ▁j ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁ ( ▁* n ▁ ) ▁ - ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁ > = ▁ 1 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁ ( ▁i ▁* ▁ 2 ▁ ) ▁ - ▁ 1 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* meters ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ ki lo meters ▁ ; ▁ @ ▁ ; ▁ @ ▁ ki lo meters ▁= ▁ ( ▁* meters ▁ ) ▁ / ▁100 0.0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ki lo meters ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* limit ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁count ▁= ▁ ( ▁int ▁ ) ▁ c b r t ▁ ( ▁ ( ▁* limit ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* limit ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* start ▁ ) ▁ , ▁int ▁ ( ▁* end ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁i ▁< = ▁ ( ▁* end ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁j ▁= ▁ 1 ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁j ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁j ▁< = ▁i ▁ / ▁ 2 ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁i ▁& & ▁i ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁array ▁ [ ▁100 ▁ ] ▁ , ▁array 1 ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁vo id ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ divisor ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁array 1 ▁ [ ▁i ▁ ] ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁0 ▁ ; ▁ k ▁< ▁ 3 ▁ ; ▁ k ++ ▁ , ▁ divisor ▁* = ▁10 ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁array ▁ [ ▁i ▁ ] ▁ / ▁ divisor ▁ ) ▁ % ▁10 ▁ ) ▁ > ▁ ( ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ / ▁ divisor ▁ ) ▁ % ▁10 ▁ ) ▁ ) ▁ { ▁ @ ▁temp ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁i ▁ ] ▁= ▁array ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁j ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁temp ▁= ▁array 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁array 1 ▁ [ ▁i ▁ ] ▁= ▁array 1 ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁array 1 ▁ [ ▁j ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁array 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* h e x Side ▁ ) ▁ , ▁float ▁ ( ▁* p y r Height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e P y r a m id ▁ ; ▁ @ ▁float ▁ base A rea He x ▁ ; ▁ @ ▁float ▁ con st ant Factor ▁= ▁ ( ▁ 3 ▁* ▁sqrt ▁ ( ▁ 3 ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ base A rea He x ▁= ▁ con st ant Factor ▁* ▁ ( ▁* h e x Side ▁ ) ▁* ▁ ( ▁* h e x Side ▁ ) ▁ ; ▁ @ ▁vol um e P y r a m id ▁= ▁ ( ▁ base A rea He x ▁* ▁ ( ▁* p y r Height ▁ ) ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e P y r a m id ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ge nde r ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ( ▁* ge nde r ▁ ) ▁= ▁ @ ▁ ( ▁ ( ▁* ge nde r ▁ ) ▁ > = ▁ ' A ' ▁& & ▁ ( ▁* ge nde r ▁ ) ▁< = ▁ ' Z ' ▁ ) ▁ ? ▁ ( ▁* ge nde r ▁ ) ▁+ ▁32 ▁ : ▁ ( ▁* ge nde r ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' m ' ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' f ' ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 7 ▁= = ▁0 ▁ | | ▁ ( ▁* num ▁ ) ▁ % ▁ 3 ▁= = ▁0 ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 3 ▁& & ▁ ( ▁* num ▁ ) ▁ % ▁ 2 ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁reverse ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* num ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁reverse ▁= ▁reverse ▁* ▁10 ▁+ ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁10 ▁ ) ▁ ; ▁ @ ▁ ( ▁* num ▁ ) ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁reverse ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁int ▁ digit ▁= ▁reverse ▁ % ▁10 ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ digit ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁reverse ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* N ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ n ▁ ; ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁int ▁ num ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* upper ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁i ▁< = ▁ ( ▁* upper ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁temp ▁= ▁i ▁ ; ▁ @ ▁ num ▁= ▁i ▁ ; ▁ @ ▁ n ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁temp ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁temp ▁= ▁temp ▁ / ▁10 ▁ ; ▁ @ ▁ n ▁= ▁ n ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁temp ▁= ▁i ▁ ; ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁temp ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁re ma inde r ▁= ▁temp ▁ % ▁10 ▁ ; ▁ @ ▁sum ▁= ▁sum ▁+ ▁pow ▁ ( ▁re ma inde r ▁ , ▁ n ▁ ) ▁ ; ▁ @ ▁temp ▁= ▁temp ▁+ ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁ num ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁int ▁ ( ▁* A ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ Temp ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* N ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< = ▁ ( ▁* N ▁ ) ▁ ; ▁j ++ ▁ ) ▁ @ ▁ if ▁ ( ▁ A ▁ [ ▁i ▁ ] ▁ > ▁ A ▁ [ ▁j ▁ ] ▁ ) ▁ { ▁ @ ▁ Temp ▁= ▁ A ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ A ▁ [ ▁i ▁ ] ▁= ▁ A ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ A ▁ [ ▁j ▁ ] ▁= ▁ Temp ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ A ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁float ▁sum ▁= ▁0 ▁ ; ▁ @ ▁float ▁ m e an ▁ ; ▁ @ ▁float ▁variance ▁= ▁0 ▁ ; ▁ @ ▁float ▁sumOf Square s ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁sum ▁= ▁sum ▁+ ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ m e an ▁= ▁sum ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁float ▁ d if f ▁= ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ ; ▁ @ ▁sumOf Square s ▁= ▁sumOf Square s ▁+ ▁ d if f ▁* ▁ d if f ▁ ; ▁ @ ▁ } ▁ @ ▁variance ▁= ▁sumOf Square s ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ m e an ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁variance ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ 4 ▁* ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ val id at e Dat e ▁ ( ▁int ▁ d ▁ , ▁int ▁ m ▁ , ▁int ▁ y ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ y ▁ > = ▁18 00 ▁& & ▁ y ▁< = ▁ 2 9 9 9 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ m ▁ > = ▁ 1 ▁& & ▁ m ▁< = ▁ 1 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ d ▁ > = ▁ 1 ▁& & ▁ d ▁< = ▁ 3 1 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁ d ▁ > = ▁ 1 ▁& & ▁ d ▁< = ▁30 ▁ ) ▁& & ▁ ( ▁ m ▁= = ▁ 4 ▁ | | ▁ m ▁= = ▁ 6 ▁ | | ▁ m ▁= = ▁ 9 ▁ | | ▁ m ▁= = ▁ 1 1 ▁ ) ▁ ) ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁ d ▁ > = ▁ 1 ▁& & ▁ d ▁< = ▁30 ▁ ) ▁& & ▁ ( ▁ m ▁= = ▁ 1 ▁ | | ▁ m ▁= = ▁ 3 ▁ | | ▁ m ▁= = ▁ 5 ▁ | | ▁ m ▁= = ▁ 7 ▁ | | ▁ @ ▁ m ▁= = ▁ 8 ▁ | | ▁ m ▁= = ▁10 ▁ | | ▁ m ▁= = ▁ 1 2 ▁ ) ▁ ) ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁ d ▁ > = ▁ 1 ▁& & ▁ d ▁< = ▁ 2 8 ▁ ) ▁& & ▁ ( ▁ m ▁= = ▁ 2 ▁ ) ▁ ) ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ d ▁= = ▁ 2 9 ▁& & ▁ m ▁= = ▁ 2 ▁& & ▁ @ ▁ ( ▁ ( ▁ y ▁ % ▁ 4 00 ▁= = ▁0 ▁ ) ▁ | | ▁ ( ▁ y ▁ % ▁ 4 ▁= = ▁0 ▁& & ▁ y ▁ % ▁100 ▁! = ▁0 ▁ ) ▁ ) ▁ ) ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁el se ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁w d ▁ ( ▁int ▁ y ear ▁ , ▁int ▁ mon th ▁ , ▁int ▁ day ▁ ) ▁ { ▁ @ ▁int ▁w day ▁= ▁0 ▁ ; ▁ @ ▁w day ▁= ▁ ( ▁ day ▁+ ▁ ( ▁ ( ▁ 1 5 3 ▁* ▁ ( ▁ mon th ▁+ ▁ 1 2 ▁* ▁ ( ▁ ( ▁ 1 4 ▁ - ▁ mon th ▁ ) ▁ / ▁ 1 2 ▁ ) ▁ - ▁ 3 ▁ ) ▁+ ▁ 2 ▁ ) ▁ / ▁ 5 ▁ ) ▁+ ▁ @ ▁ ( ▁ 3 6 5 ▁* ▁ ( ▁ y ear ▁+ ▁ 4 8 00 ▁ - ▁ ( ▁ ( ▁ 1 4 ▁ - ▁ mon th ▁ ) ▁ / ▁ 1 2 ▁ ) ▁ ) ▁ ) ▁+ ▁ @ ▁ ( ▁ ( ▁ y ear ▁+ ▁ 4 8 00 ▁ - ▁ ( ▁ ( ▁ 1 4 ▁ - ▁ mon th ▁ ) ▁ / ▁ 1 2 ▁ ) ▁ ) ▁ / ▁ 4 ▁ ) ▁ - ▁ @ ▁ ( ▁ ( ▁ y ear ▁+ ▁ 4 8 00 ▁ - ▁ ( ▁ ( ▁ 1 4 ▁ - ▁ mon th ▁ ) ▁ / ▁ 1 2 ▁ ) ▁ ) ▁ / ▁100 ▁ ) ▁+ ▁ @ ▁ ( ▁ ( ▁ y ear ▁+ ▁ 4 8 00 ▁ - ▁ ( ▁ ( ▁ 1 4 ▁ - ▁ mon th ▁ ) ▁ / ▁ 1 2 ▁ ) ▁ ) ▁ / ▁ 4 00 ▁ ) ▁ - ▁32 0 4 5 ▁ ) ▁ % ▁ @ ▁ 7 ▁ ; ▁ @ ▁re tur n ▁w day ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* day ▁ ) ▁ , ▁int ▁ ( ▁* mon th ▁ ) ▁ , ▁int ▁ ( ▁* y ear ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ wDay N o ▁= ▁0 ▁ ; ▁ @ ▁char ▁ day Name s ▁ [ ▁ ] ▁ [ ▁ 1 2 ▁ ] ▁= ▁ { ▁ " M o n day " ▁ , ▁ " T ue s day " ▁ , ▁ " W ed n e s day " ▁ , ▁ " T h u r s day " ▁ , ▁ @ ▁ " F r i day " ▁ , ▁ " S a tur day " ▁ , ▁ " S u n day " ▁ } ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ val id at e Dat e ▁ ( ▁ ( ▁* day ▁ ) ▁ , ▁ ( ▁* mon th ▁ ) ▁ , ▁ ( ▁* y ear ▁ ) ▁ ) ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* day ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* mon th ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ wDay N o ▁= ▁w d ▁ ( ▁ ( ▁* y ear ▁ ) ▁ , ▁ ( ▁* mon th ▁ ) ▁ , ▁ ( ▁* day ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ day Name s ▁ [ ▁ wDay N o ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁root 2 ▁= ▁sqrt ▁ ( ▁ 2 ▁ ) ▁ ; ▁ @ ▁float ▁multiplier ▁= ▁ 2 ▁* ▁ ( ▁ 1 ▁+ ▁root 2 ▁ ) ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁multiplier ▁* ▁ ( ▁* side ▁ ) ▁* ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ b u f fer ▁ [ ▁10 ▁ ] ▁= ▁ { ▁0 ▁ } ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ m e m se t ▁ ( ▁ b u f fer ▁ , ▁ ' 0 ' ▁ , ▁ 9 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 9 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ b u f fer ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ m e m se t ▁ ( ▁ b u f fer ▁ , ▁'*' ▁ , ▁ 9 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ 9 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ b u f fer ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ m e m se t ▁ ( ▁ b u f fer ▁ , ▁ 7 ▁ , ▁ 9 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁10 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ b u f fer ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* w eight ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ b mi ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ( ▁* height ▁ ) ▁ / = ▁100 ▁ ; ▁ @ ▁ b mi ▁= ▁ ( ▁* w eight ▁ ) ▁ / ▁ ( ▁ ( ▁* height ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ b mi ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ b mi ▁< ▁ 1 6 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ b mi ▁< ▁18 .5 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ b mi ▁< ▁25 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ b mi ▁< ▁30 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ) ▁* ▁ ( ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* x ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁pow f ▁ ( ▁ M _ E ▁ , ▁ ( ▁* x ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* x ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ a ▁ ; ▁ @ ▁int ▁* p 1 ▁ ; ▁ @ ▁int ▁* * p 2 ▁ ; ▁ @ ▁ p 1 ▁= ▁& a ▁ ; ▁ @ ▁ p 2 ▁= ▁& p 1 ▁ ; ▁ @ ▁ a ▁= ▁100 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁* p 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁* * p 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁* p 1 ▁= ▁ 2 00 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁* p 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁* * p 2 ▁= ▁ 2 00 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁* * p 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 6 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 7 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 8 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 9 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ im g P art ▁ ; ▁ @ ▁float ▁root 2 ▁ ; ▁ @ ▁float ▁root 1 ▁ ; ▁ @ ▁float ▁disc rim in ant ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁disc rim in ant ▁= ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ - ▁ 4 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁disc rim in ant ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁disc rim in ant ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁root 1 ▁= ▁ ( ▁ - ▁ ( ▁* b ▁ ) ▁+ ▁sqrt ▁ ( ▁disc rim in ant ▁ ) ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁root 2 ▁= ▁ ( ▁ - ▁ ( ▁* b ▁ ) ▁ - ▁sqrt ▁ ( ▁disc rim in ant ▁ ) ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁root 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁root 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁disc rim in ant ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁root 1 ▁= ▁ - ▁ ( ▁* b ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁root 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁root 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁root 1 ▁= ▁ - ▁ ( ▁* b ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ im g P art ▁= ▁sqrt ▁ ( ▁ - d i s c rim in ant ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁root 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 7 ▁ ) ▁= ▁ im g P art ▁ ; ▁ @ ▁ ( ▁* temptemp 8 ▁ ) ▁= ▁root 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 9 ▁ ) ▁= ▁ im g P art ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁next ▁ ; ▁ @ ▁int ▁ c u r r ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ p rev ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁next ▁= ▁0 ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁i ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁next ▁= ▁ c u r r ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁next ▁= ▁ p rev ▁+ ▁ c u r r ▁ ; ▁ @ ▁ p rev ▁= ▁ c u r r ▁ ; ▁ @ ▁ c u r r ▁= ▁next ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁next ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁fl ag ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< = ▁ 1 ▁ ) ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< = ▁sqrt ▁ ( ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁fl ag ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁fl ag ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 7 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 3 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 3 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁float ▁ d if f ▁ ; ▁ @ ▁float ▁sumOf Square s ▁= ▁0 ▁ ; ▁ @ ▁float ▁variance ▁= ▁0 ▁ ; ▁ @ ▁float ▁ m e an ▁ ; ▁ @ ▁float ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁sum ▁= ▁sum ▁+ ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ m e an ▁= ▁sum ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ d if f ▁= ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ ; ▁ @ ▁sumOf Square s ▁+ = ▁ d if f ▁* ▁ d if f ▁ ; ▁ @ ▁ } ▁ @ ▁variance ▁= ▁sumOf Square s ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ m e an ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁variance ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* feet ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ y ard s ▁ ; ▁ @ ▁ ; ▁ @ ▁ y ard s ▁= ▁ ( ▁* feet ▁ ) ▁ / ▁3.0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ y ard s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* fah ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁cel ▁ ; ▁ @ ▁ ; ▁ @ ▁cel ▁= ▁ ( ▁ ( ▁* fah ▁ ) ▁ - ▁32 ▁ ) ▁* ▁ 5 ▁ / ▁ 9 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* fah ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁cel ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* R ▁ ) ▁ , ▁float ▁ ( ▁* r ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁ 3 .141592653589793 2 384 6 ▁* ▁ 3 .141592653589793 2 384 6 ▁ ) ▁* ▁ @ ▁ ( ▁ ( ▁* R ▁ ) ▁* ▁ ( ▁* r ▁ ) ▁* ▁ ( ▁* r ▁ ) ▁ ) ▁* ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁nth Cub ic ▁ ; ▁ @ ▁int ▁temp 2 ▁ ; ▁ @ ▁int ▁temp 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁temp 1 ▁= ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁temp 2 ▁= ▁temp 1 ▁* ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁nth Cub ic ▁= ▁temp 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁nth Cub ic ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number 1 ▁ ) ▁ , ▁int ▁ ( ▁* number 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁total ▁ ; ▁ @ ▁float ▁av era ge ▁ ; ▁ @ ▁ ; ▁ @ ▁total ▁= ▁ ( ▁* number 1 ▁ ) ▁+ ▁ ( ▁* number 2 ▁ ) ▁ ; ▁ @ ▁av era ge ▁= ▁total ▁ / ▁2.0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁total ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁av era ge ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* A ▁ ) ▁ , ▁int ▁ ( ▁* B ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is Divi s ible ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁is Divi s ible ▁= ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ ( ▁* A ▁ ) ▁= = ▁0 ▁ ) ▁& & ▁ ( ▁ ( ▁* number ▁ ) ▁ % ▁ ( ▁* B ▁ ) ▁= = ▁0 ▁ ) ▁ ? ▁ 1 ▁ : ▁0 ▁ ; ▁ @ ▁ if ▁ ( ▁is Divi s ible ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* A ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* B ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* A ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ ( ▁* B ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ a ▁= ▁ ' Z ' ▁ ; ▁ @ ▁int ▁ b ▁= ▁ 4 5 ▁ ; ▁ @ ▁float ▁ c ▁= ▁ 3 4 5 . 0 f ▁ ; ▁ @ ▁double ▁ d ▁= ▁ 7 6 5 4 . 9 0 ▁ ; ▁ @ ▁char ▁str ▁ [ ▁ ] ▁= ▁ " C o de z cl u b " ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ size of ▁ ( ▁ a ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ size of ▁ ( ▁ b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ size of ▁ ( ▁ c ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ size of ▁ ( ▁ d ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ size of ▁ ( ▁str ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁vol um e ▁= ▁ ( ▁4.0 ▁ / ▁3.0 ▁ ) ▁* ▁ 3 .141592653589793 2 384 6 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ s i gn ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁mul ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁< ▁0 ▁& & ▁ ( ▁* b ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ - ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁< ▁0 ▁ | | ▁ ( ▁* b ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ s i gn ▁= ▁ - 1 ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁< ▁0 ▁ ) ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ - ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* b ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁mul ▁+ = ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁mul ▁* = ▁ s i gn ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁mul ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁float ▁ m e an ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* num 1 ▁ ) ▁+ ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ m e an ▁= ▁ ( ▁float ▁ ) ▁result ▁ / ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ m e an ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁ num ▁= ▁ 2 ▁ ; ▁ @ ▁int ▁nth Prime ▁= ▁ 2 ▁ ; ▁ @ ▁w h ile ▁ ( ▁count ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is Prime ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁* ▁i ▁< = ▁ num ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁ % ▁i ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Prime ▁ ) ▁ { ▁ @ ▁nth Prime ▁= ▁ num ▁ ; ▁ @ ▁count ▁= ▁count ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ num ▁= ▁ num ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁nth Prime ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁pro ▁ ; ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁dig ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁pro ▁= ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* n ▁ ) ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁dig ▁= ▁ ( ▁* n ▁ ) ▁ % ▁10 ▁ ; ▁ @ ▁sum ▁+ = ▁dig ▁ ; ▁ @ ▁pro ▁* = ▁dig ▁ ; ▁ @ ▁ ( ▁* n ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ / ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁pro ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁max I d x ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁max I d x ▁= ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁j ▁ ] ▁ > ▁arr ▁ [ ▁max I d x ▁ ] ▁ ) ▁ { ▁ @ ▁max I d x ▁= ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁max I d x ▁! = ▁i ▁ ) ▁ { ▁ @ ▁temp ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁max I d x ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁max I d x ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mp s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁ ; ▁ @ ▁ c onversion Factor ▁= ▁ 2 . 2 3 6 ▁ ; ▁ @ ▁float ▁ mph ▁ ; ▁ @ ▁ ; ▁ @ ▁ mph ▁= ▁ ( ▁* mp s ▁ ) ▁* ▁ c onversion Factor ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ mph ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* de ci mal ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp D e ci mal ▁ ; ▁ @ ▁int ▁ octa l ▁ ; ▁ @ ▁int ▁ place Value ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁temp D e ci mal ▁= ▁ ( ▁* de ci mal ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁temp D e ci mal ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁ octa l ▁= ▁ octa l ▁+ ▁ ( ▁temp D e ci mal ▁ % ▁ 8 ▁ ) ▁* ▁ place Value ▁ ; ▁ @ ▁temp D e ci mal ▁= ▁temp D e ci mal ▁ / ▁ 8 ▁ ; ▁ @ ▁ place Value ▁= ▁ place Value ▁* ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ octa l ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁float ▁sum ▁ ; ▁ @ ▁int ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁ 0.0 f ▁ ; ▁ @ ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁= ▁sum ▁+ ▁ ( ▁ ( ▁float ▁ ) ▁ ( ▁pow ▁ ( ▁count ▁ , ▁ 2 ▁ ) ▁ ) ▁ / ▁ ( ▁float ▁ ) ▁ ( ▁pow ▁ ( ▁count ▁ , ▁ 3 ▁ ) ▁ ) ▁ ) ▁ ; ▁ @ ▁count ▁+ = ▁ 2 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁double ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁double ▁sum ▁= ▁0 ▁ ; ▁ @ ▁double ▁ m e an ▁ ; ▁ @ ▁double ▁sumOf Q u a d s ▁= ▁0 ▁ ; ▁ @ ▁double ▁variance ▁= ▁0 ▁ ; ▁ @ ▁double ▁ k u r t os i s ▁ ; ▁ @ ▁double ▁ stdDev i ation ▁ ; ▁ @ ▁ ; ▁ @ ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁sum ▁= ▁sum ▁+ ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ m e an ▁= ▁sum ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁variance ▁+ = ▁pow ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ , ▁ 2 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁variance ▁ / = ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ stdDev i ation ▁= ▁sqrt ▁ ( ▁variance ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sumOf Q u a d s ▁+ = ▁pow ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ , ▁ 4 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ k u r t os i s ▁= ▁ ( ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁ ( ▁* n ▁ ) ▁+ ▁ 1 ▁ ) ▁* ▁sumOf Q u a d s ▁ ) ▁ / ▁ @ ▁ ( ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ) ▁* ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁ 2 ▁ ) ▁* ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁ 3 ▁ ) ▁* ▁pow ▁ ( ▁ stdDev i ation ▁ , ▁ 4 ▁ ) ▁ ) ▁ - ▁ @ ▁ ( ▁ 3 ▁* ▁pow ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ , ▁ 2 ▁ ) ▁ ) ▁ / ▁ ( ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁ 2 ▁ ) ▁* ▁ ( ▁ ( ▁* n ▁ ) ▁ - ▁ 3 ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ m e an ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁variance ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ stdDev i ation ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ k u r t os i s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁float ▁ p ▁= ▁ 2 ▁* ▁ ( ▁ ( ▁* b ▁ ) ▁+ ▁ ( ▁* s ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ p ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ k e y ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ k e y ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁j ▁= ▁i ▁ - ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁j ▁ > = ▁0 ▁& & ▁arr ▁ [ ▁j ▁ ] ▁< ▁ k e y ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁arr ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁j ▁= ▁j ▁ - ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁arr ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁ k e y ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁sum ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 2 ▁ ; ▁j ▁< = ▁i ▁ / ▁ 2 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁ % ▁j ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁sum ▁= = ▁i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* y ear ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁ le a p ▁= ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 00 ▁= = ▁0 ▁ ) ▁ @ ▁ ? ▁ 1 ▁ @ ▁ : ▁ ( ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁100 ▁= = ▁0 ▁ ) ▁ ? ▁0 ▁ : ▁ ( ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 ▁= = ▁0 ▁ ) ▁ ? ▁ 1 ▁ : ▁0 ▁ ) ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ le a p ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁array ▁ [ ▁10 ▁ ] ▁= ▁ { ▁ 1 ▁ , ▁ 2 ▁ , ▁ 3 ▁ , ▁ 4 ▁ , ▁ 5 ▁ , ▁ 6 ▁ , ▁ 7 ▁ , ▁ 8 ▁ , ▁ 9 ▁ , ▁10 ▁ } ▁ ; ▁ @ ▁int ▁odd _ s um ▁= ▁0 ▁ ; ▁ @ ▁int ▁even _ s um ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁10 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁array ▁ [ ▁i ▁ ] ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁even _ s um ▁+ = ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁odd _ s um ▁+ = ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁even _ s um ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁odd _ s um ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* y ear ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is L e a p Y ear ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 00 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is L e a p Y ear ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁100 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is L e a p Y ear ▁= ▁0 ▁ ; ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* y ear ▁ ) ▁ % ▁ 4 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is L e a p Y ear ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is L e a p Y ear ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* y ear ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁char ▁* st at u s ▁= ▁ ( ▁* num ▁ ) ▁ > ▁0 ▁ ? ▁ " Pos it i ve " ▁ : ▁ " N eg at i ve " ▁ ; ▁ @ ▁char ▁* e ven O dd S t at u s ▁= ▁ ( ▁ ( ▁* num ▁ ) ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ ? ▁ " E ven " ▁ : ▁ " O dd " ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ st at u s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁even O dd S t at u s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* pas cal s ▁ ) ▁ , ▁char ▁ ( ▁* de ci s io n ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ b ar ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁ ; ▁ @ ▁ b ar ▁= ▁ ( ▁* pas cal s ▁ ) ▁ / ▁100 00 0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ b ar ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁ ( ▁* de ci s io n ▁ ) ▁= = ▁ ' y ' ▁ | | ▁ ( ▁* de ci s io n ▁ ) ▁= = ▁ ' Y ' ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁float ▁ ( ▁* s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁ ) ▁ / ▁ ( ▁ 4 ▁* ▁tan ▁ ( ▁ M _ P I ▁ / ▁ ( ▁* n ▁ ) ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< ▁ 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁j ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* c m ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ inches ▁= ▁ ( ▁* c m ▁ ) ▁ / ▁ 2 .5 4 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side 1 ▁ ) ▁ , ▁float ▁ ( ▁* side 2 ▁ ) ▁ , ▁float ▁ ( ▁* side 3 ▁ ) ▁ , ▁float ▁ ( ▁* side 4 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ ( ▁* side 1 ▁ ) ▁+ ▁ ( ▁* side 2 ▁ ) ▁+ ▁ ( ▁* side 3 ▁ ) ▁+ ▁ ( ▁* side 4 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base _ length ▁ ) ▁ , ▁float ▁ ( ▁* height _ length ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ p ar al le lo g r a m _ area ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ p ar al le lo g r a m _ area ▁= ▁ ( ▁* base _ length ▁ ) ▁* ▁ ( ▁* height _ length ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ p ar al le lo g r a m _ area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* b s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ g s ▁ ; ▁ @ ▁float ▁ c v ▁ ; ▁ @ ▁float ▁da ▁ ; ▁ @ ▁float ▁ hra ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b s ▁ ) ▁ > = ▁500 0 ▁ ) ▁ { ▁ @ ▁da ▁= ▁ 1 . 1 ▁* ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ hra ▁= ▁0 . 2 ▁* ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ c v ▁= ▁500 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* b s ▁ ) ▁ > = ▁300 0 ▁ ) ▁ { ▁ @ ▁da ▁= ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ hra ▁= ▁0 . 1 5 ▁* ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ c v ▁= ▁ 4 00 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁da ▁= ▁0 . 9 ▁* ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ hra ▁= ▁0 . 1 ▁* ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ c v ▁= ▁300 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ g s ▁= ▁ ( ▁* b s ▁ ) ▁+ ▁da ▁+ ▁ hra ▁+ ▁ c v ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁da ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ hra ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ c v ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ g s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁even ▁ ; ▁ @ ▁int ▁odd ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁ / ▁ 2 ▁* ▁ 2 ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁even ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁odd ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* se c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 7 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ h h ▁ , ▁ mm ▁ , ▁ s s ▁ ; ▁ @ ▁ ; ▁ @ ▁ h h ▁= ▁ ( ▁* se c ▁ ) ▁ / ▁ 3 6 00 ▁ ; ▁ @ ▁ mm ▁= ▁ ( ▁ ( ▁* se c ▁ ) ▁ - ▁ h h ▁* ▁ 3 6 00 ▁ ) ▁ / ▁ 6 0 ▁ ; ▁ @ ▁ s s ▁= ▁ ( ▁* se c ▁ ) ▁ - ▁ h h ▁* ▁ 3 6 00 ▁ - ▁ mm ▁* ▁ 6 0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* se c ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ h h ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ mm ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ s s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ h h ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ mm ▁ ; ▁ @ ▁ ( ▁* temptemp 7 ▁ ) ▁= ▁ s s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁int ▁sum ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁sum ▁+ = ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁ ) ▁ @ ▁ d if f ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁el se ▁ @ ▁ d if f ▁= ▁ ( ▁* b ▁ ) ▁ - ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ d if f ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁root 2 ▁ ; ▁ @ ▁float ▁root 1 ▁ ; ▁ @ ▁float ▁disc rim in ant ▁ ; ▁ @ ▁ ; ▁ @ ▁disc rim in ant ▁= ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ - ▁ 4 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁disc rim in ant ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁root 1 ▁= ▁ ( ▁ - ▁ ( ▁* b ▁ ) ▁+ ▁sqrt ▁ ( ▁disc rim in ant ▁ ) ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁root 2 ▁= ▁ ( ▁ - ▁ ( ▁* b ▁ ) ▁ - ▁sqrt ▁ ( ▁disc rim in ant ▁ ) ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁root 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁root 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁disc rim in ant ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁root 1 ▁= ▁ - ▁ ( ▁* b ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁root 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp Number ▁ ; ▁ @ ▁int ▁rem ▁= ▁0 ▁ ; ▁ @ ▁int ▁ rev Number ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁temp Number ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁temp Number ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁rem ▁= ▁temp Number ▁ % ▁10 ▁ ; ▁ @ ▁ rev Number ▁= ▁ rev Number ▁* ▁10 ▁+ ▁rem ▁ ; ▁ @ ▁temp Number ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ rev Number ▁= = ▁ ( ▁* number ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* d i agonal O n e ▁ ) ▁ , ▁float ▁ ( ▁* d i agonal T wo ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁result ▁= ▁ ( ▁* d i agonal O n e ▁ ) ▁* ▁ ( ▁* d i agonal T wo ▁ ) ▁ ; ▁ @ ▁result ▁= ▁result ▁ / ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* grad ian s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ de gree s ▁= ▁ ( ▁* grad ian s ▁ ) ▁* ▁0 . 9 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ de gree s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count S p a ce s ▁ ; ▁ @ ▁int ▁count S p e ci al C h ar ▁ ; ▁ @ ▁int ▁count A l p h a b e t ▁ ; ▁ @ ▁int ▁count Digit s ▁ ; ▁ @ ▁int ▁counter ▁ ; ▁ @ ▁count Digit s ▁= ▁count A l p h a b e t ▁= ▁count S p e ci al C h ar ▁= ▁count S p a ce s ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁counter ▁= ▁0 ▁ ; ▁str ▁ [ ▁counter ▁ ] ▁! = ▁ N U L L ▁ ; ▁counter ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str ▁ [ ▁counter ▁ ] ▁ > = ▁ ' 0 ' ▁& & ▁str ▁ [ ▁counter ▁ ] ▁< = ▁ ' 9 ' ▁ ) ▁ @ ▁count Digit s ++ ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁str ▁ [ ▁counter ▁ ] ▁ > = ▁ ' A ' ▁& & ▁str ▁ [ ▁counter ▁ ] ▁< = ▁ ' Z ' ▁ ) ▁ | | ▁ @ ▁ ( ▁str ▁ [ ▁counter ▁ ] ▁ > = ▁ ' a ' ▁& & ▁str ▁ [ ▁counter ▁ ] ▁< = ▁ ' z ' ▁ ) ▁ ) ▁ @ ▁count A l p h a b e t ++ ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁str ▁ [ ▁counter ▁ ] ▁= = ▁ ' ▁ ' ▁ ) ▁ @ ▁count S p a ce s ++ ▁ ; ▁ @ ▁el se ▁ @ ▁count S p e ci al C h ar ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count Digit s ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count A l p h a b e t ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁count S p a ce s ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁count S p e ci al C h ar ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base Side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁sqrt T h r e e T im e s F o u r ▁ ; ▁ @ ▁float ▁ totalS urface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁sqrt T h r e e T im e s F o u r ▁= ▁sqrt ▁ ( ▁ 3 ▁ ) ▁* ▁ 4 ▁ ; ▁ @ ▁ totalS urface A rea ▁= ▁ ( ▁sqrt T h r e e T im e s F o u r ▁ / ▁ 4 ▁ ) ▁* ▁ ( ▁* base Side ▁ ) ▁* ▁ ( ▁* base Side ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ totalS urface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ Str fun ▁ ( ▁char ▁* ptr ▁ ) ▁ { ▁ ; ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁char ▁ b u f f ▁ [ ▁20 ▁ ] ▁= ▁ " He l lo ▁ Fun c tion " ▁ ; ▁ @ ▁ Str fun ▁ ( ▁ b u f f ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* pas cal s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ at m ▁ ; ▁ @ ▁float ▁ pas cal To A t m ▁= ▁10 1 3 2 5 ▁ ; ▁ @ ▁ ; ▁ @ ▁ at m ▁= ▁ ( ▁* pas cal s ▁ ) ▁ / ▁ pas cal To A t m ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ at m ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* speed I n Meter s Per S e con d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁ ; ▁ @ ▁float ▁ speed I n K n o t s ▁ ; ▁ @ ▁ c onversion Factor ▁= ▁ 1 . 9 4 384 ▁ ; ▁ @ ▁ ; ▁ @ ▁ speed I n K n o t s ▁= ▁ ( ▁* speed I n Meter s Per S e con d ▁ ) ▁* ▁ c onversion Factor ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ speed I n K n o t s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁min ▁= ▁0 ▁ , ▁count ▁= ▁0 ▁ , ▁array ▁ [ ▁100 ▁ ] ▁= ▁ { ▁0 ▁ } ▁ , ▁array 1 ▁ [ ▁100 ▁ ] ▁= ▁ { ▁0 ▁ } ▁ ; ▁ @ ▁vo id ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* count ▁ ) ▁ , ▁int ▁ ( ▁* array ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ n ▁ ; ▁ @ ▁int ▁ t ▁ ; ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁array 1 ▁ [ ▁i ▁ ] ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁0 ▁ ; ▁ k ▁< ▁ 3 ▁ ; ▁ k ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁min ▁= ▁array ▁ [ ▁i ▁ ] ▁ % ▁10 ▁ ; ▁ @ ▁ t ▁= ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁+ ▁ 1 ▁ ; ▁j ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁min ▁ > ▁ ( ▁array ▁ [ ▁j ▁ ] ▁ % ▁10 ▁ ) ▁ ) ▁ { ▁ @ ▁min ▁= ▁array ▁ [ ▁j ▁ ] ▁ % ▁10 ▁ ; ▁ @ ▁ t ▁= ▁j ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁temp ▁= ▁array 1 ▁ [ ▁ t ▁ ] ▁ ; ▁ @ ▁array 1 ▁ [ ▁ t ▁ ] ▁= ▁array 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁array 1 ▁ [ ▁i ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁temp ▁= ▁array ▁ [ ▁ t ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁ t ▁ ] ▁= ▁array ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁array ▁ [ ▁i ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁j ++ ▁ ) ▁array ▁ [ ▁j ▁ ] ▁= ▁array ▁ [ ▁j ▁ ] ▁ / ▁10 ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁array 1 ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁! = ▁0 ▁& & ▁ ( ▁* a ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ / ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* octa l ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁last _ digit ▁ ; ▁ @ ▁int ▁ base ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁dec i mal ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁w h ile ▁ ( ▁ ( ▁* octa l ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁last _ digit ▁= ▁ ( ▁* octa l ▁ ) ▁ % ▁10 ▁ ; ▁ @ ▁ ( ▁* octa l ▁ ) ▁ / = ▁10 ▁ ; ▁ @ ▁dec i mal ▁+ = ▁last _ digit ▁* ▁ base ▁ ; ▁ @ ▁ base ▁* = ▁ 8 ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁dec i mal ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁numDigits ▁ ; ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁int ▁original Num ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁double ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁original Num ▁= ▁i ▁ ; ▁ @ ▁numDigits ▁= ▁ ( ▁int ▁ ) ▁ lo g 1 0 ▁ ( ▁i ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁w h ile ▁ ( ▁original Num ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁re ma inde r ▁= ▁original Num ▁ % ▁10 ▁ ; ▁ @ ▁sum ▁+ = ▁pow ▁ ( ▁re ma inde r ▁ , ▁numDigits ▁ ) ▁ ; ▁ @ ▁original Num ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁int ▁ ) ▁sum ▁= = ▁i ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁i - - ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁i ▁ > = ▁ 1 ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* size ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* size ▁ ) ▁ - ▁i ▁ - ▁ 1 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁j ▁ ] ▁ > ▁arr ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁temp ▁= ▁arr ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁j ▁ ] ▁= ▁arr ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* size ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁next ▁ ; ▁ @ ▁int ▁ second ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ first ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁count ▁< ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁count ▁< = ▁ 1 ▁ ) ▁ { ▁ @ ▁next ▁= ▁count ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁next ▁= ▁ first ▁+ ▁ second ▁ ; ▁ @ ▁ first ▁= ▁ second ▁ ; ▁ @ ▁ second ▁= ▁next ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁next ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* num 1 ▁ ) ▁ , ▁float ▁ ( ▁* num 2 ▁ ) ▁ , ▁float ▁ ( ▁* num 3 ▁ ) ▁ , ▁float ▁ ( ▁* num 4 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ divi s io n R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num 3 ▁ ) ▁+ ▁ ( ▁* num 4 ▁ ) ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ divi s io n R esult ▁= ▁ ( ▁ ( ▁* num 1 ▁ ) ▁+ ▁ ( ▁* num 2 ▁ ) ▁ ) ▁ / ▁ ( ▁ ( ▁* num 3 ▁ ) ▁+ ▁ ( ▁* num 4 ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ divi s io n R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ - 1 ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* start ▁ ) ▁ , ▁int ▁ ( ▁* end ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* end ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁counter ▁= ▁ ( ▁* start ▁ ) ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁ if ▁ ( ▁counter ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁counter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁counter ++ ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁counter ▁< = ▁ ( ▁* end ▁ ) ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ch ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁ascii Value ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* ch ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ascii Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ string ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁freq ue n cy ▁ [ ▁25 5 ▁ ] ▁ ; ▁ @ ▁int ▁ascii ▁ ; ▁ @ ▁int ▁min ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁25 5 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁freq ue n cy ▁ [ ▁i ▁ ] ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁ string ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ascii ▁= ▁ string ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁freq ue n cy ▁ [ ▁ascii ▁ ] ▁ ++ ▁ ; ▁ @ ▁ } ▁ @ ▁min ▁= ▁32 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 3 3 ▁ ; ▁i ▁< ▁ 1 2 7 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁freq ue n cy ▁ [ ▁i ▁ ] ▁< ▁freq ue n cy ▁ [ ▁min ▁ ] ▁& & ▁freq ue n cy ▁ [ ▁i ▁ ] ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁min ▁= ▁i ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁min ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁freq ue n cy ▁ [ ▁min ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ row s ▁= ▁ 8 ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ c ▁ ; ▁ @ ▁int ▁ b ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁ a ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ row s ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ cont in ue ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁i ▁= = ▁ 2 ▁& & ▁j ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ cont in ue ▁ ; ▁ @ ▁ } ▁ @ ▁ c ▁= ▁ a ▁+ ▁ b ▁ ; ▁ @ ▁ a ▁= ▁ b ▁ ; ▁ @ ▁ b ▁= ▁ c ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ c ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁result ▁ ; ▁ @ ▁int ▁ m o d if i ed A ▁ ; ▁ @ ▁ ; ▁ @ ▁ m o d if i ed A ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁result ▁= ▁ ~ m o d if i ed A ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* row s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ k ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* row s ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁ ( ▁* row s ▁ ) ▁ - ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁ k ▁= ▁ 1 ▁ ; ▁ k ▁< = ▁i ▁ ; ▁ k ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* w eight ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ h ▁ ; ▁ @ ▁float ▁ B M I ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ h ▁= ▁ ( ▁* height ▁ ) ▁ / ▁100 ▁* ▁ ( ▁* height ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ B M I ▁= ▁ ( ▁* w eight ▁ ) ▁ / ▁ h ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ B M I ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ value ▁= ▁ 7 8 9 ▁ ; ▁ @ ▁int ▁dec Value ▁= ▁ value ▁ ; ▁ @ ▁int ▁oct Value ▁= ▁ value ▁ ; ▁ @ ▁int ▁ h e x Value ▁= ▁ value ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁dec Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁oct Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ h e x Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ h e x Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* upper L im it ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁is Prime ▁ ; ▁ @ ▁int ▁div ▁ ; ▁ @ ▁int ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* upper L im it ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁ num ▁= ▁ 3 ▁ ; ▁ num ▁< ▁ ( ▁* upper L im it ▁ ) ▁ ; ▁ num ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁div ▁= ▁ 3 ▁ ; ▁div ▁* ▁div ▁< = ▁ num ▁ ; ▁div ▁+ = ▁ 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ num ▁ % ▁div ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁is Prime ▁= ▁0 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁is Prime ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁print P attern 1 ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ row ▁< = ▁ n ▁ ; ▁ row ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁space ▁= ▁ n ▁ - ▁ row ▁ ; ▁space ▁ > ▁0 ▁ ; ▁space - - ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁int ▁ num ▁= ▁ 1 ▁ ; ▁ num ▁< = ▁ row ▁ ; ▁ num ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁print P attern 2 ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ row ▁< = ▁ n ▁ ; ▁ row ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁ num ▁= ▁ 1 ▁ ; ▁ num ▁< = ▁ n ▁ - ▁ row ▁+ ▁ 1 ▁ ; ▁ num ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁vo id ▁print P attern 3 ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ row ▁< = ▁ n ▁ ; ▁ row ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁int ▁space ▁= ▁ 1 ▁ ; ▁space ▁< ▁ row ▁ ; ▁space ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁int ▁ num ▁= ▁ row ▁ ; ▁ num ▁ > = ▁ 1 ▁ ; ▁ num - - ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁print P attern 1 ▁ ( ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁print P attern 2 ▁ ( ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁print P attern 3 ▁ ( ▁ ( ▁* n ▁ ) ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ p h i ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ p h i ▁= ▁ ( ▁ 1 ▁+ ▁sqrt ▁ ( ▁ 5 ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁area ▁= ▁ ( ▁sqrt ▁ ( ▁ 3 ▁ ) ▁ / ▁ 4 ▁ ) ▁* ▁ ( ▁ 5 ▁* ▁ ( ▁* side ▁ ) ▁* ▁ ( ▁* side ▁ ) ▁ ) ▁ / ▁ p h i ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ a ▁= ▁ ' A ' ▁ ; ▁ @ ▁int ▁ b ▁= ▁ 1 2 0 ▁ ; ▁ @ ▁float ▁ c ▁= ▁ 1 2 3 . 0 f ▁ ; ▁ @ ▁double ▁ d ▁= ▁ 1 2 2 2 . 9 0 ▁ ; ▁ @ ▁char ▁str ▁ [ ▁ ] ▁= ▁ " He l lo " ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ size of ▁ ( ▁ a ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ size of ▁ ( ▁ b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ size of ▁ ( ▁ c ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ size of ▁ ( ▁ d ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ size of ▁ ( ▁str ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁cnt ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁cnt ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁do ▁ { ▁ @ ▁cnt ++ ▁ ; ▁ @ ▁ ( ▁* num ▁ ) ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁ ( ▁* num ▁ ) ▁ > ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁cnt ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* num ▁ ) ▁& ▁ 1 ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* dd ▁ ) ▁ , ▁int ▁ ( ▁* mm ▁ ) ▁ , ▁int ▁ ( ▁* y y ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* y y ▁ ) ▁ > = ▁ 1 9 00 ▁& & ▁ ( ▁* y y ▁ ) ▁< = ▁ 9 9 9 9 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* mm ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* mm ▁ ) ▁< = ▁ 1 2 ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* dd ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* dd ▁ ) ▁< = ▁ 3 1 ▁ ) ▁& & ▁ @ ▁ ( ▁ ( ▁* mm ▁ ) ▁= = ▁ 1 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 3 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 5 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 7 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 8 ▁ | | ▁ @ ▁ ( ▁* mm ▁ ) ▁= = ▁10 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 1 2 ▁ ) ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁ ( ▁* dd ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* dd ▁ ) ▁< = ▁30 ▁ ) ▁& & ▁ @ ▁ ( ▁ ( ▁* mm ▁ ) ▁= = ▁ 4 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 6 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 9 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 1 1 ▁ ) ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁ ( ▁* dd ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* dd ▁ ) ▁< = ▁ 2 8 ▁ ) ▁& & ▁ ( ▁ ( ▁* mm ▁ ) ▁= = ▁ 2 ▁ ) ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁* dd ▁ ) ▁= = ▁ 2 9 ▁& & ▁ ( ▁* mm ▁ ) ▁= = ▁ 2 ▁& & ▁ @ ▁ ( ▁ ( ▁* y y ▁ ) ▁ % ▁ 4 00 ▁= = ▁0 ▁ | | ▁ ( ▁ ( ▁* y y ▁ ) ▁ % ▁ 4 ▁= = ▁0 ▁& & ▁ ( ▁* y y ▁ ) ▁ % ▁100 ▁! = ▁0 ▁ ) ▁ ) ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* R ▁ ) ▁ , ▁float ▁ ( ▁* r ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ square R ▁ ; ▁ @ ▁float ▁double P i ▁ ; ▁ @ ▁float ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁double P i ▁= ▁ 2 ▁* ▁ 3 .141592653589793 2 384 6 ▁ ; ▁ @ ▁ square R ▁= ▁ ( ▁* r ▁ ) ▁* ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁vol um e ▁= ▁double P i ▁* ▁ 3 .141592653589793 2 384 6 ▁* ▁ ( ▁* R ▁ ) ▁* ▁ square R ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁vol um e ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁arr ▁ [ ▁ 1 ▁ ] ▁ ; ▁ @ ▁arr ▁ [ ▁0 ▁ ] ▁= ▁100 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁arr ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁arr ▁ [ ▁0 ▁ ] ▁= ▁ 2 00 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁arr ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* inches ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c onversion Factor ▁ ; ▁ @ ▁float ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ c onversion Factor ▁= ▁1.0 ▁ / ▁12.0 ▁ ; ▁ @ ▁ feet ▁= ▁ ( ▁* inches ▁ ) ▁* ▁ c onversion Factor ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ feet ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* pos ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁arr ▁ [ ▁100 ▁ ] ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* pos ▁ ) ▁ - ▁ 1 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁arr ▁ [ ▁i ▁ ] ▁= ▁arr ▁ [ ▁i ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁* n ▁ ) ▁ - - ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁arr ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ le n 1 ▁ ; ▁ @ ▁int ▁ le n ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ le n ▁= ▁0 ▁ ; ▁str ▁ [ ▁ le n ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁ le n ++ ▁ ) ▁ @ ▁ ; ▁ @ ▁ le n 1 ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁ le n ▁ - ▁ le n 1 ▁ ) ▁ ; ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str ▁ [ ▁i ▁ ] ▁= = ▁str ▁ [ ▁i ▁+ ▁ 1 ▁ ] ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁i ▁ ; ▁j ▁< ▁ ( ▁ le n ▁ - ▁ le n 1 ▁ ) ▁ ; ▁j ++ ▁ ) ▁str ▁ [ ▁j ▁ ] ▁= ▁str ▁ [ ▁j ▁+ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ le n 1 ++ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* str ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< string . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ ch 1 ▁ [ ▁50 ▁ ] ▁= ▁ " C o de z " ▁ ; ▁ @ ▁char ▁ ch 2 ▁ [ ▁50 ▁ ] ▁= ▁ " C l u b " ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ch 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ch 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁str c at ▁ ( ▁ ch 1 ▁ , ▁ ch 2 ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ch 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num 1 ▁ ) ▁ , ▁int ▁ ( ▁* num 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁ b ▁ ; ▁ @ ▁int ▁ a ▁ ; ▁ @ ▁ ; ▁ @ ▁ ( ▁* num 1 ▁ ) ▁= ▁ f a b s ▁ ( ▁ ( ▁* num 1 ▁ ) ▁ ) ▁ ; ▁ @ ▁ ( ▁* num 2 ▁ ) ▁= ▁ f a b s ▁ ( ▁ ( ▁* num 2 ▁ ) ▁ ) ▁ ; ▁ @ ▁ a ▁= ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ b ▁= ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁ b ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁temp ▁= ▁ b ▁ ; ▁ @ ▁ b ▁= ▁ a ▁ % ▁ b ▁ ; ▁ @ ▁ a ▁= ▁temp ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ a ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* num 1 ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* num 2 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* feet ▁ ) ▁ , ▁char ▁ ( ▁* cont in ue C onversion ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ inches ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁ ; ▁ @ ▁ inches ▁= ▁ ( ▁* feet ▁ ) ▁* ▁12.0 f ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ inches ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁ ( ▁* cont in ue C onversion ▁ ) ▁= = ▁ ' Y ' ▁ | | ▁ ( ▁* cont in ue C onversion ▁ ) ▁= = ▁ ' y ' ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁add T wo Number s ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ { ▁ @ ▁w h ile ▁ ( ▁ y ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁ x ++ ▁ ; ▁ @ ▁ y - - ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ x ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁ b ▁= ▁20 ▁ ; ▁ @ ▁int ▁ a ▁= ▁10 ▁ ; ▁ @ ▁sum ▁= ▁add T wo Number s ▁ ( ▁ a ▁ , ▁ b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* s ▁ ) ▁ , ▁float ▁ ( ▁* s l ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁float ▁ lateral A rea ▁ ; ▁ @ ▁float ▁ base A rea ▁ ; ▁ @ ▁float ▁pi ▁= ▁3.14159 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ base A rea ▁= ▁ ( ▁ 3 ▁* ▁sqrt ▁ ( ▁ 3 ▁ ) ▁ / ▁ 2 ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁ ; ▁ @ ▁ lateral A rea ▁= ▁ 6 ▁* ▁ ( ▁ ( ▁* s ▁ ) ▁* ▁ ( ▁* s l ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ surface A rea ▁= ▁ base A rea ▁+ ▁ lateral A rea ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁double ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁double ▁sum ▁= ▁0 ▁ ; ▁ @ ▁double ▁ m e an ▁ ; ▁ @ ▁double ▁variance ▁= ▁0 ▁ ; ▁ @ ▁double ▁sumOf Square s ▁= ▁0 ▁ ; ▁ @ ▁double ▁ stdDev i ation ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁sum ▁+ = ▁arr ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ } ▁ @ ▁ m e an ▁= ▁sum ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁sumOf Square s ▁+ = ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ ) ▁* ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ - ▁ m e an ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁variance ▁= ▁sumOf Square s ▁ / ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ stdDev i ation ▁= ▁sqrt ▁ ( ▁variance ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ m e an ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁variance ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ stdDev i ation ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ an d R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ an d R esult ▁= ▁ ( ▁* c ▁ ) ▁& ▁ 1 5 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ an d R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁str 2 ▁ [ ▁20 ▁ ] ▁ ; ▁ @ ▁char ▁str 1 ▁ [ ▁20 ▁ ] ▁ ; ▁ @ ▁int ▁ n o t E q u al ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁str 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁str 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ | | ▁str 2 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁str 2 ▁ [ ▁i ▁ ] ▁ | | ▁ ( ▁str 1 ▁ [ ▁i ▁ ] ▁= = ▁'\ 0 ' ▁& & ▁str 2 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ | | ▁ @ ▁ ( ▁str 2 ▁ [ ▁i ▁ ] ▁= = ▁'\ 0 ' ▁& & ▁str 1 ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ) ▁ ) ▁ { ▁ @ ▁ n o t E q u al ▁= ▁ 1 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ n o t E q u al ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* g i ven Number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ ext r a c t ed Digit ▁ ; ▁ @ ▁int ▁ digit s S um ▁= ▁0 ▁ ; ▁ @ ▁int ▁ digit s Pro duc t ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁ ; ▁ ( ▁* g i ven Number ▁ ) ▁! = ▁0 ▁ ; ▁ ( ▁* g i ven Number ▁ ) ▁= ▁ ( ▁* g i ven Number ▁ ) ▁ / ▁10 ▁ ) ▁ { ▁ @ ▁ ext r a c t ed Digit ▁= ▁ ( ▁* g i ven Number ▁ ) ▁ % ▁10 ▁ ; ▁ @ ▁ digit s S um ▁= ▁ digit s S um ▁+ ▁ ext r a c t ed Digit ▁ ; ▁ @ ▁ digit s Pro duc t ▁= ▁ digit s Pro duc t ▁* ▁ ext r a c t ed Digit ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ digit s S um ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ digit s Pro duc t ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* base ▁ ) ▁ , ▁float ▁ ( ▁* height ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁area ▁= ▁0 .5 ▁* ▁ ( ▁* base ▁ ) ▁* ▁ ( ▁* height ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ Str fun ▁ ( ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁ Str fun ▁ ( ▁ ) ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁float ▁mul t _ a b ▁ ; ▁ @ ▁float ▁sum _ c d ▁ ; ▁ @ ▁ ; ▁ @ ▁sum _ c d ▁= ▁ ( ▁* c ▁ ) ▁+ ▁ ( ▁* d ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁sum _ c d ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁mul t _ a b ▁= ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁result ▁= ▁mul t _ a b ▁ / ▁sum _ c d ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* ed ge ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁area ▁= ▁ ( ▁* ed ge ▁ ) ▁* ▁ ( ▁* ed ge ▁ ) ▁ ; ▁ @ ▁area ▁= ▁area ▁* ▁ 6 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* pas cal s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ b ar ▁ ; ▁ @ ▁ ; ▁ @ ▁ b ar ▁= ▁ ( ▁* pas cal s ▁ ) ▁ / ▁100 00 0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ b ar ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁* ▁ 2 ▁ - ▁ 1 ▁ ; ▁ @ ▁put s ▁ ( ▁"\ n --------------- --------------- --------------\ n " ▁ ) ▁ ; ▁ @ ▁int ▁space sIn C urrent Row ▁ ; ▁ @ ▁int ▁col sIn C urrent Row ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁space sIn C urrent Row ▁= ▁ ( ▁ row ▁ - ▁ 1 ▁ ) ▁* ▁ 2 ▁ ; ▁ @ ▁col sIn C urrent Row ▁= ▁max Col s ▁ - ▁ ( ▁ row ▁ - ▁ 1 ▁ ) ▁* ▁ 2 ▁ ; ▁ @ ▁int ▁space ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁col ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ if ▁ ( ▁col ▁= = ▁ 1 ▁ | | ▁col ▁= = ▁col sIn C urrent Row ▁ | | ▁ row ▁= = ▁ 1 ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁* ▁ 2 ▁ - ▁ 1 ▁ ; ▁ @ ▁put s ▁ ( ▁"\ n --------------- --------------- --------------\ n " ▁ ) ▁ ; ▁ @ ▁int ▁space sIn C urrent Row ▁ ; ▁ @ ▁int ▁col sIn C urrent Row ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁space sIn C urrent Row ▁= ▁ ( ▁ ( ▁* max Row s ▁ ) ▁ - ▁ row ▁ ) ▁* ▁ 2 ▁ ; ▁ @ ▁col sIn C urrent Row ▁= ▁max Col s ▁ - ▁space sIn C urrent Row ▁ ; ▁ @ ▁int ▁space ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁int ▁col ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ if ▁ ( ▁col ▁= = ▁ 1 ▁ | | ▁col ▁= = ▁col sIn C urrent Row ▁ | | ▁ row ▁= = ▁ ( ▁* max Row s ▁ ) ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* l ower ▁ ) ▁ , ▁int ▁ ( ▁* upper ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ num ▁ ; ▁ @ ▁float ▁ n ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* upper ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ num ▁= ▁ ( ▁* l ower ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁ num ▁< = ▁ ( ▁* upper ▁ ) ▁ ) ▁ { ▁ @ ▁ n ▁= ▁ ( ▁ - 1 ▁+ ▁sqrt f ▁ ( ▁ 1 ▁+ ▁ 8 ▁* ▁ num ▁ ) ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ if ▁ ( ▁floor f ▁ ( ▁ n ▁ ) ▁= = ▁ n ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ num ++ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* dd ▁ ) ▁ , ▁int ▁ ( ▁* mm ▁ ) ▁ , ▁int ▁ ( ▁* y y ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁isValid ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁ ( ▁* y y ▁ ) ▁ > = ▁ 1 9 00 ▁& & ▁ ( ▁* y y ▁ ) ▁< = ▁ 9 9 9 9 ▁ ) ▁& & ▁ @ ▁ ( ▁ ( ▁ ( ▁* mm ▁ ) ▁= = ▁ 1 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 3 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 5 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 7 ▁ | | ▁ @ ▁ ( ▁* mm ▁ ) ▁= = ▁ 8 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁10 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 1 2 ▁ ) ▁& & ▁ @ ▁ ( ▁ ( ▁* dd ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* dd ▁ ) ▁< = ▁ 3 1 ▁ ) ▁ ) ▁ | | ▁ @ ▁ ( ▁ ( ▁ ( ▁* mm ▁ ) ▁= = ▁ 4 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 6 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 9 ▁ | | ▁ ( ▁* mm ▁ ) ▁= = ▁ 1 1 ▁ ) ▁& & ▁ @ ▁ ( ▁ ( ▁* dd ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* dd ▁ ) ▁< = ▁30 ▁ ) ▁ ) ▁ | | ▁ @ ▁ ( ▁ ( ▁ ( ▁* mm ▁ ) ▁= = ▁ 2 ▁ ) ▁& & ▁ @ ▁ ( ▁ ( ▁ ( ▁* dd ▁ ) ▁ > = ▁ 1 ▁& & ▁ ( ▁* dd ▁ ) ▁< = ▁ 2 8 ▁ ) ▁ | | ▁ @ ▁ ( ▁ ( ▁* dd ▁ ) ▁= = ▁ 2 9 ▁& & ▁ @ ▁ ( ▁ ( ▁* y y ▁ ) ▁ % ▁ 4 00 ▁= = ▁0 ▁ | | ▁ ( ▁ ( ▁* y y ▁ ) ▁ % ▁ 4 ▁= = ▁0 ▁& & ▁ ( ▁* y y ▁ ) ▁ % ▁100 ▁! = ▁0 ▁ ) ▁ ) ▁ ) ▁ ) ▁ ) ▁ ) ▁ { ▁ @ ▁isValid ▁= ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁isValid ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁mul ▁= ▁0 ▁ ; ▁ @ ▁int ▁loop ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ - ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁loop ▁= ▁ 1 ▁ ; ▁loop ▁< = ▁ ( ▁* b ▁ ) ▁ ; ▁loop ++ ▁ ) ▁ { ▁ @ ▁mul ▁+ = ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁mul ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* b s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ g s ▁ ; ▁ @ ▁float ▁ c v ▁ ; ▁ @ ▁float ▁da ▁ ; ▁ @ ▁float ▁ hra ▁ ; ▁ @ ▁int ▁ c at eg o ry ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* b s ▁ ) ▁< ▁300 0 ▁ ) ▁ @ ▁ c at eg o ry ▁= ▁ 1 ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁* b s ▁ ) ▁ > = ▁300 0 ▁& & ▁ ( ▁* b s ▁ ) ▁< ▁500 0 ▁ ) ▁ @ ▁ c at eg o ry ▁= ▁ 2 ▁ ; ▁ @ ▁el se ▁ @ ▁ c at eg o ry ▁= ▁ 3 ▁ ; ▁ @ ▁sw it ch ▁ ( ▁ c at eg o ry ▁ ) ▁ { ▁ @ ▁ case ▁ 1 : ▁ @ ▁da ▁= ▁0 . 9 ▁* ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ hra ▁= ▁0 . 1 ▁* ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ c v ▁= ▁300 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 2 : ▁ @ ▁da ▁= ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ hra ▁= ▁0 . 1 5 ▁* ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ c v ▁= ▁ 4 00 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 3 : ▁ @ ▁da ▁= ▁ 1 . 1 ▁* ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ hra ▁= ▁0 . 2 ▁* ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ c v ▁= ▁500 ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ @ ▁ g s ▁= ▁ ( ▁* b s ▁ ) ▁+ ▁da ▁+ ▁ hra ▁+ ▁ c v ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* b s ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁da ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ hra ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ c v ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ g s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a m ount ▁ ) ▁ , ▁float ▁ ( ▁* rate ▁ ) ▁ , ▁float ▁ ( ▁* time ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ s i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ s i ▁= ▁ ( ▁ ( ▁* a m ount ▁ ) ▁* ▁ ( ▁* rate ▁ ) ▁* ▁ ( ▁* time ▁ ) ▁ ) ▁ / ▁100 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ s i ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* c ▁ ) ▁= = ▁0 ▁ | | ▁ ( ▁* d ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁ ( ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ ) ▁ / ▁ ( ▁ ( ▁* c ▁ ) ▁* ▁ ( ▁* d ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁root ▁ ; ▁ @ ▁ ; ▁ @ ▁root ▁= ▁sqrt ▁ ( ▁ ( ▁float ▁ ) ▁ ( ▁* num ▁ ) ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁floor ▁ ( ▁root ▁ ) ▁= = ▁ ce i l ▁ ( ▁root ▁ ) ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* x ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ n eg at i ve ▁ ; ▁ @ ▁float ▁ posit i ve ▁ ; ▁ @ ▁float ▁ de l t a ▁ ; ▁ @ ▁float ▁total ▁ ; ▁ @ ▁ ; ▁ @ ▁ posit i ve ▁= ▁exp f ▁ ( ▁ ( ▁* x ▁ ) ▁ ) ▁ ; ▁ @ ▁ n eg at i ve ▁= ▁exp f ▁ ( ▁ - ▁ ( ▁* x ▁ ) ▁ ) ▁ ; ▁ @ ▁total ▁= ▁ posit i ve ▁+ ▁ n eg at i ve ▁ ; ▁ @ ▁ de l t a ▁= ▁ posit i ve ▁ - ▁ n eg at i ve ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁total ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ de l t a ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* count ▁ ) ▁ , ▁float ▁ ( ▁* number s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁float ▁swap ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ } ▁ @ ▁i ▁= ▁0 ▁ ; ▁ @ ▁w h ile ▁ ( ▁i ▁< ▁ ( ▁* count ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁i ▁= = ▁0 ▁ | | ▁ number s ▁ [ ▁i ▁ - ▁ 1 ▁ ] ▁< = ▁ number s ▁ [ ▁i ▁ ] ▁ ) ▁ { ▁ @ ▁i ++ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁swap ▁= ▁ number s ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ number s ▁ [ ▁i ▁ ] ▁= ▁ number s ▁ [ ▁i ▁ - ▁ 1 ▁ ] ▁ ; ▁ @ ▁ number s ▁ [ ▁i ▁ - ▁ 1 ▁ ] ▁= ▁swap ▁ ; ▁ @ ▁i - - ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* count ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ number s ▁ [ ▁i ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* c ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* b ▁ ) ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁ > ▁ ( ▁* c ▁ ) ▁ ) ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁ > ▁ ( ▁* c ▁ ) ▁ ) ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁large st ▁= ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁large st ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁float ▁pi ▁= ▁3.14159 ▁ ; ▁ @ ▁ ; ▁ @ ▁ surface A rea ▁= ▁ 4 ▁* ▁pi ▁* ▁pow ▁ ( ▁ ( ▁* radius ▁ ) ▁ , ▁ 2 ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁temp R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁temp R esult ▁= ▁ ( ▁* num ▁ ) ▁ / ▁ 1 0.0 f ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁int ▁ ) ▁temp R esult ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* val ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ c Val ▁ ; ▁ @ ▁float ▁ f Val ▁ ; ▁ @ ▁ ; ▁ @ ▁ f Val ▁= ▁floor ▁ ( ▁ ( ▁* val ▁ ) ▁ ) ▁ ; ▁ @ ▁ c Val ▁= ▁ ce i l ▁ ( ▁ ( ▁* val ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ f Val ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ c Val ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁sum ▁+ = ▁i ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* h o u r ▁ ) ▁ , ▁int ▁ ( ▁* minute ▁ ) ▁ , ▁int ▁ ( ▁* second ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* h o u r ▁ ) ▁ > = ▁0 ▁& & ▁ ( ▁* h o u r ▁ ) ▁< = ▁ 2 3 ▁& & ▁ ( ▁* minute ▁ ) ▁ > = ▁0 ▁& & ▁ ( ▁* minute ▁ ) ▁< = ▁ 5 9 ▁& & ▁ @ ▁ ( ▁* second ▁ ) ▁ > = ▁0 ▁& & ▁ ( ▁* second ▁ ) ▁< = ▁ 5 9 ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* h o u r ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* minute ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ( ▁* second ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁is Prime ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁ if ▁ ( ▁ n ▁< = ▁ 1 ▁ ) ▁re tur n ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 2 ▁ ; ▁j ▁* ▁j ▁< = ▁ n ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ n ▁ % ▁j ▁= = ▁0 ▁ ) ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 2 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁! i s Prime ▁ ( ▁i ▁ ) ▁ ) ▁ { ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 6 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 7 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁root 2 ▁ ; ▁ @ ▁float ▁root 1 ▁ ; ▁ @ ▁float ▁disc rim in ant ▁ ; ▁ @ ▁float ▁i mag P art ▁ ; ▁ @ ▁float ▁re al P art ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁disc rim in ant ▁= ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* b ▁ ) ▁ - ▁ 4 ▁* ▁ ( ▁* a ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁disc rim in ant ▁ > ▁0 ▁ ) ▁ { ▁ @ ▁root 1 ▁= ▁ ( ▁ - ▁ ( ▁* b ▁ ) ▁+ ▁sqrt ▁ ( ▁disc rim in ant ▁ ) ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁root 2 ▁= ▁ ( ▁ - ▁ ( ▁* b ▁ ) ▁ - ▁sqrt ▁ ( ▁disc rim in ant ▁ ) ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁root 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁root 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁disc rim in ant ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁root 1 ▁= ▁root 2 ▁= ▁ - ▁ ( ▁* b ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁root 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁re al P art ▁= ▁ - ▁ ( ▁* b ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁i mag P art ▁= ▁sqrt ▁ ( ▁ - d i s c rim in ant ▁ ) ▁ / ▁ ( ▁ 2 ▁* ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁re al P art ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁i mag P art ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁re al P art ▁ ; ▁ @ ▁ ( ▁* temptemp 7 ▁ ) ▁= ▁i mag P art ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* ge nde r ▁ ) ▁ , ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' M ' ▁ | | ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' m ' ▁ ) ▁ @ ▁ ? ▁ " M a le " ▁ @ ▁ : ▁ ( ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' F ' ▁ | | ▁ ( ▁* ge nde r ▁ ) ▁= = ▁ ' f ' ▁ ) ▁ @ ▁ ? ▁ " F e mal e " ▁ @ ▁ : ▁ " U n s p e c if i ed ▁ G end e r " ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ - 1 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁ 2 ▁* ▁ ( ▁* n ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁j ▁= = ▁i ▁ | | ▁j ▁= = ▁ 2 ▁* ▁ ( ▁* n ▁ ) ▁ - ▁i ▁+ ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ ( ▁* n ▁ ) ▁ - ▁ 1 ▁ ; ▁i ▁ > = ▁ 1 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁ 2 ▁* ▁ ( ▁* n ▁ ) ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁j ▁= = ▁i ▁ | | ▁j ▁= = ▁ 2 ▁* ▁ ( ▁* n ▁ ) ▁ - ▁i ▁+ ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side A ▁ ) ▁ , ▁float ▁ ( ▁* side B ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁total Per imeter ▁ ; ▁ @ ▁ ; ▁ @ ▁total Per imeter ▁= ▁ 2 ▁* ▁ ( ▁ ( ▁* side A ▁ ) ▁+ ▁ ( ▁* side B ▁ ) ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁total Per imeter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* mm ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ in ▁ ; ▁ @ ▁ ; ▁ @ ▁ in ▁= ▁ ( ▁* mm ▁ ) ▁ / ▁25 . 4 ▁ ; ▁ @ ▁ in ▁= ▁ ( ▁int ▁ ) ▁ ( ▁ in ▁* ▁100 ▁+ ▁0 .5 ▁ ) ▁ / ▁ 1 00.0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* mm ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ in ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* ch oi ce ▁ ) ▁ , ▁float ▁ ( ▁* f h ▁ ) ▁ , ▁float ▁ ( ▁* cl ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* ch oi ce ▁ ) ▁= = ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ( ▁* cl ▁ ) ▁= ▁ ( ▁ ( ▁* f h ▁ ) ▁ - ▁32 ▁ ) ▁ / ▁ 1 . 8 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* cl ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ if ▁ ( ▁ ( ▁* ch oi ce ▁ ) ▁= = ▁ 2 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ( ▁* f h ▁ ) ▁= ▁ ( ▁ ( ▁* cl ▁ ) ▁* ▁ 1 . 8 ▁ ) ▁+ ▁32 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* f h ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* value ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁pro ce s se d Value ▁ ; ▁ @ ▁ ; ▁ @ ▁pro ce s se d Value ▁= ▁ ( ▁ ( ▁* value ▁ ) ▁ > > ▁ 4 ▁ ) ▁& ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁pro ce s se d Value ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ digit s ▁= ▁0 ▁ ; ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁int ▁original Num ▁ ; ▁ @ ▁float ▁ ar m str o n g S um ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁original Num ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁ digit s ++ ▁ ; ▁ @ ▁original Num ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁original Num ▁! = ▁0 ▁ ) ▁ ; ▁ @ ▁original Num ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁re ma inde r ▁= ▁original Num ▁ % ▁10 ▁ ; ▁ @ ▁ ar m str o n g S um ▁+ = ▁pow ▁ ( ▁re ma inde r ▁ , ▁ digit s ▁ ) ▁ ; ▁ @ ▁original Num ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁original Num ▁! = ▁0 ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁int ▁ ) ▁ ar m str o n g S um ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ 8 ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count ▁ % ▁ 2 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁count ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁i ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ @ ▁count ▁= ▁ 1 ▁ ; ▁ @ ▁el se ▁ @ ▁count ▁= ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁vo id ▁ s u b t r a c t ▁ ( ▁int ▁ x ▁ , ▁int ▁ y ▁ ) ▁ { ▁ @ ▁ x ▁ - = ▁ 1 ▁ ; ▁ @ ▁ y ▁ - = ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ b ▁= ▁20 ▁ ; ▁ @ ▁int ▁ a ▁= ▁10 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ s u b t r a c t ▁ ( ▁ a ▁ , ▁ b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ a ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁float ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁sum ▁= ▁ 0.0 f ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁sum ▁= ▁sum ▁+ ▁ ( ▁ ( ▁float ▁ ) ▁ 1 ▁ / ▁ ( ▁float ▁ ) ▁i ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁int ▁re ma inde r ▁= ▁ ( ▁* number ▁ ) ▁ % ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* prin ci p al ▁ ) ▁ , ▁float ▁ ( ▁* rate ▁ ) ▁ , ▁float ▁ ( ▁* y ear ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ ci ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ci ▁= ▁ ( ▁* prin ci p al ▁ ) ▁* ▁ ( ▁ ( ▁pow ▁ ( ▁ ( ▁ 1 ▁+ ▁ ( ▁* rate ▁ ) ▁ / ▁100 ▁ ) ▁ , ▁ ( ▁* y ear ▁ ) ▁ ) ▁ - ▁ 1 ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ci ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁ k ▁= ▁0 ▁ ; ▁ @ ▁int ▁space ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁ row s ▁= ▁ 5 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ row s ▁ ; ▁ ++ i ▁ , ▁ k ▁= ▁0 ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁space ▁= ▁ 1 ▁ ; ▁space ▁< = ▁ row s ▁ - ▁i ▁ ; ▁ ++ s p a ce ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁w h ile ▁ ( ▁ k ▁! = ▁ 2 ▁* ▁i ▁ - ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ++ k ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁nth E ven ▁= ▁0 ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* n ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁nth E ven ▁+ = ▁ 2 ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁nth E ven ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ con st ant P art ▁ ; ▁ @ ▁float ▁root 3 ▁ ; ▁ @ ▁float ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁root 3 ▁= ▁sqrt ▁ ( ▁ 3 ▁ ) ▁ ; ▁ @ ▁ con st ant P art ▁= ▁ 3 ▁* ▁root 3 ▁ / ▁ 2 ▁ ; ▁ @ ▁area ▁= ▁ con st ant P art ▁* ▁ ( ▁* side ▁ ) ▁* ▁ ( ▁* side ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁area ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* c ▁ ) ▁ , ▁float ▁ ( ▁* d ▁ ) ▁ , ▁float ▁ ( ▁* e ▁ ) ▁ , ▁ @ ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* e ▁ ) ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁result ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁* ▁ ( ▁* c ▁ ) ▁ - ▁ ( ▁* d ▁ ) ▁ / ▁ ( ▁* e ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁float ▁ surface A rea ▁= ▁4.0 f ▁* ▁ M _ P I ▁* ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁ u nsi gn ed ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁ u nsi gn ed ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁ @ ▁ u nsi gn ed ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ a ▁ [ ▁ 3 ▁ ] ▁= ▁ { ▁ 1 1 ▁ , ▁ 2 2 ▁ , ▁ 3 3 ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ a ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁& a ▁ [ ▁0 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ a ▁ [ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁& a ▁ [ ▁ 1 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ a ▁ [ ▁ 2 ▁ ] ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁& a ▁ [ ▁ 2 ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ ( ▁* side ▁ ) ▁* ▁ 4 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁even ▁ ; ▁ @ ▁int ▁odd ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁& ▁ 1 ▁ ) ▁ { ▁ @ ▁odd ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁odd ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁even ▁= ▁ ( ▁* num ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁even ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* n ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁int ▁sum ▁= ▁ ( ▁* n ▁ ) ▁* ▁ ( ▁ ( ▁* n ▁ ) ▁+ ▁ 1 ▁ ) ▁ / ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* r a d ▁ ) ▁ , ▁float ▁ ( ▁* h t ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ cy l V o l ▁ ; ▁ @ ▁float ▁area O f C i r cl e ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁area O f C i r cl e ▁= ▁3.14159 ▁* ▁ ( ▁* r a d ▁ ) ▁* ▁ ( ▁* r a d ▁ ) ▁ ; ▁ @ ▁ cy l V o l ▁= ▁area O f C i r cl e ▁* ▁ ( ▁* h t ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ cy l V o l ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁mul ▁= ▁0 ▁ ; ▁ @ ▁int ▁loop ▁ ; ▁ @ ▁int ▁ posit i ve R esult ▁= ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* a ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ a b s ▁ ( ▁ ( ▁* a ▁ ) ▁ ) ▁ ; ▁ @ ▁ posit i ve R esult ▁= ▁! posit i ve R esult ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁* b ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ a b s ▁ ( ▁ ( ▁* b ▁ ) ▁ ) ▁ ; ▁ @ ▁ posit i ve R esult ▁= ▁! posit i ve R esult ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁loop ▁= ▁ 1 ▁ ; ▁loop ▁< = ▁ ( ▁* b ▁ ) ▁ ; ▁loop ++ ▁ ) ▁ { ▁ @ ▁mul ▁+ = ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁! posit i ve R esult ▁ ) ▁ { ▁ @ ▁mul ▁= ▁ - m u l ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁mul ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* num ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁re ma inde r ▁ ; ▁ @ ▁int ▁ digit s ▁= ▁0 ▁ ; ▁ @ ▁int ▁original Num ▁ ; ▁ @ ▁float ▁ ar m str o n g S um ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* num ▁ ) ▁< ▁0 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁fo r ▁ ( ▁original Num ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁original Num ▁! = ▁0 ▁ ; ▁original Num ▁ / = ▁10 ▁ , ▁ ++ digit s ▁ ) ▁ @ ▁ ; ▁ @ ▁original Num ▁= ▁ ( ▁* num ▁ ) ▁ ; ▁ @ ▁w h ile ▁ ( ▁original Num ▁! = ▁0 ▁ ) ▁ { ▁ @ ▁re ma inde r ▁= ▁original Num ▁ % ▁10 ▁ ; ▁ @ ▁ ar m str o n g S um ▁+ = ▁pow ▁ ( ▁re ma inde r ▁ , ▁ digit s ▁ ) ▁ ; ▁ @ ▁original Num ▁ / = ▁10 ▁ ; ▁ @ ▁ } ▁ @ ▁ if ▁ ( ▁ ( ▁int ▁ ) ▁ ar m str o n g S um ▁= = ▁ ( ▁* num ▁ ) ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* s ▁ ) ▁ , ▁float ▁ ( ▁* h ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ V ▁ ; ▁ @ ▁float ▁ A ▁ ; ▁ @ ▁float ▁pi ▁= ▁3.14159 ▁ ; ▁ @ ▁float ▁ o n e O ve r T an P i O ve r 5 ▁ ; ▁ @ ▁float ▁tan P art ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁tan P art ▁= ▁tan ▁ ( ▁pi ▁ / ▁ 5 ▁ ) ▁ ; ▁ @ ▁ o n e O ve r T an P i O ve r 5 ▁= ▁ 1 ▁ / ▁tan P art ▁ ; ▁ @ ▁ A ▁= ▁ ( ▁ 5 ▁* ▁ ( ▁* s ▁ ) ▁* ▁ ( ▁* s ▁ ) ▁* ▁ o n e O ve r T an P i O ve r 5 ▁ ) ▁ / ▁ 4 ▁ ; ▁ @ ▁ V ▁= ▁ A ▁* ▁ ( ▁* h ▁ ) ▁ / ▁ 3 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ V ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* r ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ k ▁= ▁ 1 ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 1 ▁ ; ▁i ▁< = ▁ ( ▁* r ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ , ▁ k ++ ▁ ) ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ k ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* wDay ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* wDay ▁ ) ▁< ▁0 ▁ | | ▁ ( ▁* wDay ▁ ) ▁ > ▁ 6 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁sw it ch ▁ ( ▁ ( ▁* wDay ▁ ) ▁ ) ▁ { ▁ @ ▁ case ▁0 : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 1 : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 2 : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 3 : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 4 : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 5 : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ case ▁ 6 : ▁ ; ▁ @ ▁ brea k ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* side ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ ( ▁* side ▁ ) ▁* ▁ 8 ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ g lo b al Num ▁= ▁100 ▁ ; ▁ @ ▁vo id ▁ t est Fun c tion ▁ ( ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ lo cal M a in Num ▁= ▁ 2 00 ▁ ; ▁ @ ▁int ▁ an o th e r L o cal M a in Num ▁= ▁300 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ lo cal M a in Num ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ an o th e r L o cal M a in Num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ t est Fun c tion ▁ ( ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ an o th e r L o cal M a in Num ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁vo id ▁ t est Fun c tion ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁ lo cal T est Num ▁= ▁ 4 00 ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* pas cal s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ mm H g ▁= ▁ ( ▁* pas cal s ▁ ) ▁* ▁ 0.0 0 7 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ mm H g ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* str ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁count U ▁ ; ▁ @ ▁int ▁count L ▁ ; ▁ @ ▁int ▁counter ▁ ; ▁ @ ▁count L ▁= ▁count U ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁counter ▁= ▁0 ▁ ; ▁str ▁ [ ▁counter ▁ ] ▁! = ▁ N U L L ▁ ; ▁counter ++ ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁str ▁ [ ▁counter ▁ ] ▁ > = ▁ ' A ' ▁& & ▁str ▁ [ ▁counter ▁ ] ▁< = ▁ ' Z ' ▁ ) ▁ @ ▁count U ++ ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁str ▁ [ ▁counter ▁ ] ▁ > = ▁ ' a ' ▁& & ▁str ▁ [ ▁counter ▁ ] ▁< = ▁ ' z ' ▁ ) ▁ @ ▁count L ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁count U ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count L ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁ ) ▁ { ▁ @ ▁int ▁j ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁ 5 ▁ ; ▁i ▁ > = ▁ 1 ▁ ; ▁i - - ▁ ) ▁ { ▁ @ ▁fo r ▁ ( ▁j ▁= ▁ 1 ▁ ; ▁j ▁< = ▁i ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< ma th . h > ▁ @ ▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* radius ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁pi ▁= ▁3.14159 ▁ ; ▁ @ ▁float ▁ surface A rea ▁ ; ▁ @ ▁float ▁ square R adius ▁ ; ▁ @ ▁ ; ▁ @ ▁ square R adius ▁= ▁ ( ▁* radius ▁ ) ▁* ▁ ( ▁* radius ▁ ) ▁ ; ▁ @ ▁ surface A rea ▁= ▁ 4 ▁* ▁pi ▁* ▁ square R adius ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ surface A rea ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁i ▁ ; ▁ @ ▁int ▁count O dd ▁= ▁0 ▁ ; ▁ @ ▁int ▁count E ven ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁i ▁+ ▁ 1 ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ ? ▁count E ven ++ ▁ : ▁count O dd ++ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁count E ven ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁count O dd ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁original ▁ [ ▁10 ▁ ] ▁= ▁ { ▁10 ▁ , ▁ 9 ▁ , ▁ 8 ▁ , ▁ 7 ▁ , ▁ 6 ▁ , ▁ 5 ▁ , ▁ 4 ▁ , ▁ 3 ▁ , ▁ 2 ▁ , ▁ 1 ▁ } ▁ ; ▁ @ ▁int ▁ c o p i ed ▁ [ ▁10 ▁ ] ▁ ; ▁ @ ▁int ▁j ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁10 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ c o p i ed ▁ [ ▁j ▁ ] ▁= ▁original ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁fo r ▁ ( ▁j ▁= ▁0 ▁ ; ▁j ▁< ▁10 ▁ ; ▁j ++ ▁ ) ▁ { ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁j ▁+ ▁ 1 ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ c o p i ed ▁ [ ▁j ▁ ] ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁ long ▁factor i al ▁ ( ▁int ▁ ) ▁ ; ▁ @ ▁ long ▁find _ ncr ▁ ( ▁int ▁ , ▁int ▁ ) ▁ ; ▁ @ ▁ long ▁find _ npr ▁ ( ▁int ▁ , ▁int ▁ ) ▁ ; ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* n ▁ ) ▁ , ▁int ▁ ( ▁* r ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁ @ ▁ long ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 5 ▁ ) ▁ , ▁ @ ▁ long ▁int ▁ ( ▁* temptemp 6 ▁ ) ▁ ) ▁ { ▁ @ ▁ long ▁ ncr ▁ , ▁ npr ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ncr ▁= ▁find _ ncr ▁ ( ▁ ( ▁* n ▁ ) ▁ , ▁ ( ▁* r ▁ ) ▁ ) ▁ ; ▁ @ ▁ npr ▁= ▁find _ npr ▁ ( ▁ ( ▁* n ▁ ) ▁ , ▁ ( ▁* r ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ ncr ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ ( ▁* n ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 5 ▁ ) ▁= ▁ ( ▁* r ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 6 ▁ ) ▁= ▁ npr ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ } ▁ @ ▁ long ▁find _ ncr ▁ ( ▁int ▁ n ▁ , ▁int ▁ r ▁ ) ▁ { ▁ @ ▁ long ▁result ▁ ; ▁ @ ▁result ▁= ▁factor i al ▁ ( ▁ n ▁ ) ▁ / ▁ ( ▁factor i al ▁ ( ▁ r ▁ ) ▁* ▁factor i al ▁ ( ▁ n ▁ - ▁ r ▁ ) ▁ ) ▁ ; ▁ @ ▁re tur n ▁result ▁ ; ▁ @ ▁ } ▁ @ ▁ long ▁find _ npr ▁ ( ▁int ▁ n ▁ , ▁int ▁ r ▁ ) ▁ { ▁ @ ▁ long ▁result ▁ ; ▁ @ ▁result ▁= ▁factor i al ▁ ( ▁ n ▁ ) ▁ / ▁factor i al ▁ ( ▁ n ▁ - ▁ r ▁ ) ▁ ; ▁ @ ▁re tur n ▁result ▁ ; ▁ @ ▁ } ▁ @ ▁ long ▁factor i al ▁ ( ▁int ▁ n ▁ ) ▁ { ▁ @ ▁int ▁ c ▁ ; ▁ @ ▁ long ▁result ▁= ▁ 1 ▁ ; ▁ @ ▁fo r ▁ ( ▁ c ▁= ▁ 1 ▁ ; ▁ c ▁< = ▁ n ▁ ; ▁ c ++ ▁ ) ▁result ▁= ▁result ▁* ▁ c ▁ ; ▁ @ ▁re tur n ▁result ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ # in cl ude ▁< std li b . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* max Row s ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁max Col s ▁ ; ▁ @ ▁ ; ▁ @ ▁ if ▁ ( ▁ ( ▁* max Row s ▁ ) ▁< ▁ 1 ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ex it ▁ ( ▁0 ▁ ) ▁ ; ▁ @ ▁ } ▁ @ ▁max Col s ▁= ▁ ( ▁* max Row s ▁ ) ▁ ; ▁ @ ▁put s ▁ ( ▁"\ n --------------- --------------- --------------\ n " ▁ ) ▁ ; ▁ @ ▁int ▁ row ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁int ▁col ▁= ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ if ▁ ( ▁col ▁= = ▁ 1 ▁ | | ▁col ▁= = ▁max Col s ▁ | | ▁ row ▁= = ▁ 1 ▁ | | ▁ row ▁= = ▁ ( ▁* max Row s ▁ ) ▁ ) ▁ @ ▁ ; ▁ @ ▁el se ▁ @ ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁ } ▁ ; ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* number ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁temp ▁ ; ▁ @ ▁int ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁temp ▁= ▁ ( ▁* number ▁ ) ▁ ; ▁ @ ▁do ▁ { ▁ @ ▁ if ▁ ( ▁temp ▁< ▁ 7 ▁ ) ▁ brea k ▁ ; ▁ @ ▁temp ▁ - = ▁ 7 ▁ ; ▁ @ ▁ } ▁w h ile ▁ ( ▁temp ▁ > = ▁ 7 ▁ ) ▁ ; ▁ @ ▁ if ▁ ( ▁temp ▁= = ▁0 ▁ ) ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 1 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁el se ▁ { ▁ @ ▁result ▁= ▁ ( ▁* number ▁ ) ▁+ ▁ 2 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁result ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* a ▁ ) ▁ , ▁float ▁ ( ▁* b ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁perim eter ▁= ▁ 2 ▁* ▁ ( ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁perim eter ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁char ▁ le t t e r s ▁ [ ▁ ] ▁= ▁ { ▁ ' A ' ▁ , ▁'\ n ' ▁ , ▁ ' B ' ▁ , ▁'\ n ' ▁ , ▁ ' C ' ▁ , ▁'\ n ' ▁ , ▁ ' D ' ▁ , ▁'\ n ' ▁ , ▁'\ 0 ' ▁ } ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ le t t e r s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁char ▁ ( ▁* line ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁ @ ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ o ▁ ; ▁ @ ▁int ▁ s ▁ ; ▁ @ ▁int ▁ d ▁ ; ▁ @ ▁int ▁ ch ▁ ; ▁ @ ▁int ▁ c ▁ ; ▁ @ ▁int ▁ v ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁ o ▁= ▁ v ▁= ▁ c ▁= ▁ ch ▁= ▁ d ▁= ▁ s ▁= ▁0 ▁ ; ▁ @ ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁ line ▁ [ ▁i ▁ ] ▁! = ▁'\ 0 ' ▁ ; ▁ ++ i ▁ ) ▁ { ▁ @ ▁ if ▁ ( ▁ line ▁ [ ▁i ▁ ] ▁= = ▁ ' a ' ▁ | | ▁ line ▁ [ ▁i ▁ ] ▁= = ▁ ' e ' ▁ | | ▁ line ▁ [ ▁i ▁ ] ▁= = ▁ ' i ' ▁ | | ▁ line ▁ [ ▁i ▁ ] ▁= = ▁ ' o ' ▁ | | ▁ @ ▁ line ▁ [ ▁i ▁ ] ▁= = ▁ ' u ' ▁ | | ▁ line ▁ [ ▁i ▁ ] ▁= = ▁ ' A ' ▁ | | ▁ line ▁ [ ▁i ▁ ] ▁= = ▁ ' E ' ▁ | | ▁ line ▁ [ ▁i ▁ ] ▁= = ▁ ' I ' ▁ | | ▁ @ ▁ line ▁ [ ▁i ▁ ] ▁= = ▁ ' O ' ▁ | | ▁ line ▁ [ ▁i ▁ ] ▁= = ▁ ' U ' ▁ ) ▁ @ ▁ ++ v ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ ( ▁ line ▁ [ ▁i ▁ ] ▁ > = ▁ ' a ' ▁& & ▁ line ▁ [ ▁i ▁ ] ▁< = ▁ ' z ' ▁ ) ▁ | | ▁ @ ▁ ( ▁ line ▁ [ ▁i ▁ ] ▁ > = ▁ ' A ' ▁& & ▁ line ▁ [ ▁i ▁ ] ▁< = ▁ ' Z ' ▁ ) ▁ ) ▁ @ ▁ ++ c ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ line ▁ [ ▁i ▁ ] ▁ > = ▁ ' 0 ' ▁& & ▁ line ▁ [ ▁i ▁ ] ▁< = ▁ ' 9 ' ▁ ) ▁ @ ▁ ++ d ▁ ; ▁ @ ▁el se ▁ if ▁ ( ▁ line ▁ [ ▁i ▁ ] ▁= = ▁ ' ▁ ' ▁ ) ▁ @ ▁ ++ s ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ v ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ c ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ d ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁sum ▁ ; ▁ @ ▁int ▁ b ▁= ▁20 ▁ ; ▁ @ ▁int ▁ a ▁= ▁10 ▁ ; ▁ @ ▁sum ▁= ▁ a ▁+ ▁ b ▁ ; ▁ @ ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁float ▁ ( ▁* y ard s ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁float ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁float ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁mile s ▁= ▁ ( ▁* y ard s ▁ ) ▁ / ▁ 1 7 6 0.0 ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* y ard s ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁mile s ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
