▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* speed ▁ ) ▁ , ▁int ▁ ( ▁* time ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ distance ▁ ; ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ distance ▁= ▁ ( ▁* speed ▁ ) ▁* ▁ ( ▁* time ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ distance ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* a ▁ ) ▁ , ▁int ▁ ( ▁* b ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ { ▁ @ ▁ ; ▁ @ ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁+ ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* b ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ( ▁* a ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ - ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ ( ▁* a ▁ ) ▁ ; ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ ( ▁* b ▁ ) ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* N ▁ ) ▁ , ▁int ▁ ( ▁* arr ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ ) ▁ @ ▁ { ▁ @ ▁int ▁odd ▁ ; ▁ @ ▁int ▁even ▁ ; ▁ @ ▁int ▁i ▁ ; ▁ @ ▁even ▁= ▁0 ▁ ; ▁ @ ▁odd ▁= ▁0 ▁ ; ▁ @ ▁fo r ▁ ( ▁i ▁= ▁0 ▁ ; ▁i ▁< ▁ ( ▁* N ▁ ) ▁ ; ▁i ++ ▁ ) ▁ @ ▁ { ▁ @ ▁ if ▁ ( ▁arr ▁ [ ▁i ▁ ] ▁ % ▁ 2 ▁= = ▁0 ▁ ) ▁ @ ▁ { ▁ @ ▁even ▁= ▁even ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁el se ▁ @ ▁ { ▁ @ ▁odd ▁= ▁odd ▁+ ▁ 1 ▁ ; ▁ @ ▁ } ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁even ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁odd ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ▁ ( ▁int ▁ ( ▁* temptemp 1 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 2 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 3 ▁ ) ▁ , ▁int ▁ ( ▁* temptemp 4 ▁ ) ▁ ) ▁ { ▁ @ ▁int ▁ size _ char ▁= ▁ size of ▁ ( ▁char ▁ ) ▁ ; ▁ @ ▁int ▁ size _ int ▁= ▁ size of ▁ ( ▁int ▁ ) ▁ ; ▁ @ ▁int ▁ size _ f lo at ▁= ▁ size of ▁ ( ▁float ▁ ) ▁ ; ▁ @ ▁int ▁ size _ long _ int ▁= ▁ size of ▁ ( ▁ long ▁int ▁ ) ▁ ; ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 1 ▁ ) ▁= ▁ size _ char ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 2 ▁ ) ▁= ▁ size _ int ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 3 ▁ ) ▁= ▁ size _ f lo at ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( ▁* temptemp 4 ▁ ) ▁= ▁ size _ long _ int ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ▁ ; ▁ @ ▁ }
▁ # in cl ude ▁< std io . h > ▁ @ ▁ @ ▁int ▁ ent ry _ po int ( int ▁ ( * n ) , ▁int ▁ ( * temptemp 1 ) ) ▁ @ ▁ { ▁ @ ▁int ▁arr [ 1 00 ] ; ▁ @ ▁int ▁i ; ▁ @ ▁int ▁sum ▁= ▁0 ; ▁ @ ▁ ; ▁ @ ▁fo r ( ▁i ▁= ▁0 ; ▁i ▁< ▁ ( * n ) ; ▁i ++ ▁ ) ▁ @ ▁ { ▁ @ ▁sum ▁= ▁sum ▁+ ▁arr [ i ] ; ▁ @ ▁ } ▁ @ ▁ { ▁ @ ▁ ( * temptemp 1 ) ▁= ▁sum ▁ ; ▁ @ ▁ ; ▁ @ ▁ } ▁ @ ▁re tur n ▁0 ; ▁ @ ▁ }
