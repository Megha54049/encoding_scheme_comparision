#include <stdio.h> @ @ int entry_point ( float ( *baseRadius ) , float ( *cylinderHeight ) , float ( *temptemp1 ) ) { @ float baseArea ; @ float cylinderVolume ; @ ; @ ; @ baseArea = 3.14159 * ( *baseRadius ) * ( *baseRadius ) ; @ cylinderVolume = baseArea * ( *cylinderHeight ) ; @ ; @ { @ ( *temptemp1 ) = cylinderVolume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *first_side ) , float ( *second_side ) , float ( *the_height ) , @ float ( *temptemp1 ) ) { @ float area_result ; @ ; @ ; @ ; @ ; @ area_result = 0.5 * ( ( *first_side ) + ( *second_side ) ) ; @ area_result *= ( *the_height ) ; @ ; @ { @ ( *temptemp1 ) = area_result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *lengthOfSide ) , float ( *temptemp1 ) ) { @ ; @ float numberOfSides = 5 ; @ float calculatedPerimeter = ( *lengthOfSide ) * numberOfSides ; @ ; @ { @ ( *temptemp1 ) = calculatedPerimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( double ( *degrees ) , float ( *temptemp1 ) ) { @ double radians ; @ ; @ radians = ( *degrees ) * ( 3.14 / 180.0 ) ; @ { @ ( *temptemp1 ) = radians ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *l ) , float ( *temptemp1 ) ) { @ float a ; @ ; @ ; @ a = ( ( *n ) * ( *l ) * ( *l ) ) / ( 4.0 * tan ( M_PI / ( *n ) ) ) ; @ ; @ { @ ( *temptemp1 ) = a ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int condition ; @ int result ; @ ; @ condition = ( ( *number ) % 7 == 0 ) ? 0 : 1 ; @ switch ( condition ) { @ case 0: @ result = ( *number ) + 1 ; @ break ; @ default: @ result = ( *number ) + 2 ; @ } @ if ( condition == 0 ) { @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *decimal ) , int ( *temptemp1 ) ) { @ int place = 1 ; @ int octal = 0 ; @ ; @ while ( ( *decimal ) > 0 ) { @ octal += ( ( *decimal ) % 8 ) * place ; @ ( *decimal ) /= 8 ; @ place *= 10 ; @ } @ { @ ( *temptemp1 ) = octal ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , int ( *temptemp2 ) ) { @ char str [ 20 ] ; @ int count = 0 ; @ int i = 0 ; @ ; @ while ( str [ i ] != '\0' ) { @ count++ ; @ i++ ; @ } ; @ { @ ( *temptemp1 ) = str ; @ ; @ } ; @ { @ ( *temptemp2 ) = count ; @ ; @ } ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) ) { @ float p = 3.14159265358979323846 ; @ float surfaceArea ; @ ; @ surfaceArea = 4 * p * @ pow ( ( pow ( ( *a ) * ( *b ) , 1.6f ) + pow ( ( *a ) * ( *c ) , 1.6f ) + @ pow ( ( *b ) * ( *c ) , 1.6f ) ) / @ 3 , @ 1 / 1.6f ) ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *ch ) , char ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int asciiValue ; @ ; @ asciiValue = ( int ) ( *ch ) ; @ { @ ( *temptemp1 ) = ( *ch ) ; @ ( *temptemp2 ) = asciiValue ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *s ) , float ( *temptemp1 ) ) { @ float area ; @ float pi = acos ( -1 ) ; @ ; @ ; @ area = ( ( *n ) * ( *s ) * ( *s ) ) / ( 4 * tan ( pi / ( *n ) ) ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *R ) , float ( *r ) , float ( *temptemp1 ) ) { @ ; @ ; @ ; @ { @ ( *temptemp1 ) = @ 4 * 3.14159265358979323846 * 3.14159265358979323846 * ( *R ) * ( *r ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ int next ; @ int curr = 1 ; @ int prev = 0 ; @ int i = 2 ; @ ; @ if ( ( *n ) < 0 ) { @ ; @ return 1 ; @ } @ if ( ( *n ) == 0 ) { @ ; @ return 0 ; @ } else if ( ( *n ) == 1 ) { @ ; @ return 0 ; @ } @ while ( i <= ( *n ) ) { @ next = prev + curr ; @ prev = curr ; @ curr = next ; @ i++ ; @ } @ { @ ( *temptemp1 ) = curr ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *yards ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float miles ; @ float conversionFactor = 1760.0 ; @ ; @ miles = ( *yards ) / conversionFactor ; @ { @ ( *temptemp1 ) = ( *yards ) ; @ ( *temptemp2 ) = miles ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) ) { @ float volume ; @ ; @ ; @ ; @ volume = ( 4.0 / 3.0 ) * 3.14159265358979323846 * ( *a ) * ( *b ) * ( *c ) ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *feet ) , float ( *temptemp1 ) ) { @ ; @ float yards ; @ yards = ( *feet ) / 3.0f ; @ ; @ { @ ( *temptemp1 ) = yards ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ ; @ result = ( *a ) ^ ( *b ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , double ( *arr ) , int ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) ) { @ int i ; @ double sum = 0 ; @ double mean ; @ double variance = 0 ; @ double sumOfSquares = 0 ; @ @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ sum += arr [ i ] ; @ } @ mean = sum / ( *n ) ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ sumOfSquares += ( arr [ i ] - mean ) * ( arr [ i ] - mean ) ; @ } @ variance = sumOfSquares / ( *n ) ; @ { @ ( *temptemp2 ) = mean ; @ ; @ } @ { @ ( *temptemp3 ) = variance ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ ; @ if ( ( *n ) < 1 ) { @ ; @ return 0 ; @ } @ int i = 1 ; @ while ( i <= ( *n ) ) { @ int space = 1 ; @ while ( space < i ) { @ ; @ space++ ; @ } @ int num = i ; @ while ( num <= ( *n ) ) { @ { @ ( *temptemp1 ) = num ; @ ; @ } @ num++ ; @ } ; @ i++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ char i ; @ ; @ for ( i = 'A' ; i <= 'Z' ; i++ ) { @ ( *temptemp1 ) = i ; @ ; @ } ; @ for ( i = 'a' ; i <= 'z' ; i++ ) { @ ( *temptemp2 ) = i ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *r ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i ; @ int fact_n ; @ int combination ; @ int fact_r ; @ int fact_nr ; @ ; @ ; @ fact_n = 1 ; @ fact_r = 1 ; @ fact_nr = 1 ; @ for ( i = 1 ; i <= ( *n ) ; i++ ) { @ fact_n *= i ; @ } @ for ( i = 1 ; i <= ( *r ) ; i++ ) { @ fact_r *= i ; @ } @ for ( i = 1 ; i <= ( ( *n ) - ( *r ) ) ; i++ ) { @ fact_nr *= i ; @ } @ combination = fact_n / ( fact_r * fact_nr ) ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = ( *r ) ; @ ( *temptemp3 ) = combination ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *numbers ) , int ( *temptemp1 ) ) { @ int temp ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ } @ for ( i = 0 ; i < ( *n ) - 1 ; i++ ) { @ for ( j = 0 ; j < ( *n ) - i - 1 ; j++ ) { @ if ( numbers [ j ] > numbers [ j + 1 ] ) { @ temp = numbers [ j ] ; @ numbers [ j ] = numbers [ j + 1 ] ; @ numbers [ j + 1 ] = temp ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = numbers [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *array ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int swapFlag ; @ int j ; @ int i ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *n ) - 1 ; i++ ) { @ swapFlag = 0 ; @ for ( j = 0 ; j < ( *n ) - 1 - i ; j++ ) { @ if ( array [ j ] > array [ j + 1 ] ) { @ int temp = array [ j ] ; @ array [ j ] = array [ j + 1 ] ; @ array [ j + 1 ] = temp ; @ swapFlag = 1 ; @ } @ } @ if ( swapFlag == 0 ) { @ break ; @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp2 ) = array [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *outerRadius ) , float ( *innerRadius ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ ; @ area = 3.14159 * @ ( ( *outerRadius ) * ( *outerRadius ) - ( *innerRadius ) * ( *innerRadius ) ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *number ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ ; @ float floorResult = floor ( ( *number ) + 0.0 ) ; @ float ceilResult = ceil ( ( *number ) - 0.0 ) ; @ ; @ { @ ( *temptemp1 ) = floorResult ; @ ; @ } ; @ { @ ( *temptemp2 ) = ceilResult ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) ) { @ char line [ 150 ] ; @ int j ; @ int i ; @ ; @ for ( i = 0 , j = 0 ; line [ i ] != '\0' ; i++ ) { @ if ( ( line [ i ] >= 'a' && line [ i ] <= 'z' ) || @ ( line [ i ] >= 'A' && line [ i ] <= 'Z' ) ) { @ line [ j++ ] = line [ i ] ; @ } @ } @ line [ j ] = '\0' ; @ ; @ { @ ( *temptemp1 ) = line ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *meters ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float conversionResult ; @ float kilometers ; @ ; @ conversionResult = ( *meters ) / 1000 ; @ kilometers = conversionResult ; @ ; @ { @ ( *temptemp1 ) = ( *meters ) ; @ ; @ } ; @ ; @ { @ ( *temptemp2 ) = kilometers ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) ) { @ int j ; @ int i ; @ char ch = '*' ; @ for ( i = 10 ; i >= 0 ; i-- ) { @ ; @ for ( j = 0 ; j < i ; j++ ) { @ ( *temptemp1 ) = ch ; @ ; @ } @ } @ return ( 0 ) ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *sideLength ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ ; @ surfaceArea = 6 * ( ( *sideLength ) * ( *sideLength ) ) ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *operation ) , float ( *num1 ) , float ( *num2 ) , @ float ( *temptemp1 ) ) { @ float result ; @ ; @ ; @ switch ( ( *operation ) ) { @ case '+': @ result = ( *num1 ) + ( *num2 ) ; @ break ; @ case '-': @ result = ( *num1 ) - ( *num2 ) ; @ break ; @ case '*': @ result = ( *num1 ) * ( *num2 ) ; @ break ; @ case '/': @ if ( ( *num2 ) == 0 ) { @ ; @ return 0 ; @ } else { @ result = ( *num1 ) / ( *num2 ) ; @ } @ break ; @ default: ; @ return 0 ; @ } @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ float multipliedSide = ( *side ) * 6 ; @ perimeter = multipliedSide ; @ ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *sideLength ) , float ( *pyramidHeight ) , float ( *temptemp1 ) ) { @ float pyramidVolume ; @ float hexagonArea ; @ float pi = 3.14159 ; @ ; @ ; @ hexagonArea = ( 3 * sqrt ( 3 ) / 2 ) * ( *sideLength ) * ( *sideLength ) ; @ pyramidVolume = hexagonArea * ( *pyramidHeight ) / 3 ; @ ; @ { @ ( *temptemp1 ) = pyramidVolume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *velocityKmH ) , float ( *temptemp1 ) ) { @ float conversionFactor = 0.621371 ; @ float velocityMpH ; @ ; @ velocityMpH = ( *velocityKmH ) * conversionFactor ; @ { @ ( *temptemp1 ) = velocityMpH ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *degrees ) , float ( *temptemp1 ) ) { @ float conversionFactor ; @ float radians ; @ conversionFactor = 3.14f / 180.0f ; @ ; @ radians = ( *degrees ) * conversionFactor ; @ ; @ { @ ( *temptemp1 ) = radians ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int CheckDivision ( int num , int a , int b ) { @ if ( num % a == 0 && num % b == 0 ) @ return 1 ; @ else @ return 0 ; @ } @ int entry_point ( int ( *number ) , int ( *A ) , int ( *B ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , int ( *temptemp4 ) , @ int ( *temptemp5 ) , int ( *temptemp6 ) ) { @ ; @ ; @ ; @ ; @ ; @ if ( CheckDivision ( ( *number ) , ( *A ) , ( *B ) ) ) { @ ( *temptemp1 ) = ( *number ) ; @ ( *temptemp2 ) = ( *A ) ; @ ( *temptemp3 ) = ( *B ) ; @ ; @ } else { @ ( *temptemp4 ) = ( *number ) ; @ ( *temptemp5 ) = ( *A ) ; @ ( *temptemp6 ) = ( *B ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ if ( ( *b ) != 0 ) { @ ( *a ) = ( *a ) * ( *b ) ; @ ( *b ) = ( *a ) / ( *b ) ; @ ( *a ) = ( *a ) / ( *b ) ; @ } ; @ { @ ( *temptemp3 ) = ( *a ) ; @ ( *temptemp4 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ area = ( *length ) * ( *width ) ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *b ) , int ( *temptemp1 ) ) { @ int shiftResult ; @ ; @ shiftResult = ( *b ) >> 2 ; @ { @ ( *temptemp1 ) = shiftResult ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int k ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ for ( j = i + 1 ; j < ( *size ) ; j++ ) { @ if ( arr [ i ] == arr [ j ] ) { @ for ( k = j ; k < ( *size ) ; k++ ) { @ arr [ k ] = arr [ k + 1 ] ; @ } @ ( *size ) -- ; @ j-- ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = arr [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ void primeFactors ( int ) ; @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ for ( i = 2 ; i <= ( *num ) ; i++ ) { @ while ( ( *num ) % i == 0 ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ ( *num ) /= i ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) ) { @ ; @ if ( ( *num ) > 0 ) { @ ; @ } else if ( ( *num ) < 0 ) { @ ; @ } else { @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *num ) , int ( *position ) , @ int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int i ; @ ; @ if ( ( *size ) >= 100 ) { @ ; @ return 0 ; @ } @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } ; @ ; @ if ( ( *position ) < 1 || ( *position ) > ( *size ) + 1 ) { @ { @ ( *temptemp2 ) = ( *size ) + 1 ; @ ; @ } @ } else { @ for ( i = ( *size ) ; i >= ( *position ) ; i-- ) { @ arr [ i ] = arr [ i - 1 ] ; @ } @ arr [ ( *position ) - 1 ] = ( *num ) ; @ ( *size ) ++ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp3 ) = arr [ i ] ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int index2 ; @ int maximum ; @ int index1 ; @ int minimum ; @ int i ; @ ; @ for ( i = 0 ; i < 10 ; i++ ) { @ } @ minimum = a [ 0 ] ; @ maximum = a [ 0 ] ; @ for ( i = 0 ; i < 10 ; i++ ) { @ if ( minimum > a [ i ] ) { @ minimum = a [ i ] ; @ index1 = i ; @ } @ if ( maximum < a [ i ] ) { @ maximum = a [ i ] ; @ index2 = i ; @ } @ } @ { @ ( *temptemp1 ) = minimum ; @ ; @ } @ { @ ( *temptemp2 ) = index1 ; @ ; @ } @ { @ ( *temptemp3 ) = maximum ; @ ; @ } @ { @ ( *temptemp4 ) = index2 ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *temptemp1 ) ) { @ ; @ float perimeter = 2 * ( ( *length ) + ( *width ) ) ; @ ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int result ; @ ; @ if ( ( *num ) < 0 ) { @ ; @ exit ( 0 ) ; @ } @ int numOfDigits = 0 ; @ int copyNum = ( *num ) ; @ float sum = 0 ; @ while ( copyNum ) { @ numOfDigits++ ; @ copyNum /= 10 ; @ } @ copyNum = ( *num ) ; @ while ( copyNum ) { @ sum += pow ( copyNum % 10 , numOfDigits ) ; @ copyNum /= 10 ; @ } @ if ( sum == ( *num ) ) { @ result = 1 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ result = 0 ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *name ) , float ( *basic ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ float tax ; @ float net ; @ float gross ; @ float pf ; @ float hra ; @ float da ; @ ; @ ; @ pf = ( *basic ) * 0.08 ; @ da = ( *basic ) < 5000 ? ( *basic ) * 0.3 @ : ( ( *basic ) < 10000 ? ( *basic ) * 0.4 : ( *basic ) * 0.5 ) ; @ hra = ( *basic ) < 5000 ? ( *basic ) * 0.08 @ : ( ( *basic ) < 10000 ? ( *basic ) * 0.1 : ( *basic ) * 0.2 ) ; @ gross = ( *basic ) + da + hra ; @ tax = gross * 0.1 ; @ net = gross - tax - pf ; @ { @ ( *temptemp1 ) = gross ; @ ; @ } @ { @ ( *temptemp2 ) = net ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ char str [ 100 ] ; @ int countSpaces = 0 ; @ int countSpecialChar = 0 ; @ int countAlphabet = 0 ; @ int countDigits = 0 ; @ int counter = 0 ; @ ; @ while ( str [ counter ] != '\0' ) { @ if ( str [ counter ] >= '0' && str [ counter ] <= '9' ) @ countDigits++ ; @ else if ( ( str [ counter ] >= 'A' && str [ counter ] <= 'Z' ) || @ ( str [ counter ] >= 'a' && str [ counter ] <= 'z' ) ) @ countAlphabet++ ; @ else if ( str [ counter ] == ' ' ) @ countSpaces++ ; @ else @ countSpecialChar++ ; @ counter++ ; @ } @ { @ ( *temptemp1 ) = countDigits ; @ ; @ } @ { @ ( *temptemp2 ) = countAlphabet ; @ ; @ } @ { @ ( *temptemp3 ) = countSpaces ; @ ; @ } @ { @ ( *temptemp4 ) = countSpecialChar ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , char ( *temptemp1 ) ) { @ int i ; @ int cnt ; @ char hex [ 32 ] ; @ ; @ cnt = 0 ; @ while ( ( *number ) > 0 ) { @ switch ( ( *number ) % 16 ) { @ case 10: @ hex [ cnt ] = 'A' ; @ break ; @ case 11: @ hex [ cnt ] = 'B' ; @ break ; @ case 12: @ hex [ cnt ] = 'C' ; @ break ; @ case 13: @ hex [ cnt ] = 'D' ; @ break ; @ case 14: @ hex [ cnt ] = 'E' ; @ break ; @ case 15: @ hex [ cnt ] = 'F' ; @ break ; @ default: @ hex [ cnt ] = ( ( *number ) % 16 ) + 0x30 ; @ } @ ( *number ) = ( *number ) / 16 ; @ cnt++ ; @ } ; @ for ( i = ( cnt - 1 ) ; i >= 0 ; i-- ) { @ ( *temptemp1 ) = hex [ i ] ; @ ; @ } @ return 0 ; @ }
@ @ void stringCpy ( char* s1 , char* s2 ) ; @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ char str2 [ 100 ] ; @ char str1 [ 100 ] ; @ ; @ stringCpy ( str2 , str1 ) ; @ { @ ( *temptemp1 ) = str1 ; @ ( *temptemp2 ) = str2 ; @ ; @ } @ return 0 ; @ } @ void stringCpy ( char* s1 , char* s2 ) { @ int i = 0 ; @ while ( s2 [ i ] != '\0' ) { @ s1 [ i ] = s2 [ i ] ; @ i++ ; @ } @ s1 [ i ] = '\0' ; @ }
#include <stdio.h> @ @ void printPattern1 ( int n ) { @ for ( int row = 1 ; row <= n ; row++ ) { @ for ( int num = 1 ; num <= row ; num++ ) { @ ; @ } ; @ } @ } @ void printPattern2 ( int n ) { @ for ( int row = n ; row >= 1 ; row-- ) { @ for ( int num = 1 ; num <= row ; num++ ) { @ ; @ } ; @ } @ } @ void printPattern3 ( int n ) { @ for ( int row = n ; row >= 1 ; row-- ) { @ for ( int num = row ; num >= 1 ; num-- ) { @ ; @ } ; @ } @ } @ int entry_point ( int ( *n ) ) { @ ; @ ; @ printPattern1 ( ( *n ) ) ; @ ; @ printPattern2 ( ( *n ) ) ; @ ; @ printPattern3 ( ( *n ) ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *d ) , int ( *temptemp1 ) ) { @ int sum ; @ ; @ ; @ ; @ ; @ sum = ( *a ) + ( *b ) + ( *c ) + ( *d ) ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *age ) ) { @ int isEligible ; @ ; @ if ( ( *age ) >= 18 ) { @ isEligible = 1 ; @ } else { @ isEligible = 0 ; @ } @ if ( isEligible == 1 ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void checkEvenOdd ( ) { @ int numbers [ 3 ] = { 23 , 42 , 57 } ; @ int i ; @ for ( i = 0 ; i < 3 ; i++ ) { @ if ( numbers [ i ] % 2 == 0 ) { @ ; @ } else { @ ; @ } @ } @ } @ int entry_point ( ) { @ checkEvenOdd ( ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ perimeter = 4 * ( *side ) ; @ ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *temptemp1 ) ) { @ float circumference ; @ ; @ ; @ float h = pow ( ( ( *a ) - ( *b ) ) , 2 ) / pow ( ( ( *a ) + ( *b ) ) , 2 ) ; @ circumference = 3.14159265358979323846 * ( ( *a ) + ( *b ) ) * @ ( 1 + ( 3 * h ) / ( 10 + sqrt ( 4 - 3 * h ) ) ) ; @ { @ ( *temptemp1 ) = circumference ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( double ( *km ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ double miles ; @ ; @ miles = ( *km ) * 0.621371 ; @ { @ ( *temptemp1 ) = ( *km ) ; @ ; @ } @ { @ ( *temptemp2 ) = miles ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ ; @ result = ( *a ) & ( *b ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int isEven = ( *num ) % 2 == 0 ? 1 : 0 ; @ if ( isEven ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *num ) , int ( *position ) , @ int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int i ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } ; @ ; @ if ( ( *position ) < 1 || ( *position ) > ( *size ) + 1 ) { @ { @ ( *temptemp2 ) = ( *size ) + 1 ; @ ; @ } @ } else { @ i = ( *size ) ; @ while ( i >= ( *position ) ) { @ arr [ i ] = arr [ i - 1 ] ; @ i-- ; @ } @ arr [ ( *position ) - 1 ] = ( *num ) ; @ ( *size ) ++ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp3 ) = arr [ i ] ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ if ( ( *n ) > 0 ) { @ int pentagonal = ( 3 * ( *n ) - 1 ) * ( *n ) / 2 ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ { @ ( *temptemp2 ) = pentagonal ; @ ; @ } @ } else { @ ; @ return 1 ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *gradians ) , float ( *temptemp1 ) ) { @ float radians ; @ ; @ radians = ( *gradians ) * ( 3.14159 / 200.0 ) ; @ ; @ { @ ( *temptemp1 ) = radians ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ long fact ( int ) ; @ int entry_point ( int ( *line ) , long int ( *temptemp1 ) ) { @ int j ; @ int i ; @ ; @ for ( i = 0 ; i < ( *line ) ; i++ ) { @ for ( j = 0 ; j < ( *line ) - i - 1 ; j++ ) @ ; @ for ( j = 0 ; j <= i ; j++ ) { @ ( *temptemp1 ) = fact ( i ) / ( fact ( j ) * fact ( i - j ) ) ; @ ; @ } ; @ } @ return 0 ; @ } @ long fact ( int num ) { @ long f = 1 ; @ int i = 1 ; @ while ( i <= num ) { @ f = f * i ; @ i++ ; @ } @ return f ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *year ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ if ( ( ( *year ) % 4 == 0 && ( *year ) % 100 != 0 ) || ( ( *year ) % 400 == 0 ) ) { @ { @ ( *temptemp1 ) = ( *year ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *year ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ float nthTriangular ; @ ; @ if ( ( *n ) <= 0 ) { @ ; @ return 1 ; @ } @ nthTriangular = 0.5f * ( *n ) * ( ( *n ) + 1 ) ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = ( int ) nthTriangular ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float area ; @ ; @ area = 22.0 / 7 * ( *radius ) * ( *radius ) ; @ { @ ( *temptemp1 ) = area ; @ ( *temptemp2 ) = ( *radius ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *millimeters ) , float ( *temptemp1 ) ) { @ float centimeters ; @ ; @ centimeters = ( *millimeters ) / 10.0 ; @ float result = centimeters ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *start ) , int ( *end ) , int ( *temptemp1 ) ) { @ int count = 0 ; @ int num ; @ ; @ ; @ for ( num = ( *start ) ; num <= ( *end ) ; num++ ) { @ int originalNum ; @ int remainder ; @ int n = 0 ; @ float result = 0.0 ; @ originalNum = num ; @ for ( originalNum = num ; originalNum != 0 ; ++n ) { @ originalNum = originalNum / 10 ; @ } @ originalNum = num ; @ while ( originalNum != 0 ) { @ remainder = originalNum % 10 ; @ result = result + pow ( remainder , n ) ; @ originalNum = originalNum / 10 ; @ } @ if ( result == num ) { @ count = count + 1 ; @ } @ } @ { @ ( *temptemp1 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float circumference ; @ ; @ circumference = 2 * 3.14159 * ( *radius ) ; @ ; @ { @ ( *temptemp1 ) = circumference ; @ ; @ } @ return 0 ; @ }
@ @ void getBinary ( int ) ; @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ ; @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ getBinary ( ( *num ) ) ; @ return 0 ; @ } @ void getBinary ( int n ) { @ int loop ; @ for ( loop = 15 ; loop >= 0 ; loop-- ) { @ if ( ( 1 << loop ) & n ) @ ; @ else @ ; @ } @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *A ) , int ( *B ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , int ( *temptemp4 ) , @ int ( *temptemp5 ) , int ( *temptemp6 ) ) { @ ; @ ; @ ; @ int divisibleByA = ( *number ) % ( *A ) == 0 ; @ int divisibleByB = ( *number ) % ( *B ) == 0 ; @ if ( divisibleByA && divisibleByB ) { @ { @ ( *temptemp1 ) = ( *number ) ; @ ( *temptemp2 ) = ( *A ) ; @ ( *temptemp3 ) = ( *B ) ; @ ; @ } @ } else { @ { @ ( *temptemp4 ) = ( *number ) ; @ ( *temptemp5 ) = ( *A ) ; @ ( *temptemp6 ) = ( *B ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ ; @ ; @ { @ ( *temptemp1 ) = ( 4.0f / 3.0f ) * 3.14159f * ( *radius ) * ( *radius ) * ( *radius ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n1 ) , int ( *n2 ) , int ( *n3 ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) , @ int ( *temptemp6 ) ) { @ ; @ ; @ ; @ ; @ if ( ( ( *n1 ) > ( *n2 ) ) && ( ( *n1 ) > ( *n3 ) ) ) { @ ( *temptemp1 ) = ( *n1 ) ; @ ; @ } else if ( ( *n2 ) > ( *n3 ) ) { @ ( *temptemp2 ) = ( *n2 ) ; @ ; @ } else { @ ( *temptemp3 ) = ( *n3 ) ; @ ; @ } ; @ if ( ( ( *n1 ) < ( *n2 ) ) && ( ( *n1 ) < ( *n3 ) ) ) { @ ( *temptemp4 ) = ( *n1 ) ; @ ; @ } else if ( ( *n2 ) < ( *n3 ) ) { @ ( *temptemp5 ) = ( *n2 ) ; @ ; @ } else { @ ( *temptemp6 ) = ( *n3 ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) ) { @ int first = 0 ; @ int second = 1 ; @ int i ; @ int next ; @ ; @ ; @ for ( i = 0 ; i < ( *limit ) ; i++ ) { @ if ( i <= 1 ) { @ next = i ; @ } else { @ next = first + second ; @ first = second ; @ second = next ; @ } @ { @ ( *temptemp1 ) = next ; @ ; @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mm ) , float ( *temptemp1 ) ) { @ float in ; @ float conversionFactor = 25.4 ; @ ; @ in = ( *mm ) / conversionFactor ; @ { @ ( *temptemp1 ) = in ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *high ) , float ( *temptemp1 ) ) { @ float volumePyramid ; @ float base ; @ float piValue = 3.14159 ; @ ; @ ; @ float tanValue = tan ( piValue / 5.0f ) ; @ base = ( 5.0f / 4.0f ) * ( ( *length ) * ( *length ) ) / tanValue ; @ volumePyramid = base * ( *high ) / 3.0f ; @ ; @ { @ ( *temptemp1 ) = volumePyramid ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ int shiftedValue ; @ ; @ shiftedValue = ( *num ) >> 2 ; @ { @ ( *temptemp1 ) = shiftedValue ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) ) { @ int result ; @ ; @ result = ( *a ) << 2 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float circum ; @ float area ; @ ; @ area = 3.142 * ( *radius ) * ( *radius ) ; @ circum = 2 * 3.142 * ( *radius ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ { @ ( *temptemp2 ) = circum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int isUnique ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ isUnique = 1 ; @ for ( j = 0 ; j < ( *size ) ; j++ ) { @ if ( i != j && arr [ i ] == arr [ j ] ) { @ isUnique = 0 ; @ break ; @ } @ } @ if ( isUnique ) { @ { @ ( *temptemp2 ) = arr [ i ] ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float circumference ; @ ; @ circumference = 2 * 3.14159 * ( *radius ) ; @ { @ ( *temptemp1 ) = circumference ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ float root ; @ int squaredRoot ; @ ; @ root = sqrt ( ( float ) ( *num ) ) ; @ squaredRoot = round ( root ) ; @ if ( ( *num ) == squaredRoot * squaredRoot ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *decimal ) , int ( *temptemp1 ) ) { @ int binary [ 32 ] ; @ int remainder ; @ int i = 0 ; @ int j ; @ ; @ while ( ( *decimal ) > 0 ) { @ binary [ i ] = ( *decimal ) % 2 ; @ ( *decimal ) /= 2 ; @ i++ ; @ } ; @ for ( j = i - 1 ; j >= 0 ; j-- ) { @ ( *temptemp1 ) = binary [ j ] ; @ ; @ } ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int iVar ; @ float fVar ; @ ; @ fVar = sqrt ( ( double ) ( *num ) ) ; @ iVar = fVar ; @ if ( iVar == fVar ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *weight ) , float ( *height ) , float ( *temptemp1 ) ) { @ float bmi ; @ ; @ ; @ ( *height ) = ( *height ) / 100 ; @ bmi = ( *weight ) / ( ( *height ) * ( *height ) ) ; @ ; @ { @ ( *temptemp1 ) = bmi ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float denom ; @ float result ; @ ; @ denom = ( *c ) * ( *d ) ; @ if ( denom != 0 ) { @ result = ( ( *a ) * ( *b ) ) / denom ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int sum = 0 ; @ ; @ if ( ( *n ) < 0 ) { @ ; @ exit ( 0 ) ; @ } @ int i = 1 ; @ while ( i <= ( *n ) ) { @ sum += i ; @ i++ ; @ } @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = sum ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) , int ( *temptemp1 ) ) { @ int maxCols ; @ ; @ if ( ( *maxRows ) < 1 ) { @ ; @ exit ( 0 ) ; @ } @ maxCols = ( *maxRows ) ; @ puts ( "\n--------------------------------------------\n" ) ; @ int colsInCurrentRow ; @ int row = 1 ; @ { @ colsInCurrentRow = row ; @ int col = 1 ; @ { @ ( *temptemp1 ) = col ; @ ; @ } ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count [ 100 ] = { 0 } ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ for ( j = i + 1 ; j < ( *size ) ; j++ ) { @ if ( arr [ i ] == arr [ j ] ) { @ count [ i ] ++ ; @ count [ j ] ++ ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ if ( count [ i ] == 0 ) { @ { @ ( *temptemp2 ) = arr [ i ] ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int j ; @ int i ; @ int sum1 = 0 ; @ int sum ; @ ; @ for ( i = 1 ; i <= ( *n ) ; i++ ) { @ sum = 0 ; @ for ( j = 1 ; j <= i ; j++ ) { @ sum = sum + j ; @ } @ sum1 = sum1 + sum ; @ } @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = sum1 ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void PFactors ( int num ) ; @ void IPFactors ( int n ) ; @ int entry_point ( int ( *num ) ) { @ ; @ ; @ PFactors ( ( *num ) ) ; @ ; @ ; @ IPFactors ( ( *num ) ) ; @ ; @ return 0 ; @ } @ void PFactors ( int num ) { @ int i = 2 ; @ if ( num == 1 ) return ; @ while ( num % i != 0 ) i++ ; @ ; @ PFactors ( num / i ) ; @ } @ void IPFactors ( int num ) { @ int i ; @ for ( i = 2 ; num != 1 ; i++ ) @ while ( num % i == 0 ) { @ ; @ num = num / i ; @ } @ }
#include <stdio.h> @ @ void calculateAverage ( ) { @ int numbers [ 5 ] = { 4 , 7 , 8 , 9 , 10 } ; @ int sum = 0 ; @ double average ; @ int i ; @ for ( i = 0 ; i < 5 ; i++ ) { @ sum += numbers [ i ] ; @ } @ average = sum / 5.0 ; @ ; @ } @ int entry_point ( ) { @ calculateAverage ( ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *width ) , float ( *height ) , @ float ( *temptemp1 ) ) { @ float totalEdgeLength ; @ ; @ ; @ ; @ totalEdgeLength = 4 * ( ( *length ) + ( *width ) + ( *height ) ) ; @ { @ ( *temptemp1 ) = totalEdgeLength ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *inputPascals ) , float ( *temptemp1 ) ) { @ float conversionFactor ; @ float resultBar ; @ ; @ conversionFactor = 100000 ; @ resultBar = ( *inputPascals ) / conversionFactor ; @ { @ ( *temptemp1 ) = resultBar ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *length ) , float ( *breadth ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float area ; @ float perimeter ; @ ; @ ; @ area = ( *length ) * ( *breadth ) ; @ perimeter = ( 2 * ( *length ) ) + ( 2 * ( *breadth ) ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ { @ ( *temptemp2 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *temptemp1 ) ) { @ int shiftedValue ; @ ; @ shiftedValue = ( *num1 ) << 3 ; @ ; @ { @ ( *temptemp1 ) = shiftedValue ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , long int ( *temptemp2 ) ) { @ long int fact = 1 ; @ ; @ int i = ( *num ) ; @ if ( i > 0 ) { @ do { @ fact *= i ; @ i-- ; @ } while ( i >= 1 ) ; @ } @ { @ ( *temptemp1 ) = ( *num ) ; @ ( *temptemp2 ) = fact ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <string.h> @ @ int entry_point ( char ( *binary ) , int ( *temptemp1 ) ) { @ int octal ; @ int i ; @ int length = 10 ; @ int power = 1 ; @ int temp = 0 ; @ ; @ @ for ( i = length ; i >= 0 ; i-- ) { @ temp += ( binary [ i ] - '0' ) * power ; @ power *= 2 ; @ if ( power == 8 || i == 0 ) { @ octal = octal * 10 + temp ; @ temp = 0 ; @ power = 1 ; @ } @ } @ { @ ( *temptemp1 ) = octal ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , int ( *A ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int j ; @ int i ; @ int Temp ; @ ; @ ; @ for ( i = 0 ; i < ( *N ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *N ) - 1 ; i++ ) { @ for ( j = i + 1 ; j < ( *N ) ; j++ ) { @ if ( A [ i ] > A [ j ] ) { @ Temp = A [ i ] ; @ A [ i ] = A [ j ] ; @ A [ j ] = Temp ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *N ) ; i++ ) { @ { @ ( *temptemp2 ) = A [ i ] ; @ ; @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int current = 1 ; @ int prev = 0 ; @ int count = 0 ; @ ; @ if ( ( *limit ) < 1 ) { @ { @ ( *temptemp1 ) = ( *limit ) ; @ ; @ } @ } else { @ if ( ( *limit ) >= 1 ) { @ count = 1 ; @ } @ do { @ int next = prev + current ; @ prev = current ; @ current = next ; @ if ( next <= ( *limit ) ) { @ count++ ; @ } @ } while ( current <= ( *limit ) ) ; @ { @ ( *temptemp2 ) = ( *limit ) ; @ ( *temptemp3 ) = count ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) ) { @ int j ; @ int i ; @ ; @ for ( i = ( *n ) / 2 ; i <= ( *n ) ; i += 2 ) { @ for ( j = 1 ; j < ( *n ) - i ; j += 2 ) { @ ; @ } @ for ( j = 1 ; j <= i ; j++ ) { @ ; @ } @ for ( j = 1 ; j <= ( *n ) - i ; j++ ) { @ ; @ } @ for ( j = 1 ; j <= i ; j++ ) { @ ; @ } ; @ } @ for ( i = ( *n ) ; i >= 1 ; i-- ) { @ for ( j = i ; j < ( *n ) ; j++ ) { @ ; @ } @ for ( j = 1 ; j <= ( i * 2 ) - 1 ; j++ ) { @ ; @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *meters ) , float ( *temptemp1 ) ) { @ float kilometers ; @ ; @ kilometers = ( *meters ) / 1000.0 ; @ { @ ( *temptemp1 ) = kilometers ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *limit ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ ; @ count = ( int ) cbrt ( ( *limit ) ) ; @ { @ ( *temptemp1 ) = ( *limit ) ; @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *start ) , int ( *end ) , int ( *temptemp1 ) ) { @ int sum ; @ int j ; @ int i ; @ int count = 0 ; @ ; @ ; @ for ( i = ( *start ) ; i <= ( *end ) ; i++ ) { @ sum = 0 ; @ j = 1 ; @ do { @ if ( i % j == 0 ) { @ sum += j ; @ } @ j++ ; @ } while ( j <= i / 2 ) ; @ if ( sum == i && i != 0 ) { @ count++ ; @ } @ } @ { @ ( *temptemp1 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int array [ 100 ] , array1 [ 100 ] ; @ void entry_point ( int ( *n ) , int ( *array ) , int ( *temptemp1 ) ) { @ int divisor = 1 ; @ int temp ; @ int k ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ array1 [ i ] = array [ i ] ; @ } @ for ( k = 0 ; k < 3 ; k++ , divisor *= 10 ) { @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ for ( j = i + 1 ; j < ( *n ) ; j++ ) { @ if ( ( ( array [ i ] / divisor ) % 10 ) > ( ( array [ j ] / divisor ) % 10 ) ) { @ temp = array [ i ] ; @ array [ i ] = array [ j ] ; @ array [ j ] = temp ; @ temp = array1 [ i ] ; @ array1 [ i ] = array1 [ j ] ; @ array1 [ j ] = temp ; @ } @ } @ } @ } ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = array1 [ i ] ; @ ; @ } @ } @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *hexSide ) , float ( *pyrHeight ) , float ( *temptemp1 ) ) { @ float volumePyramid ; @ float baseAreaHex ; @ float constantFactor = ( 3 * sqrt ( 3 ) ) / 2 ; @ ; @ ; @ baseAreaHex = constantFactor * ( *hexSide ) * ( *hexSide ) ; @ volumePyramid = ( baseAreaHex * ( *pyrHeight ) ) / 3 ; @ ; @ { @ ( *temptemp1 ) = volumePyramid ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *gender ) ) { @ ; @ ( *gender ) = @ ( ( *gender ) >= 'A' && ( *gender ) <= 'Z' ) ? ( *gender ) + 32 : ( *gender ) ; @ if ( ( *gender ) == 'm' ) { @ ; @ } else if ( ( *gender ) == 'f' ) { @ ; @ } else { @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) ) { @ ; @ if ( ( *num ) % 7 == 0 || ( *num ) % 3 == 0 ) @ ; @ else @ ; @ if ( ( *num ) % 3 && ( *num ) % 2 ) @ ; @ else @ ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) ) { @ ; @ if ( ( *num ) == 0 ) { @ ; @ return 0 ; @ } @ int reverse = 0 ; @ while ( ( *num ) != 0 ) { @ reverse = reverse * 10 + ( ( *num ) % 10 ) ; @ ( *num ) /= 10 ; @ } @ while ( reverse != 0 ) { @ int digit = reverse % 10 ; @ switch ( digit ) { @ ; @ ; @ ; @ ; @ ; @ ; @ ; @ ; @ ; @ ; @ } @ reverse /= 10 ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *N ) ; @ ; @ } @ for ( i = 0 ; i < ( *N ) ; i++ ) { @ { @ ( *temptemp2 ) = i + 1 ; @ ; @ } @ } ; @ for ( i = 0 ; i < ( *N ) ; i++ ) { @ { @ ( *temptemp3 ) = arr [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int n ; @ int remainder ; @ int num ; @ int temp ; @ int i ; @ int sum ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *lower ) ; @ ( *temptemp2 ) = ( *upper ) ; @ ; @ } @ for ( i = ( *lower ) ; i <= ( *upper ) ; i++ ) { @ temp = i ; @ num = i ; @ n = 0 ; @ while ( temp != 0 ) { @ temp = temp / 10 ; @ n = n + 1 ; @ } @ temp = i ; @ sum = 0 ; @ while ( temp != 0 ) { @ remainder = temp % 10 ; @ sum = sum + pow ( remainder , n ) ; @ temp = temp + 10 ; @ } @ if ( sum == num ) { @ { @ ( *temptemp3 ) = i ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i = 1 ; @ int sum = 0 ; @ ; @ while ( i < ( *num ) ) { @ if ( ( *num ) % i == 0 ) { @ sum += i ; @ } @ i++ ; @ } @ if ( sum == ( *num ) ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , int ( *A ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int j ; @ int i ; @ int Temp ; @ ; @ ; @ for ( i = 1 ; i <= ( *N ) ; i++ ) { @ { @ ( *temptemp1 ) = i ; @ ; @ } @ } @ for ( i = 1 ; i <= ( *N ) - 1 ; i++ ) @ for ( j = i + 1 ; j <= ( *N ) ; j++ ) @ if ( A [ i ] > A [ j ] ) { @ Temp = A [ i ] ; @ A [ i ] = A [ j ] ; @ A [ j ] = Temp ; @ } ; @ for ( i = 1 ; i <= ( *N ) ; i++ ) { @ ( *temptemp2 ) = A [ i ] ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *arr ) , int ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) ) { @ int i ; @ float sum = 0 ; @ float mean ; @ float variance = 0 ; @ float sumOfSquares = 0 ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ sum = sum + arr [ i ] ; @ } @ mean = sum / ( *n ) ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ float diff = arr [ i ] - mean ; @ sumOfSquares = sumOfSquares + diff * diff ; @ } @ variance = sumOfSquares / ( *n ) ; @ ; @ { @ ( *temptemp2 ) = mean ; @ ; @ } ; @ { @ ( *temptemp3 ) = variance ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ perimeter = 4 * ( *side ) ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int validateDate ( int d , int m , int y ) { @ if ( y >= 1800 && y <= 2999 ) { @ if ( m >= 1 && m <= 12 ) { @ if ( d >= 1 && d <= 31 ) { @ if ( ( d >= 1 && d <= 30 ) && ( m == 4 || m == 6 || m == 9 || m == 11 ) ) @ return 1 ; @ else if ( ( d >= 1 && d <= 30 ) && ( m == 1 || m == 3 || m == 5 || m == 7 || @ m == 8 || m == 10 || m == 12 ) ) @ return 1 ; @ else if ( ( d >= 1 && d <= 28 ) && ( m == 2 ) ) @ return 1 ; @ else if ( d == 29 && m == 2 && @ ( ( y % 400 == 0 ) || ( y % 4 == 0 && y % 100 != 0 ) ) ) @ return 1 ; @ else @ return 0 ; @ } else { @ return 0 ; @ } @ } else { @ return 0 ; @ } @ } else { @ return 0 ; @ } @ } @ int wd ( int year , int month , int day ) { @ int wday = 0 ; @ wday = ( day + ( ( 153 * ( month + 12 * ( ( 14 - month ) / 12 ) - 3 ) + 2 ) / 5 ) + @ ( 365 * ( year + 4800 - ( ( 14 - month ) / 12 ) ) ) + @ ( ( year + 4800 - ( ( 14 - month ) / 12 ) ) / 4 ) - @ ( ( year + 4800 - ( ( 14 - month ) / 12 ) ) / 100 ) + @ ( ( year + 4800 - ( ( 14 - month ) / 12 ) ) / 400 ) - 32045 ) % @ 7 ; @ return wday ; @ } @ int entry_point ( int ( *day ) , int ( *month ) , int ( *year ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , char ( *temptemp4 ) ) { @ int wDayNo = 0 ; @ char dayNames [ ] [ 12 ] = { "Monday" , "Tuesday" , "Wednesday" , "Thursday" , @ "Friday" , "Saturday" , "Sunday" } ; @ ; @ if ( validateDate ( ( *day ) , ( *month ) , ( *year ) ) == 1 ) { @ { @ ( *temptemp1 ) = ( *day ) ; @ ( *temptemp2 ) = ( *month ) ; @ ( *temptemp3 ) = ( *year ) ; @ ; @ } @ wDayNo = wd ( ( *year ) , ( *month ) , ( *day ) ) ; @ { @ ( *temptemp4 ) = dayNames [ wDayNo ] ; @ ; @ } @ } else @ ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float root2 = sqrt ( 2 ) ; @ float multiplier = 2 * ( 1 + root2 ) ; @ float area ; @ ; @ area = multiplier * ( *side ) * ( *side ) ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <string.h> @ @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) , int ( *temptemp3 ) ) { @ char buffer [ 10 ] = { 0 } ; @ int i ; @ memset ( buffer , '0' , 9 ) ; @ ; @ for ( i = 0 ; i < 9 ; i++ ) { @ { @ ( *temptemp1 ) = buffer [ i ] ; @ ; @ } @ } ; @ memset ( buffer , '*' , 9 ) ; @ ; @ for ( i = 0 ; i < 9 ; i++ ) { @ { @ ( *temptemp2 ) = buffer [ i ] ; @ ; @ } @ } ; @ memset ( buffer , 7 , 9 ) ; @ ; @ for ( i = 0 ; i < 10 ; i++ ) { @ { @ ( *temptemp3 ) = buffer [ i ] ; @ ; @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *height ) , float ( *weight ) , float ( *temptemp1 ) ) { @ float bmi ; @ ; @ ; @ ( *height ) /= 100 ; @ bmi = ( *weight ) / ( ( *height ) * ( *height ) ) ; @ { @ ( *temptemp1 ) = bmi ; @ ; @ } @ if ( bmi < 16 ) { @ ; @ } else if ( bmi < 18.5 ) { @ ; @ } else if ( bmi < 25 ) { @ ; @ } else if ( bmi < 30 ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ result = ( ( *a ) + ( *b ) ) * ( ( *c ) + ( *d ) ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *x ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float result ; @ ; @ result = powf ( M_E , ( *x ) ) ; @ { @ ( *temptemp1 ) = ( *x ) ; @ ( *temptemp2 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int a ; @ int *p1 ; @ int **p2 ; @ p1 = &a ; @ p2 = &p1 ; @ a = 100 ; @ { @ ( *temptemp1 ) = *p1 ; @ ; @ } @ { @ ( *temptemp2 ) = **p2 ; @ ; @ } @ *p1 = 200 ; @ { @ ( *temptemp3 ) = *p1 ; @ ; @ } @ **p2 = 200 ; @ { @ ( *temptemp4 ) = **p2 ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) , float ( *temptemp3 ) , float ( *temptemp4 ) , @ float ( *temptemp5 ) , float ( *temptemp6 ) , float ( *temptemp7 ) , @ float ( *temptemp8 ) , float ( *temptemp9 ) ) { @ float imgPart ; @ float root2 ; @ float root1 ; @ float discriminant ; @ ; @ if ( ( *a ) == 0 ) { @ ; @ return 0 ; @ } @ discriminant = ( *b ) * ( *b ) - 4 * ( *a ) * ( *c ) ; @ { @ ( *temptemp1 ) = discriminant ; @ ; @ } @ if ( discriminant > 0 ) { @ root1 = ( - ( *b ) + sqrt ( discriminant ) ) / ( 2 * ( *a ) ) ; @ root2 = ( - ( *b ) - sqrt ( discriminant ) ) / ( 2 * ( *a ) ) ; @ { @ ( *temptemp2 ) = root1 ; @ ( *temptemp3 ) = root2 ; @ ; @ } @ } else if ( discriminant == 0 ) { @ root1 = - ( *b ) / ( 2 * ( *a ) ) ; @ { @ ( *temptemp4 ) = root1 ; @ ( *temptemp5 ) = root1 ; @ ; @ } @ } else { @ root1 = - ( *b ) / ( 2 * ( *a ) ) ; @ imgPart = sqrt ( -discriminant ) / ( 2 * ( *a ) ) ; @ { @ ( *temptemp6 ) = root1 ; @ ( *temptemp7 ) = imgPart ; @ ( *temptemp8 ) = root1 ; @ ( *temptemp9 ) = imgPart ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ int i ; @ int next ; @ int curr = 1 ; @ int prev = 0 ; @ ; @ if ( ( *n ) < 0 ) { @ ; @ return 1 ; @ } @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ if ( i == 0 ) { @ next = 0 ; @ } else if ( i == 1 ) { @ next = curr ; @ } else { @ next = prev + curr ; @ prev = curr ; @ curr = next ; @ } @ } @ { @ ( *temptemp1 ) = next ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int flag = 1 ; @ int i ; @ ; @ if ( ( *n ) <= 1 ) flag = 0 ; @ for ( i = 2 ; i <= sqrt ( ( *n ) ) ; i++ ) { @ if ( ( *n ) % i == 0 ) { @ flag = 0 ; @ break ; @ } @ } @ if ( flag == 1 ) { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *n ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ ; @ if ( ( *num ) % 7 == 0 ) { @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ if ( ( *num ) % 3 == 0 ) { @ ; @ } @ } else if ( ( *num ) % 3 == 0 ) { @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ } else { @ { @ ( *temptemp3 ) = ( *num ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *arr ) , int ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) ) { @ int i ; @ float diff ; @ float sumOfSquares = 0 ; @ float variance = 0 ; @ float mean ; @ float sum = 0 ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ sum = sum + arr [ i ] ; @ } @ mean = sum / ( *n ) ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ diff = arr [ i ] - mean ; @ sumOfSquares += diff * diff ; @ } @ variance = sumOfSquares / ( *n ) ; @ ; @ { @ ( *temptemp2 ) = mean ; @ ; @ } ; @ { @ ( *temptemp3 ) = variance ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *feet ) , float ( *temptemp1 ) ) { @ float yards ; @ ; @ yards = ( *feet ) / 3.0 ; @ { @ ( *temptemp1 ) = yards ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ if ( ( *num ) % 2 == 0 ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *fah ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float cel ; @ ; @ cel = ( ( *fah ) - 32 ) * 5 / 9 ; @ { @ ( *temptemp1 ) = ( *fah ) ; @ ( *temptemp2 ) = cel ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *R ) , float ( *r ) , float ( *temptemp1 ) ) { @ float volume ; @ ; @ ; @ volume = ( 3.14159265358979323846 * 3.14159265358979323846 ) * @ ( ( *R ) * ( *r ) * ( *r ) ) * 2 ; @ ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int nthCubic ; @ int temp2 ; @ int temp1 ; @ ; @ if ( ( *n ) <= 0 ) { @ ; @ return 1 ; @ } @ temp1 = ( *n ) * ( *n ) ; @ temp2 = temp1 * ( *n ) ; @ nthCubic = temp2 ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = nthCubic ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number1 ) , int ( *number2 ) , int ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ int total ; @ float average ; @ ; @ total = ( *number1 ) + ( *number2 ) ; @ average = total / 2.0 ; @ { @ ( *temptemp1 ) = total ; @ ; @ } @ { @ ( *temptemp2 ) = average ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *A ) , int ( *B ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) , int ( *temptemp4 ) , @ int ( *temptemp5 ) , int ( *temptemp6 ) ) { @ int isDivisible ; @ ; @ ; @ ; @ isDivisible = ( ( *number ) % ( *A ) == 0 ) && ( ( *number ) % ( *B ) == 0 ) ? 1 : 0 ; @ if ( isDivisible == 1 ) { @ { @ ( *temptemp1 ) = ( *number ) ; @ ( *temptemp2 ) = ( *A ) ; @ ( *temptemp3 ) = ( *B ) ; @ ; @ } @ } else { @ { @ ( *temptemp4 ) = ( *number ) ; @ ( *temptemp5 ) = ( *A ) ; @ ( *temptemp6 ) = ( *B ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) , int ( *temptemp5 ) ) { @ char a = 'Z' ; @ int b = 45 ; @ float c = 345.0f ; @ double d = 7654.90 ; @ char str [ ] = "Codezclub" ; @ { @ ( *temptemp1 ) = sizeof ( a ) ; @ ; @ } @ { @ ( *temptemp2 ) = sizeof ( b ) ; @ ; @ } @ { @ ( *temptemp3 ) = sizeof ( c ) ; @ ; @ } @ { @ ( *temptemp4 ) = sizeof ( d ) ; @ ; @ } @ { @ ( *temptemp5 ) = sizeof ( str ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) ) { @ float volume ; @ ; @ volume = ( 4.0 / 3.0 ) * 3.14159265358979323846 * ( *a ) * ( *b ) * ( *c ) ; @ ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) ) { @ int sign = 1 ; @ int i ; @ int mul = 0 ; @ ; @ ; @ if ( ( *a ) < 0 && ( *b ) < 0 ) { @ ( *a ) = - ( *a ) ; @ ( *b ) = - ( *b ) ; @ } else if ( ( *a ) < 0 || ( *b ) < 0 ) { @ sign = -1 ; @ if ( ( *a ) < 0 ) @ ( *a ) = - ( *a ) ; @ else @ ( *b ) = - ( *b ) ; @ } @ for ( i = 0 ; i < ( *b ) ; i++ ) { @ mul += ( *a ) ; @ } @ mul *= sign ; @ { @ ( *temptemp1 ) = mul ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *num2 ) , int ( *temptemp1 ) , float ( *temptemp2 ) ) { @ int result ; @ float mean ; @ ; @ result = ( *num1 ) + ( *num2 ) ; @ mean = ( float ) result / 2 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ { @ ( *temptemp2 ) = mean ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ int count = 0 ; @ int i ; @ ; @ int num = 2 ; @ int nthPrime = 2 ; @ while ( count < ( *n ) ) { @ int isPrime = 1 ; @ for ( i = 2 ; i * i <= num ; i++ ) { @ if ( num % i == 0 ) { @ isPrime = 0 ; @ break ; @ } @ } @ if ( isPrime ) { @ nthPrime = num ; @ count = count + 1 ; @ } @ num = num + 1 ; @ } @ { @ ( *temptemp1 ) = nthPrime ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int pro ; @ int sum ; @ int dig ; @ ; @ sum = 0 ; @ pro = 1 ; @ while ( ( *n ) > 0 ) { @ dig = ( *n ) % 10 ; @ sum += dig ; @ pro *= dig ; @ ( *n ) = ( *n ) / 10 ; @ } @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ { @ ( *temptemp2 ) = pro ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int temp ; @ int maxIdx ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *size ) - 1 ; i++ ) { @ maxIdx = i ; @ for ( j = i + 1 ; j < ( *size ) ; j++ ) { @ if ( arr [ j ] > arr [ maxIdx ] ) { @ maxIdx = j ; @ } @ } @ if ( maxIdx != i ) { @ temp = arr [ i ] ; @ arr [ i ] = arr [ maxIdx ] ; @ arr [ maxIdx ] = temp ; @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = arr [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mps ) , float ( *temptemp1 ) ) { @ float conversionFactor ; @ conversionFactor = 2.236 ; @ float mph ; @ ; @ mph = ( *mps ) * conversionFactor ; @ { @ ( *temptemp1 ) = mph ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *decimal ) , int ( *temptemp1 ) ) { @ int tempDecimal ; @ int octal ; @ int placeValue = 1 ; @ ; @ tempDecimal = ( *decimal ) ; @ while ( tempDecimal > 0 ) { @ octal = octal + ( tempDecimal % 8 ) * placeValue ; @ tempDecimal = tempDecimal / 8 ; @ placeValue = placeValue * 10 ; @ } @ { @ ( *temptemp1 ) = octal ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *N ) , float ( *temptemp1 ) ) { @ int i ; @ float sum ; @ int count ; @ ; @ sum = 0.0f ; @ count = 1 ; @ for ( i = 1 ; i <= ( *N ) ; i++ ) { @ sum = sum + ( ( float ) ( pow ( count , 2 ) ) / ( float ) ( pow ( count , 3 ) ) ) ; @ count += 2 ; @ } @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , double ( *arr ) , int ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) , float ( *temptemp5 ) ) { @ int i ; @ double sum = 0 ; @ double mean ; @ double sumOfQuads = 0 ; @ double variance = 0 ; @ double kurtosis ; @ double stdDeviation ; @ ; @ @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ sum = sum + arr [ i ] ; @ } @ mean = sum / ( *n ) ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ variance += pow ( arr [ i ] - mean , 2 ) ; @ } @ variance /= ( *n ) ; @ stdDeviation = sqrt ( variance ) ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ sumOfQuads += pow ( arr [ i ] - mean , 4 ) ; @ } @ kurtosis = ( ( *n ) * ( ( *n ) + 1 ) * sumOfQuads ) / @ ( ( ( *n ) - 1 ) * ( ( *n ) - 2 ) * ( ( *n ) - 3 ) * pow ( stdDeviation , 4 ) ) - @ ( 3 * pow ( ( *n ) - 1 , 2 ) ) / ( ( ( *n ) - 2 ) * ( ( *n ) - 3 ) ) ; @ { @ ( *temptemp2 ) = mean ; @ ; @ } @ { @ ( *temptemp3 ) = variance ; @ ; @ } @ { @ ( *temptemp4 ) = stdDeviation ; @ ; @ } @ { @ ( *temptemp5 ) = kurtosis ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *b ) , float ( *s ) , float ( *temptemp1 ) ) { @ ; @ ; @ float p = 2 * ( ( *b ) + ( *s ) ) ; @ { @ ( *temptemp1 ) = p ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int key ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 1 ; i < ( *size ) ; i++ ) { @ key = arr [ i ] ; @ j = i - 1 ; @ while ( j >= 0 && arr [ j ] < key ) { @ arr [ j + 1 ] = arr [ j ] ; @ j = j - 1 ; @ } @ arr [ j + 1 ] = key ; @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = arr [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int sum ; @ int j ; @ int i ; @ int count = 0 ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = 2 ; i <= ( *n ) ; i += 2 ) { @ sum = 1 ; @ for ( j = 2 ; j <= i / 2 ; j++ ) { @ if ( i % j == 0 ) { @ sum += j ; @ } @ } @ if ( sum == i ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ count++ ; @ } @ } @ { @ ( *temptemp3 ) = ( *n ) ; @ ( *temptemp4 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *year ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int leap = ( ( *year ) % 400 == 0 ) @ ? 1 @ : ( ( ( *year ) % 100 == 0 ) ? 0 : ( ( ( *year ) % 4 == 0 ) ? 1 : 0 ) ) ; @ if ( leap ) { @ { @ ( *temptemp1 ) = ( *year ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *year ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int array [ 10 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; @ int odd_sum = 0 ; @ int even_sum = 0 ; @ int i = 0 ; @ while ( i < 10 ) { @ if ( array [ i ] % 2 == 0 ) { @ even_sum += array [ i ] ; @ } else { @ odd_sum += array [ i ] ; @ } @ i++ ; @ } ; @ { @ ( *temptemp1 ) = even_sum ; @ ; @ } ; @ { @ ( *temptemp2 ) = odd_sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *year ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int isLeapYear = 0 ; @ ; @ if ( ( *year ) % 400 == 0 ) { @ isLeapYear = 1 ; @ } else if ( ( *year ) % 100 == 0 ) { @ isLeapYear = 0 ; @ } else if ( ( *year ) % 4 == 0 ) { @ isLeapYear = 1 ; @ } @ if ( isLeapYear ) { @ { @ ( *temptemp1 ) = ( *year ) ; @ ; @ } @ } else { @ { @ ( *temptemp2 ) = ( *year ) ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ ; @ char *status = ( *num ) > 0 ? "Positive" : "Negative" ; @ char *evenOddStatus = ( ( *num ) % 2 == 0 ) ? "Even" : "Odd" ; @ { @ ( *temptemp1 ) = status ; @ ; @ } @ { @ ( *temptemp2 ) = evenOddStatus ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *pascals ) , char ( *decision ) , float ( *temptemp1 ) ) { @ float bar ; @ do { @ ; @ bar = ( *pascals ) / 100000 ; @ { @ ( *temptemp1 ) = bar ; @ ; @ } ; @ } while ( ( *decision ) == 'y' || ( *decision ) == 'Y' ) ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , float ( *s ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ ; @ area = ( ( *n ) * ( *s ) * ( *s ) ) / ( 4 * tan ( M_PI / ( *n ) ) ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int j ; @ int i ; @ for ( i = 1 ; i < 5 ; i++ ) { @ for ( j = 1 ; j <= i ; j++ ) { @ { @ ( *temptemp1 ) = j ; @ ; @ } @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *cm ) , float ( *temptemp1 ) ) { @ float inches ; @ ; @ inches = ( *cm ) / 2.54 ; @ { @ ( *temptemp1 ) = inches ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side1 ) , float ( *side2 ) , float ( *side3 ) , float ( *side4 ) , @ float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ ; @ ; @ ; @ perimeter = ( *side1 ) + ( *side2 ) + ( *side3 ) + ( *side4 ) ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *base_length ) , float ( *height_length ) , float ( *temptemp1 ) ) { @ float parallelogram_area ; @ ; @ ; @ parallelogram_area = ( *base_length ) * ( *height_length ) ; @ { @ ( *temptemp1 ) = parallelogram_area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *bs ) , float ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) , float ( *temptemp5 ) ) { @ float gs ; @ float cv ; @ float da ; @ float hra ; @ ; @ if ( ( *bs ) >= 5000 ) { @ da = 1.1 * ( *bs ) ; @ hra = 0.2 * ( *bs ) ; @ cv = 500 ; @ } else { @ if ( ( *bs ) >= 3000 ) { @ da = ( *bs ) ; @ hra = 0.15 * ( *bs ) ; @ cv = 400 ; @ } else { @ da = 0.9 * ( *bs ) ; @ hra = 0.1 * ( *bs ) ; @ cv = 300 ; @ } @ } @ gs = ( *bs ) + da + hra + cv ; @ { @ ( *temptemp1 ) = ( *bs ) ; @ ; @ } @ { @ ( *temptemp2 ) = da ; @ ; @ } @ { @ ( *temptemp3 ) = hra ; @ ; @ } @ { @ ( *temptemp4 ) = cv ; @ ; @ } @ { @ ( *temptemp5 ) = gs ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int even ; @ int odd ; @ ; @ if ( ( *num ) / 2 * 2 == ( *num ) ) { @ even = ( *num ) + 2 ; @ { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } @ } else { @ odd = ( *num ) + 1 ; @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *sec ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) , int ( *temptemp5 ) , int ( *temptemp6 ) , @ int ( *temptemp7 ) ) { @ int hh , mm , ss ; @ ; @ hh = ( *sec ) / 3600 ; @ mm = ( ( *sec ) - hh * 3600 ) / 60 ; @ ss = ( *sec ) - hh * 3600 - mm * 60 ; @ { @ ( *temptemp1 ) = ( *sec ) ; @ ( *temptemp2 ) = hh ; @ ( *temptemp3 ) = mm ; @ ( *temptemp4 ) = ss ; @ ; @ } @ { @ ( *temptemp5 ) = hh ; @ ( *temptemp6 ) = mm ; @ ( *temptemp7 ) = ss ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i = 0 ; @ int sum = 0 ; @ ; @ while ( i < ( *n ) ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ i++ ; @ } @ i = 0 ; @ while ( i < ( *n ) ) { @ sum += arr [ i ] ; @ i++ ; @ } @ { @ ( *temptemp2 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int diff ; @ ; @ ; @ if ( ( *a ) > ( *b ) ) @ diff = ( *a ) - ( *b ) ; @ else @ diff = ( *b ) - ( *a ) ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = diff ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) , float ( *temptemp3 ) ) { @ float root2 ; @ float root1 ; @ float discriminant ; @ ; @ discriminant = ( *b ) * ( *b ) - 4 * ( *a ) * ( *c ) ; @ if ( discriminant > 0 ) { @ root1 = ( - ( *b ) + sqrt ( discriminant ) ) / ( 2 * ( *a ) ) ; @ root2 = ( - ( *b ) - sqrt ( discriminant ) ) / ( 2 * ( *a ) ) ; @ ; @ { @ ( *temptemp1 ) = root1 ; @ ; @ } @ { @ ( *temptemp2 ) = root2 ; @ ; @ } @ } else if ( discriminant == 0 ) { @ root1 = - ( *b ) / ( 2 * ( *a ) ) ; @ ; @ { @ ( *temptemp3 ) = root1 ; @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int tempNumber ; @ int rem = 0 ; @ int revNumber = 0 ; @ ; @ tempNumber = ( *number ) ; @ while ( tempNumber != 0 ) { @ rem = tempNumber % 10 ; @ revNumber = revNumber * 10 + rem ; @ tempNumber /= 10 ; @ } @ if ( revNumber == ( *number ) ) { @ ( *temptemp1 ) = ( *number ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *number ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *diagonalOne ) , float ( *diagonalTwo ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ ; @ result = ( *diagonalOne ) * ( *diagonalTwo ) ; @ result = result / 2 ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *gradians ) , float ( *temptemp1 ) ) { @ float degrees ; @ ; @ ; @ degrees = ( *gradians ) * 0.9 ; @ ; @ { @ ( *temptemp1 ) = degrees ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int countSpaces ; @ int countSpecialChar ; @ int countAlphabet ; @ int countDigits ; @ int counter ; @ countDigits = countAlphabet = countSpecialChar = countSpaces = 0 ; @ ; @ for ( counter = 0 ; str [ counter ] != NULL ; counter++ ) { @ if ( str [ counter ] >= '0' && str [ counter ] <= '9' ) @ countDigits++ ; @ else if ( ( str [ counter ] >= 'A' && str [ counter ] <= 'Z' ) || @ ( str [ counter ] >= 'a' && str [ counter ] <= 'z' ) ) @ countAlphabet++ ; @ else if ( str [ counter ] == ' ' ) @ countSpaces++ ; @ else @ countSpecialChar++ ; @ } @ { @ ( *temptemp1 ) = countDigits ; @ ( *temptemp2 ) = countAlphabet ; @ ( *temptemp3 ) = countSpaces ; @ ( *temptemp4 ) = countSpecialChar ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *baseSide ) , float ( *temptemp1 ) ) { @ float sqrtThreeTimesFour ; @ float totalSurfaceArea ; @ ; @ sqrtThreeTimesFour = sqrt ( 3 ) * 4 ; @ totalSurfaceArea = ( sqrtThreeTimesFour / 4 ) * ( *baseSide ) * ( *baseSide ) ; @ ; @ { @ ( *temptemp1 ) = totalSurfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void Strfun ( char *ptr ) { ; } @ int entry_point ( ) { @ char buff [ 20 ] = "Hello Function" ; @ Strfun ( buff ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *pascals ) , float ( *temptemp1 ) ) { @ float atm ; @ float pascalToAtm = 101325 ; @ ; @ atm = ( *pascals ) / pascalToAtm ; @ ; @ { @ ( *temptemp1 ) = atm ; @ ; @ } ; @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *speedInMetersPerSecond ) , float ( *temptemp1 ) ) { @ float conversionFactor ; @ float speedInKnots ; @ conversionFactor = 1.94384 ; @ ; @ speedInKnots = ( *speedInMetersPerSecond ) * conversionFactor ; @ ; @ { @ ( *temptemp1 ) = speedInKnots ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int min = 0 , count = 0 , array [ 100 ] = { 0 } , array1 [ 100 ] = { 0 } ; @ void entry_point ( int ( *count ) , int ( *array ) , int ( *temptemp1 ) ) { @ int n ; @ int t ; @ int temp ; @ int j ; @ int i ; @ int k ; @ ; @ ; @ for ( i = 0 ; i < ( *count ) ; i++ ) { @ array1 [ i ] = array [ i ] ; @ } @ for ( k = 0 ; k < 3 ; k++ ) { @ for ( i = 0 ; i < ( *count ) ; i++ ) { @ min = array [ i ] % 10 ; @ t = i ; @ for ( j = i + 1 ; j < ( *count ) ; j++ ) { @ if ( min > ( array [ j ] % 10 ) ) { @ min = array [ j ] % 10 ; @ t = j ; @ } @ } @ temp = array1 [ t ] ; @ array1 [ t ] = array1 [ i ] ; @ array1 [ i ] = temp ; @ temp = array [ t ] ; @ array [ t ] = array [ i ] ; @ array [ i ] = temp ; @ } @ for ( j = 0 ; j < ( *count ) ; j++ ) array [ j ] = array [ j ] / 10 ; @ } ; @ for ( i = 0 ; i < ( *count ) ; i++ ) { @ ( *temptemp1 ) = array1 [ i ] ; @ ; @ } @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ ; @ ; @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ; @ } @ if ( ( *b ) != 0 && ( *a ) != 0 ) { @ ( *a ) = ( *a ) * ( *b ) ; @ ( *b ) = ( *a ) / ( *b ) ; @ ( *a ) = ( *a ) / ( *b ) ; @ } @ { @ ( *temptemp3 ) = ( *a ) ; @ ( *temptemp4 ) = ( *b ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *octal ) , int ( *temptemp1 ) ) { @ int last_digit ; @ int base = 1 ; @ int decimal = 0 ; @ ; @ while ( ( *octal ) != 0 ) { @ last_digit = ( *octal ) % 10 ; @ ( *octal ) /= 10 ; @ decimal += last_digit * base ; @ base *= 8 ; @ } @ { @ ( *temptemp1 ) = decimal ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int numDigits ; @ int remainder ; @ int originalNum ; @ int i ; @ int count = 0 ; @ double sum ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ for ( i = 1 ; i <= ( *n ) ; i++ ) { @ sum = 0 ; @ originalNum = i ; @ numDigits = ( int ) log10 ( i ) + 1 ; @ while ( originalNum > 0 ) { @ remainder = originalNum % 10 ; @ sum += pow ( remainder , numDigits ) ; @ originalNum /= 10 ; @ } @ if ( ( int ) sum == i ) { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ count++ ; @ } @ } @ { @ ( *temptemp3 ) = ( *n ) ; @ ( *temptemp4 ) = count ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int i ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ i = ( *n ) ; @ do { @ { @ ( *temptemp2 ) = i ; @ ; @ } @ i-- ; @ } while ( i >= 1 ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *size ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int temp ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ } @ for ( i = 0 ; i < ( *size ) - 1 ; i++ ) { @ for ( j = 0 ; j < ( *size ) - i - 1 ; j++ ) { @ if ( arr [ j ] > arr [ j + 1 ] ) { @ temp = arr [ j ] ; @ arr [ j ] = arr [ j + 1 ] ; @ arr [ j + 1 ] = temp ; @ } @ } @ } ; @ for ( i = 0 ; i < ( *size ) ; i++ ) { @ { @ ( *temptemp2 ) = arr [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ int next ; @ int second = 1 ; @ int first = 0 ; @ ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ; @ } @ while ( count < ( *n ) ) { @ if ( count <= 1 ) { @ next = count ; @ } else { @ next = first + second ; @ first = second ; @ second = next ; @ } @ { @ ( *temptemp2 ) = next ; @ ; @ } @ count++ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *num1 ) , float ( *num2 ) , float ( *num3 ) , float ( *num4 ) , @ float ( *temptemp1 ) ) { @ float divisionResult ; @ ; @ if ( ( *num3 ) + ( *num4 ) != 0 ) { @ divisionResult = ( ( *num1 ) + ( *num2 ) ) / ( ( *num3 ) + ( *num4 ) ) ; @ { @ ( *temptemp1 ) = divisionResult ; @ ; @ } @ } else { @ ; @ return -1 ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *start ) , int ( *end ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ ; @ ; @ { @ ( *temptemp1 ) = ( *start ) ; @ ( *temptemp2 ) = ( *end ) ; @ ; @ } @ int counter = ( *start ) ; @ do { @ if ( counter % 2 == 0 ) { @ { @ ( *temptemp3 ) = counter ; @ ; @ } @ } @ counter++ ; @ } while ( counter <= ( *end ) ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *ch ) , char ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ int asciiValue = ( *ch ) ; @ ; @ { @ ( *temptemp1 ) = ( *ch ) ; @ ; @ } ; @ { @ ( *temptemp2 ) = asciiValue ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , int ( *temptemp2 ) ) { @ char string [ 100 ] ; @ int frequency [ 255 ] ; @ int ascii ; @ int min ; @ int i ; @ ; @ for ( i = 0 ; i < 255 ; i++ ) { @ frequency [ i ] = 0 ; @ } @ for ( i = 0 ; string [ i ] != '\0' ; i++ ) { @ ascii = string [ i ] ; @ frequency [ ascii ] ++ ; @ } @ min = 32 ; @ for ( i = 33 ; i < 127 ; i++ ) { @ if ( frequency [ i ] < frequency [ min ] && frequency [ i ] != 0 ) { @ min = i ; @ } @ } @ { @ ( *temptemp1 ) = min ; @ ( *temptemp2 ) = frequency [ min ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int rows = 8 ; @ int j ; @ int i ; @ int c ; @ int b = 1 ; @ int a = 0 ; @ for ( i = 1 ; i <= rows ; i++ ) { @ ; @ for ( j = 1 ; j <= i ; j++ ) { @ if ( i == 1 ) { @ { @ ( *temptemp1 ) = a ; @ ; @ } @ continue ; @ } @ if ( i == 2 && j == 1 ) { @ { @ ( *temptemp2 ) = b ; @ ; @ } @ continue ; @ } @ c = a + b ; @ a = b ; @ b = c ; @ { @ ( *temptemp3 ) = c ; @ ; @ } @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *temptemp1 ) ) { @ int result ; @ int modifiedA ; @ ; @ modifiedA = ( *a ) + 1 ; @ result = ~modifiedA ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *rows ) ) { @ int k ; @ int j ; @ int i ; @ ; @ for ( i = 1 ; i <= ( *rows ) ; i++ ) { @ for ( j = 1 ; j <= ( *rows ) - i ; j++ ) { @ ; @ } @ for ( k = 1 ; k <= i ; k++ ) { @ ; @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *weight ) , float ( *height ) , float ( *temptemp1 ) ) { @ float h ; @ float BMI ; @ ; @ ; @ h = ( *height ) / 100 * ( *height ) / 100 ; @ BMI = ( *weight ) / h ; @ { @ ( *temptemp1 ) = BMI ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int value = 789 ; @ int decValue = value ; @ int octValue = value ; @ int hexValue = value ; @ { @ ( *temptemp1 ) = decValue ; @ ; @ } @ { @ ( *temptemp2 ) = octValue ; @ ; @ } @ { @ ( *temptemp3 ) = hexValue ; @ ; @ } @ { @ ( *temptemp4 ) = hexValue ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *upperLimit ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int isPrime ; @ int div ; @ int num ; @ ; @ { @ ( *temptemp1 ) = ( *upperLimit ) ; @ ; @ } ; @ for ( num = 3 ; num < ( *upperLimit ) ; num += 2 ) { @ isPrime = 1 ; @ for ( div = 3 ; div * div <= num ; div += 2 ) { @ if ( num % div == 0 ) { @ isPrime = 0 ; @ break ; @ } @ } @ if ( isPrime ) { @ { @ ( *temptemp2 ) = num ; @ ; @ } @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ void printPattern1 ( int n ) { @ for ( int row = 1 ; row <= n ; row++ ) { @ for ( int space = n - row ; space > 0 ; space-- ) { @ ; @ } @ for ( int num = 1 ; num <= row ; num++ ) { @ ; @ } ; @ } @ } @ void printPattern2 ( int n ) { @ for ( int row = 1 ; row <= n ; row++ ) { @ for ( int num = 1 ; num <= n - row + 1 ; num++ ) { @ ; @ } ; @ } @ } @ void printPattern3 ( int n ) { @ for ( int row = 1 ; row <= n ; row++ ) { @ for ( int space = 1 ; space < row ; space++ ) { @ ; @ } @ for ( int num = row ; num >= 1 ; num-- ) { @ ; @ } ; @ } @ } @ int entry_point ( int ( *n ) ) { @ ; @ ; @ printPattern1 ( ( *n ) ) ; @ ; @ printPattern2 ( ( *n ) ) ; @ ; @ printPattern3 ( ( *n ) ) ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float phi ; @ float area ; @ ; @ phi = ( 1 + sqrt ( 5 ) ) / 2 ; @ area = ( sqrt ( 3 ) / 4 ) * ( 5 * ( *side ) * ( *side ) ) / phi ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) , int ( *temptemp5 ) ) { @ char a = 'A' ; @ int b = 120 ; @ float c = 123.0f ; @ double d = 1222.90 ; @ char str [ ] = "Hello" ; @ { @ ( *temptemp1 ) = sizeof ( a ) ; @ ; @ } @ { @ ( *temptemp2 ) = sizeof ( b ) ; @ ; @ } @ { @ ( *temptemp3 ) = sizeof ( c ) ; @ ; @ } @ { @ ( *temptemp4 ) = sizeof ( d ) ; @ ; @ } @ { @ ( *temptemp5 ) = sizeof ( str ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int cnt = 0 ; @ ; @ if ( ( *num ) == 0 ) { @ cnt = 1 ; @ } else { @ do { @ cnt++ ; @ ( *num ) /= 10 ; @ } while ( ( *num ) > 0 ) ; @ } ; @ { @ ( *temptemp1 ) = cnt ; @ ; @ } ; @ { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ if ( ( ( *num ) & 1 ) == 0 ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *dd ) , int ( *mm ) , int ( *yy ) ) { @ ; @ if ( ( *yy ) >= 1900 && ( *yy ) <= 9999 ) { @ if ( ( *mm ) >= 1 && ( *mm ) <= 12 ) { @ if ( ( ( *dd ) >= 1 && ( *dd ) <= 31 ) && @ ( ( *mm ) == 1 || ( *mm ) == 3 || ( *mm ) == 5 || ( *mm ) == 7 || ( *mm ) == 8 || @ ( *mm ) == 10 || ( *mm ) == 12 ) ) @ ; @ else if ( ( ( *dd ) >= 1 && ( *dd ) <= 30 ) && @ ( ( *mm ) == 4 || ( *mm ) == 6 || ( *mm ) == 9 || ( *mm ) == 11 ) ) @ ; @ else if ( ( ( *dd ) >= 1 && ( *dd ) <= 28 ) && ( ( *mm ) == 2 ) ) @ ; @ else if ( ( *dd ) == 29 && ( *mm ) == 2 && @ ( ( *yy ) % 400 == 0 || ( ( *yy ) % 4 == 0 && ( *yy ) % 100 != 0 ) ) ) @ ; @ else @ ; @ } else { @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *R ) , float ( *r ) , float ( *temptemp1 ) ) { @ float squareR ; @ float doublePi ; @ float volume ; @ ; @ ; @ doublePi = 2 * 3.14159265358979323846 ; @ squareR = ( *r ) * ( *r ) ; @ volume = doublePi * 3.14159265358979323846 * ( *R ) * squareR ; @ ; @ { @ ( *temptemp1 ) = volume ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int arr [ 1 ] ; @ arr [ 0 ] = 100 ; @ { @ ( *temptemp1 ) = arr [ 0 ] ; @ ; @ } @ arr [ 0 ] = 200 ; @ { @ ( *temptemp2 ) = arr [ 0 ] ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *inches ) , float ( *temptemp1 ) ) { @ float conversionFactor ; @ float feet ; @ ; @ conversionFactor = 1.0 / 12.0 ; @ feet = ( *inches ) * conversionFactor ; @ ; @ { @ ( *temptemp1 ) = feet ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *pos ) , int ( *temptemp1 ) ) { @ int arr [ 100 ] ; @ int j ; @ int i ; @ ; @ ; @ for ( i = ( *pos ) - 1 ; i < ( *n ) - 1 ; i++ ) { @ arr [ i ] = arr [ i + 1 ] ; @ } @ ( *n ) -- ; @ ; @ for ( j = 0 ; j < ( *n ) ; j++ ) { @ { @ ( *temptemp1 ) = arr [ j ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str ) , char ( *temptemp1 ) ) { @ int len1 ; @ int len ; @ int j ; @ int i ; @ ; @ for ( len = 0 ; str [ len ] != '\0' ; len++ ) @ ; @ len1 = 0 ; @ for ( i = 0 ; i < ( len - len1 ) ; ) { @ if ( str [ i ] == str [ i + 1 ] ) { @ for ( j = i ; j < ( len - len1 ) ; j++ ) str [ j ] = str [ j + 1 ] ; @ len1++ ; @ } else { @ i++ ; @ } @ } @ { @ ( *temptemp1 ) = ( *str ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <string.h> @ @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) , char ( *temptemp3 ) ) { @ char ch1 [ 50 ] = "Codez" ; @ char ch2 [ 50 ] = "Club" ; @ { @ ( *temptemp1 ) = ch1 ; @ ; @ } @ { @ ( *temptemp2 ) = ch2 ; @ ; @ } @ strcat ( ch1 , ch2 ) ; @ { @ ( *temptemp3 ) = ch1 ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *num1 ) , int ( *num2 ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) , int ( *temptemp4 ) ) { @ int temp ; @ int b ; @ int a ; @ ; @ ( *num1 ) = fabs ( ( *num1 ) ) ; @ ( *num2 ) = fabs ( ( *num2 ) ) ; @ a = ( *num1 ) ; @ b = ( *num2 ) ; @ while ( b != 0 ) { @ temp = b ; @ b = a % b ; @ a = temp ; @ } @ if ( a == 1 ) { @ ( *temptemp1 ) = ( *num1 ) ; @ ( *temptemp2 ) = ( *num2 ) ; @ ; @ } else { @ ( *temptemp3 ) = ( *num1 ) ; @ ( *temptemp4 ) = ( *num2 ) ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *feet ) , char ( *continueConversion ) , float ( *temptemp1 ) ) { @ float inches ; @ do { @ ; @ inches = ( *feet ) * 12.0f ; @ { @ ( *temptemp1 ) = inches ; @ ; @ } ; @ } while ( ( *continueConversion ) == 'Y' || ( *continueConversion ) == 'y' ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int addTwoNumbers ( int x , int y ) { @ while ( y != 0 ) { @ x++ ; @ y-- ; @ } @ return x ; @ } @ int entry_point ( int ( *temptemp1 ) ) { @ int sum ; @ int b = 20 ; @ int a = 10 ; @ sum = addTwoNumbers ( a , b ) ; @ ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *s ) , float ( *sl ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ float lateralArea ; @ float baseArea ; @ float pi = 3.14159 ; @ ; @ ; @ baseArea = ( 3 * sqrt ( 3 ) / 2 ) * ( *s ) * ( *s ) ; @ lateralArea = 6 * ( ( *s ) * ( *sl ) ) / 2 ; @ surfaceArea = baseArea + lateralArea ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *n ) , double ( *arr ) , int ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) ) { @ int i ; @ double sum = 0 ; @ double mean ; @ double variance = 0 ; @ double sumOfSquares = 0 ; @ double stdDeviation ; @ ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ sum += arr [ i ] ; @ } @ mean = sum / ( *n ) ; @ for ( i = 0 ; i < ( *n ) ; i++ ) { @ sumOfSquares += ( arr [ i ] - mean ) * ( arr [ i ] - mean ) ; @ } @ variance = sumOfSquares / ( *n ) ; @ stdDeviation = sqrt ( variance ) ; @ { @ ( *temptemp2 ) = mean ; @ ; @ } @ { @ ( *temptemp3 ) = variance ; @ ; @ } @ { @ ( *temptemp4 ) = stdDeviation ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *c ) , int ( *temptemp1 ) ) { @ int andResult ; @ ; @ andResult = ( *c ) & 15 ; @ { @ ( *temptemp1 ) = andResult ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) , char ( *temptemp2 ) ) { @ char str2 [ 20 ] ; @ char str1 [ 20 ] ; @ int notEqual = 0 ; @ int i = 0 ; @ ; @ ; @ ; @ { @ ( *temptemp1 ) = str1 ; @ ; @ } @ { @ ( *temptemp2 ) = str2 ; @ ; @ } @ while ( str1 [ i ] != '\0' || str2 [ i ] != '\0' ) { @ if ( str1 [ i ] != str2 [ i ] || ( str1 [ i ] == '\0' && str2 [ i ] != '\0' ) || @ ( str2 [ i ] == '\0' && str1 [ i ] != '\0' ) ) { @ notEqual = 1 ; @ break ; @ } @ i++ ; @ } @ if ( notEqual ) @ ; @ else @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *givenNumber ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int extractedDigit ; @ int digitsSum = 0 ; @ int digitsProduct = 1 ; @ ; @ for ( ; ( *givenNumber ) != 0 ; ( *givenNumber ) = ( *givenNumber ) / 10 ) { @ extractedDigit = ( *givenNumber ) % 10 ; @ digitsSum = digitsSum + extractedDigit ; @ digitsProduct = digitsProduct * extractedDigit ; @ } @ { @ ( *temptemp1 ) = digitsSum ; @ ; @ } @ { @ ( *temptemp2 ) = digitsProduct ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *base ) , float ( *height ) , float ( *temptemp1 ) ) { @ ; @ float area = 0.5 * ( *base ) * ( *height ) ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ void Strfun ( ) { @ ; @ ; @ } @ int entry_point ( ) { @ Strfun ( ) ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float result ; @ float mult_ab ; @ float sum_cd ; @ ; @ sum_cd = ( *c ) + ( *d ) ; @ if ( sum_cd != 0 ) { @ mult_ab = ( *a ) * ( *b ) ; @ result = mult_ab / sum_cd ; @ ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *edge ) , float ( *temptemp1 ) ) { @ float area ; @ ; @ area = ( *edge ) * ( *edge ) ; @ area = area * 6 ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *pascals ) , float ( *temptemp1 ) ) { @ float bar ; @ ; @ bar = ( *pascals ) / 100000 ; @ { @ ( *temptemp1 ) = bar ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) ) { @ int maxCols ; @ ; @ if ( ( *maxRows ) < 1 ) { @ ; @ exit ( 0 ) ; @ } @ maxCols = ( *maxRows ) * 2 - 1 ; @ puts ( "\n--------------------------------------------\n" ) ; @ int spacesInCurrentRow ; @ int colsInCurrentRow ; @ int row = 1 ; @ { @ spacesInCurrentRow = ( row - 1 ) * 2 ; @ colsInCurrentRow = maxCols - ( row - 1 ) * 2 ; @ int space = 1 ; @ ; @ int col = 1 ; @ { @ if ( col == 1 || col == colsInCurrentRow || row == 1 ) @ ; @ else @ ; @ } ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) ) { @ int maxCols ; @ ; @ if ( ( *maxRows ) < 1 ) { @ ; @ exit ( 0 ) ; @ } @ maxCols = ( *maxRows ) * 2 - 1 ; @ puts ( "\n--------------------------------------------\n" ) ; @ int spacesInCurrentRow ; @ int colsInCurrentRow ; @ int row = 1 ; @ { @ spacesInCurrentRow = ( ( *maxRows ) - row ) * 2 ; @ colsInCurrentRow = maxCols - spacesInCurrentRow ; @ int space = 1 ; @ ; @ int col = 1 ; @ { @ if ( col == 1 || col == colsInCurrentRow || row == ( *maxRows ) ) @ ; @ else @ ; @ } ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *lower ) , int ( *upper ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int num ; @ float n ; @ ; @ ; @ { @ ( *temptemp1 ) = ( *lower ) ; @ ( *temptemp2 ) = ( *upper ) ; @ ; @ } @ num = ( *lower ) ; @ while ( num <= ( *upper ) ) { @ n = ( -1 + sqrtf ( 1 + 8 * num ) ) / 2 ; @ if ( floorf ( n ) == n ) { @ { @ ( *temptemp3 ) = num ; @ ; @ } @ } @ num++ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *dd ) , int ( *mm ) , int ( *yy ) ) { @ int isValid = 0 ; @ ; @ if ( ( ( *yy ) >= 1900 && ( *yy ) <= 9999 ) && @ ( ( ( *mm ) == 1 || ( *mm ) == 3 || ( *mm ) == 5 || ( *mm ) == 7 || @ ( *mm ) == 8 || ( *mm ) == 10 || ( *mm ) == 12 ) && @ ( ( *dd ) >= 1 && ( *dd ) <= 31 ) ) || @ ( ( ( *mm ) == 4 || ( *mm ) == 6 || ( *mm ) == 9 || ( *mm ) == 11 ) && @ ( ( *dd ) >= 1 && ( *dd ) <= 30 ) ) || @ ( ( ( *mm ) == 2 ) && @ ( ( ( *dd ) >= 1 && ( *dd ) <= 28 ) || @ ( ( *dd ) == 29 && @ ( ( *yy ) % 400 == 0 || ( ( *yy ) % 4 == 0 && ( *yy ) % 100 != 0 ) ) ) ) ) ) { @ isValid = 1 ; @ } @ if ( isValid ) { @ ; @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int mul = 0 ; @ int loop ; @ ; @ ; @ if ( ( *b ) < 0 ) { @ ( *b ) = - ( *b ) ; @ ( *a ) = - ( *a ) ; @ } @ for ( loop = 1 ; loop <= ( *b ) ; loop++ ) { @ mul += ( *a ) ; @ } @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = mul ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *bs ) , float ( *temptemp1 ) , float ( *temptemp2 ) , @ float ( *temptemp3 ) , float ( *temptemp4 ) , float ( *temptemp5 ) ) { @ float gs ; @ float cv ; @ float da ; @ float hra ; @ int category ; @ ; @ if ( ( *bs ) < 3000 ) @ category = 1 ; @ else if ( ( *bs ) >= 3000 && ( *bs ) < 5000 ) @ category = 2 ; @ else @ category = 3 ; @ switch ( category ) { @ case 1: @ da = 0.9 * ( *bs ) ; @ hra = 0.1 * ( *bs ) ; @ cv = 300 ; @ break ; @ case 2: @ da = ( *bs ) ; @ hra = 0.15 * ( *bs ) ; @ cv = 400 ; @ break ; @ case 3: @ da = 1.1 * ( *bs ) ; @ hra = 0.2 * ( *bs ) ; @ cv = 500 ; @ break ; @ } @ gs = ( *bs ) + da + hra + cv ; @ { @ ( *temptemp1 ) = ( *bs ) ; @ ; @ } @ { @ ( *temptemp2 ) = da ; @ ; @ } @ { @ ( *temptemp3 ) = hra ; @ ; @ } @ { @ ( *temptemp4 ) = cv ; @ ; @ } @ { @ ( *temptemp5 ) = gs ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *amount ) , float ( *rate ) , float ( *time ) , float ( *temptemp1 ) ) { @ float si ; @ ; @ ; @ ; @ si = ( ( *amount ) * ( *rate ) * ( *time ) ) / 100 ; @ { @ ( *temptemp1 ) = si ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *temptemp1 ) ) { @ float result ; @ ; @ if ( ( *c ) == 0 || ( *d ) == 0 ) { @ ; @ } else { @ result = ( ( *a ) * ( *b ) ) / ( ( *c ) * ( *d ) ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ float root ; @ ; @ root = sqrt ( ( float ) ( *num ) ) ; @ if ( floor ( root ) == ceil ( root ) ) { @ ( *temptemp1 ) = ( *num ) ; @ ; @ } else { @ ( *temptemp2 ) = ( *num ) ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *x ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float negative ; @ float positive ; @ float delta ; @ float total ; @ ; @ positive = expf ( ( *x ) ) ; @ negative = expf ( - ( *x ) ) ; @ total = positive + negative ; @ delta = positive - negative ; @ { @ ( *temptemp1 ) = total ; @ ; @ } @ { @ ( *temptemp2 ) = delta ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *count ) , float ( *numbers ) , float ( *temptemp1 ) ) { @ int i ; @ float swap ; @ ; @ ; @ for ( i = 0 ; i < ( *count ) ; i++ ) { @ } @ i = 0 ; @ while ( i < ( *count ) ) { @ if ( i == 0 || numbers [ i - 1 ] <= numbers [ i ] ) { @ i++ ; @ } else { @ swap = numbers [ i ] ; @ numbers [ i ] = numbers [ i - 1 ] ; @ numbers [ i - 1 ] = swap ; @ i-- ; @ } @ } ; @ for ( i = 0 ; i < ( *count ) ; i++ ) { @ { @ ( *temptemp1 ) = numbers [ i ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *c ) , int ( *temptemp1 ) ) { @ int largest ; @ ; @ ; @ ; @ if ( ( *a ) > ( *b ) ) { @ if ( ( *a ) > ( *c ) ) { @ largest = ( *a ) ; @ } else { @ largest = ( *c ) ; @ } @ } else { @ if ( ( *b ) > ( *c ) ) { @ largest = ( *b ) ; @ } else { @ largest = ( *c ) ; @ } @ } @ { @ ( *temptemp1 ) = largest ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float surfaceArea ; @ float pi = 3.14159 ; @ ; @ surfaceArea = 4 * pi * pow ( ( *radius ) , 2 ) ; @ ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) ) { @ float tempResult ; @ ; @ tempResult = ( *num ) / 10.0f ; @ ; @ { @ ( *temptemp1 ) = ( int ) tempResult ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *val ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float cVal ; @ float fVal ; @ ; @ fVal = floor ( ( *val ) ) ; @ cVal = ceil ( ( *val ) ) ; @ { @ ( *temptemp1 ) = fVal ; @ ( *temptemp2 ) = cVal ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ int i ; @ int sum ; @ ; @ sum = 0 ; @ for ( i = 1 ; i <= ( *n ) ; i++ ) sum += i ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *hour ) , int ( *minute ) , int ( *second ) , int ( *temptemp1 ) , @ int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ ; @ ; @ ; @ if ( ( *hour ) >= 0 && ( *hour ) <= 23 && ( *minute ) >= 0 && ( *minute ) <= 59 && @ ( *second ) >= 0 && ( *second ) <= 59 ) { @ { @ ( *temptemp1 ) = ( *hour ) ; @ ( *temptemp2 ) = ( *minute ) ; @ ( *temptemp3 ) = ( *second ) ; @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int isPrime ( int n ) { @ int j ; @ if ( n <= 1 ) return 0 ; @ for ( j = 2 ; j * j <= n ; j++ ) { @ if ( n % j == 0 ) return 0 ; @ } @ return 1 ; @ } @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int count = 0 ; @ int i ; @ ; @ for ( i = 2 ; i <= ( *n ) ; i++ ) { @ if ( !isPrime ( i ) ) { @ count++ ; @ } @ } @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = count ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) , float ( *temptemp3 ) , float ( *temptemp4 ) , @ float ( *temptemp5 ) , float ( *temptemp6 ) , float ( *temptemp7 ) ) { @ float root2 ; @ float root1 ; @ float discriminant ; @ float imagPart ; @ float realPart ; @ ; @ ; @ ; @ discriminant = ( *b ) * ( *b ) - 4 * ( *a ) * ( *c ) ; @ if ( discriminant > 0 ) { @ root1 = ( - ( *b ) + sqrt ( discriminant ) ) / ( 2 * ( *a ) ) ; @ root2 = ( - ( *b ) - sqrt ( discriminant ) ) / ( 2 * ( *a ) ) ; @ { @ ( *temptemp1 ) = root1 ; @ ; @ } @ { @ ( *temptemp2 ) = root2 ; @ ; @ } @ } else if ( discriminant == 0 ) { @ root1 = root2 = - ( *b ) / ( 2 * ( *a ) ) ; @ { @ ( *temptemp3 ) = root1 ; @ ; @ } @ } else { @ realPart = - ( *b ) / ( 2 * ( *a ) ) ; @ imagPart = sqrt ( -discriminant ) / ( 2 * ( *a ) ) ; @ { @ ( *temptemp4 ) = realPart ; @ ( *temptemp5 ) = imagPart ; @ ; @ } @ { @ ( *temptemp6 ) = realPart ; @ ( *temptemp7 ) = imagPart ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *gender ) , char ( *temptemp1 ) ) { @ ; @ { @ ( *temptemp1 ) = ( ( *gender ) == 'M' || ( *gender ) == 'm' ) @ ? "Male" @ : ( ( *gender ) == 'F' || ( *gender ) == 'f' ) @ ? "Female" @ : "Unspecified Gender" ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) ) { @ int j ; @ int i ; @ ; @ if ( ( *n ) < 1 ) { @ ; @ return -1 ; @ } @ for ( i = 1 ; i <= ( *n ) ; i++ ) { @ for ( j = 1 ; j <= 2 * ( *n ) ; j++ ) { @ if ( j == i || j == 2 * ( *n ) - i + 1 ) { @ ; @ } else { @ ; @ } @ } ; @ } @ for ( i = ( *n ) - 1 ; i >= 1 ; i-- ) { @ for ( j = 1 ; j <= 2 * ( *n ) ; j++ ) { @ if ( j == i || j == 2 * ( *n ) - i + 1 ) { @ ; @ } else { @ ; @ } @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *sideA ) , float ( *sideB ) , float ( *temptemp1 ) ) { @ float totalPerimeter ; @ ; @ totalPerimeter = 2 * ( ( *sideA ) + ( *sideB ) ) ; @ ; @ { @ ( *temptemp1 ) = totalPerimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *mm ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float in ; @ ; @ in = ( *mm ) / 25.4 ; @ in = ( int ) ( in * 100 + 0.5 ) / 100.0 ; @ { @ ( *temptemp1 ) = ( *mm ) ; @ ( *temptemp2 ) = in ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *choice ) , float ( *fh ) , float ( *cl ) , float ( *temptemp1 ) , @ float ( *temptemp2 ) ) { @ ; @ ; @ ; @ if ( ( *choice ) == 1 ) { @ ; @ ( *cl ) = ( ( *fh ) - 32 ) / 1.8 ; @ { @ ( *temptemp1 ) = ( *cl ) ; @ ; @ } @ } else if ( ( *choice ) == 2 ) { @ ; @ ( *fh ) = ( ( *cl ) * 1.8 ) + 32 ; @ { @ ( *temptemp2 ) = ( *fh ) ; @ ; @ } @ } else { @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *value ) , int ( *temptemp1 ) ) { @ int processedValue ; @ ; @ processedValue = ( ( *value ) >> 4 ) & 1 ; @ { @ ( *temptemp1 ) = processedValue ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *num ) ) { @ int digits = 0 ; @ int remainder ; @ int originalNum ; @ float armstrongSum = 0 ; @ ; @ if ( ( *num ) < 0 ) { @ ; @ return 0 ; @ } @ originalNum = ( *num ) ; @ do { @ digits++ ; @ originalNum /= 10 ; @ } while ( originalNum != 0 ) ; @ originalNum = ( *num ) ; @ do { @ remainder = originalNum % 10 ; @ armstrongSum += pow ( remainder , digits ) ; @ originalNum /= 10 ; @ } while ( originalNum != 0 ) ; @ if ( ( int ) armstrongSum == ( *num ) ) @ ; @ else @ ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int j ; @ int i ; @ int count = 1 ; @ for ( i = 1 ; i <= 8 ; i++ ) { @ ; @ for ( j = 1 ; j <= i ; j++ ) { @ { @ ( *temptemp1 ) = count % 2 ; @ ; @ } @ count++ ; @ } @ if ( i % 2 == 0 ) @ count = 1 ; @ else @ count = 0 ; @ } @ return ( 0 ) ; @ }
#include <stdio.h> @ @ void subtract ( int x , int y ) { @ x -= 1 ; @ y -= 1 ; @ ; @ } @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int b = 20 ; @ int a = 10 ; @ { @ ( *temptemp1 ) = a ; @ ( *temptemp2 ) = b ; @ ; @ } @ subtract ( a , b ) ; @ { @ ( *temptemp3 ) = a ; @ ( *temptemp4 ) = b ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , float ( *temptemp1 ) ) { @ int i ; @ float sum ; @ ; @ sum = 0.0f ; @ for ( i = 1 ; i <= ( *N ) ; i++ ) sum = sum + ( ( float ) 1 / ( float ) i ) ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) ) { @ ; @ int remainder = ( *number ) % 2 ; @ { @ ( *temptemp1 ) = ( *number ) ; @ ; @ } ; @ ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *principal ) , float ( *rate ) , float ( *year ) , @ float ( *temptemp1 ) ) { @ float ci ; @ ; @ ; @ ; @ ci = ( *principal ) * ( ( pow ( ( 1 + ( *rate ) / 100 ) , ( *year ) ) - 1 ) ) ; @ { @ ( *temptemp1 ) = ci ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ int k = 0 ; @ int space ; @ int j ; @ int i ; @ int rows = 5 ; @ for ( i = 1 ; i <= rows ; ++i , k = 0 ) { @ for ( space = 1 ; space <= rows - i ; ++space ) { @ ; @ } @ while ( k != 2 * i - 1 ) { @ ; @ ++k ; @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) ) { @ int nthEven = 0 ; @ int i ; @ ; @ for ( i = 1 ; i <= ( *n ) ; i++ ) { @ nthEven += 2 ; @ } ; @ { @ ( *temptemp1 ) = nthEven ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float constantPart ; @ float root3 ; @ float area ; @ ; @ root3 = sqrt ( 3 ) ; @ constantPart = 3 * root3 / 2 ; @ area = constantPart * ( *side ) * ( *side ) ; @ ; @ { @ ( *temptemp1 ) = area ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *c ) , float ( *d ) , float ( *e ) , @ float ( *temptemp1 ) ) { @ float result ; @ ; @ if ( ( *e ) == 0 ) { @ ; @ return 1 ; @ } @ result = ( *a ) + ( *b ) * ( *c ) - ( *d ) / ( *e ) ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ ; @ float surfaceArea = 4.0f * M_PI * ( *radius ) * ( *radius ) ; @ ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *temptemp1 ) , unsigned int ( *temptemp2 ) , int ( *temptemp3 ) , @ unsigned int ( *temptemp4 ) , int ( *temptemp5 ) , @ unsigned int ( *temptemp6 ) ) { @ int a [ 3 ] = { 11 , 22 , 33 } ; @ { @ ( *temptemp1 ) = a [ 0 ] ; @ ( *temptemp2 ) = &a [ 0 ] ; @ ; @ } @ { @ ( *temptemp3 ) = a [ 1 ] ; @ ( *temptemp4 ) = &a [ 1 ] ; @ ; @ } @ { @ ( *temptemp5 ) = a [ 2 ] ; @ ( *temptemp6 ) = &a [ 2 ] ; @ ; @ } @ return ( 0 ) ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ perimeter = ( *side ) * 4 ; @ ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *num ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int even ; @ int odd ; @ ; @ if ( ( *num ) & 1 ) { @ odd = ( *num ) + 1 ; @ { @ ( *temptemp1 ) = odd ; @ ; @ } @ } else { @ even = ( *num ) + 2 ; @ { @ ( *temptemp2 ) = even ; @ ; @ } @ } ; @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *n ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ ; @ if ( ( *n ) < 0 ) { @ ; @ exit ( 0 ) ; @ } @ int sum = ( *n ) * ( ( *n ) + 1 ) / 2 ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = sum ; @ ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *rad ) , float ( *ht ) , float ( *temptemp1 ) ) { @ float cylVol ; @ float areaOfCircle ; @ ; @ ; @ areaOfCircle = 3.14159 * ( *rad ) * ( *rad ) ; @ cylVol = areaOfCircle * ( *ht ) ; @ ; @ { @ ( *temptemp1 ) = cylVol ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *a ) , int ( *b ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int mul = 0 ; @ int loop ; @ int positiveResult = 1 ; @ ; @ ; @ if ( ( *a ) < 0 ) { @ ( *a ) = abs ( ( *a ) ) ; @ positiveResult = !positiveResult ; @ } @ if ( ( *b ) < 0 ) { @ ( *b ) = abs ( ( *b ) ) ; @ positiveResult = !positiveResult ; @ } @ for ( loop = 1 ; loop <= ( *b ) ; loop++ ) { @ mul += ( *a ) ; @ } @ if ( !positiveResult ) { @ mul = -mul ; @ } @ { @ ( *temptemp1 ) = ( *a ) ; @ ( *temptemp2 ) = ( *b ) ; @ ( *temptemp3 ) = mul ; @ ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( int ( *num ) ) { @ int remainder ; @ int digits = 0 ; @ int originalNum ; @ float armstrongSum = 0 ; @ ; @ if ( ( *num ) < 0 ) { @ ; @ return 0 ; @ } @ for ( originalNum = ( *num ) ; originalNum != 0 ; originalNum /= 10 , ++digits ) @ ; @ originalNum = ( *num ) ; @ while ( originalNum != 0 ) { @ remainder = originalNum % 10 ; @ armstrongSum += pow ( remainder , digits ) ; @ originalNum /= 10 ; @ } @ if ( ( int ) armstrongSum == ( *num ) ) @ ; @ else @ ; @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *s ) , float ( *h ) , float ( *temptemp1 ) ) { @ float V ; @ float A ; @ float pi = 3.14159 ; @ float oneOverTanPiOver5 ; @ float tanPart ; @ ; @ ; @ tanPart = tan ( pi / 5 ) ; @ oneOverTanPiOver5 = 1 / tanPart ; @ A = ( 5 * ( *s ) * ( *s ) * oneOverTanPiOver5 ) / 4 ; @ V = A * ( *h ) / 3 ; @ ; @ { @ ( *temptemp1 ) = V ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *r ) , int ( *temptemp1 ) ) { @ int k = 1 ; @ int j ; @ int i ; @ ; @ ; @ for ( i = 1 ; i <= ( *r ) ; i++ ) { @ for ( j = 1 ; j <= i ; j++ , k++ ) { @ ( *temptemp1 ) = k ; @ ; @ } ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *wDay ) ) { @ ; @ if ( ( *wDay ) < 0 || ( *wDay ) > 6 ) { @ ; @ return 0 ; @ } @ switch ( ( *wDay ) ) { @ case 0: ; @ break ; @ case 1: ; @ break ; @ case 2: ; @ break ; @ case 3: ; @ break ; @ case 4: ; @ break ; @ case 5: ; @ break ; @ case 6: ; @ break ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *side ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ perimeter = ( *side ) * 8 ; @ ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int globalNum = 100 ; @ void testFunction ( ) ; @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) ) { @ int localMainNum = 200 ; @ int anotherLocalMainNum = 300 ; @ { @ ( *temptemp1 ) = localMainNum ; @ ( *temptemp2 ) = anotherLocalMainNum ; @ ; @ } @ testFunction ( ) ; @ { @ ( *temptemp3 ) = anotherLocalMainNum ; @ ; @ } @ return 0 ; @ } @ void testFunction ( ) { @ int localTestNum = 400 ; @ ; @ ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *pascals ) , float ( *temptemp1 ) ) { @ float mmHg ; @ ; @ mmHg = ( *pascals ) * 0.007 ; @ { @ ( *temptemp1 ) = mmHg ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *str ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int countU ; @ int countL ; @ int counter ; @ countL = countU = 0 ; @ ; @ for ( counter = 0 ; str [ counter ] != NULL ; counter++ ) { @ if ( str [ counter ] >= 'A' && str [ counter ] <= 'Z' ) @ countU++ ; @ else if ( str [ counter ] >= 'a' && str [ counter ] <= 'z' ) @ countL++ ; @ } @ { @ ( *temptemp1 ) = countU ; @ ( *temptemp2 ) = countL ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( ) { @ int j ; @ int i ; @ for ( i = 5 ; i >= 1 ; i-- ) { @ for ( j = 1 ; j <= i ; j++ ) { @ ; @ } ; @ } @ return 0 ; @ }
#include <math.h> @ #include <stdio.h> @ @ int entry_point ( float ( *radius ) , float ( *temptemp1 ) ) { @ float pi = 3.14159 ; @ float surfaceArea ; @ float squareRadius ; @ ; @ squareRadius = ( *radius ) * ( *radius ) ; @ surfaceArea = 4 * pi * squareRadius ; @ ; @ { @ ( *temptemp1 ) = surfaceArea ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *N ) , int ( *arr ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ int ( *temptemp3 ) ) { @ int i ; @ int countOdd = 0 ; @ int countEven = 0 ; @ ; @ for ( i = 0 ; i < ( *N ) ; i++ ) { @ { @ ( *temptemp1 ) = i + 1 ; @ ; @ } @ ( arr [ i ] % 2 == 0 ) ? countEven++ : countOdd++ ; @ } @ { @ ( *temptemp2 ) = countEven ; @ ; @ } @ { @ ( *temptemp3 ) = countOdd ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int original [ 10 ] = { 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 } ; @ int copied [ 10 ] ; @ int j ; @ ; @ for ( j = 0 ; j < 10 ; j++ ) { @ copied [ j ] = original [ j ] ; @ } ; @ for ( j = 0 ; j < 10 ; j++ ) { @ { @ ( *temptemp1 ) = j + 1 ; @ ( *temptemp2 ) = copied [ j ] ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ long factorial ( int ) ; @ long find_ncr ( int , int ) ; @ long find_npr ( int , int ) ; @ int entry_point ( int ( *n ) , int ( *r ) , int ( *temptemp1 ) , int ( *temptemp2 ) , @ long int ( *temptemp3 ) , int ( *temptemp4 ) , int ( *temptemp5 ) , @ long int ( *temptemp6 ) ) { @ long ncr , npr ; @ ; @ ; @ ncr = find_ncr ( ( *n ) , ( *r ) ) ; @ npr = find_npr ( ( *n ) , ( *r ) ) ; @ { @ ( *temptemp1 ) = ( *n ) ; @ ( *temptemp2 ) = ( *r ) ; @ ( *temptemp3 ) = ncr ; @ ; @ } @ { @ ( *temptemp4 ) = ( *n ) ; @ ( *temptemp5 ) = ( *r ) ; @ ( *temptemp6 ) = npr ; @ ; @ } @ return 0 ; @ } @ long find_ncr ( int n , int r ) { @ long result ; @ result = factorial ( n ) / ( factorial ( r ) * factorial ( n - r ) ) ; @ return result ; @ } @ long find_npr ( int n , int r ) { @ long result ; @ result = factorial ( n ) / factorial ( n - r ) ; @ return result ; @ } @ long factorial ( int n ) { @ int c ; @ long result = 1 ; @ for ( c = 1 ; c <= n ; c++ ) result = result * c ; @ return result ; @ }
#include <stdio.h> @ #include <stdlib.h> @ @ int entry_point ( int ( *maxRows ) ) { @ int maxCols ; @ ; @ if ( ( *maxRows ) < 1 ) { @ ; @ exit ( 0 ) ; @ } @ maxCols = ( *maxRows ) ; @ puts ( "\n--------------------------------------------\n" ) ; @ int row = 1 ; @ { @ int col = 1 ; @ { @ if ( col == 1 || col == maxCols || row == 1 || row == ( *maxRows ) ) @ ; @ else @ ; @ } ; @ } ; @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *number ) , int ( *temptemp1 ) , int ( *temptemp2 ) ) { @ int temp ; @ int result ; @ ; @ temp = ( *number ) ; @ do { @ if ( temp < 7 ) break ; @ temp -= 7 ; @ } while ( temp >= 7 ) ; @ if ( temp == 0 ) { @ result = ( *number ) + 1 ; @ { @ ( *temptemp1 ) = result ; @ ; @ } @ } else { @ result = ( *number ) + 2 ; @ { @ ( *temptemp2 ) = result ; @ ; @ } @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *a ) , float ( *b ) , float ( *temptemp1 ) ) { @ float perimeter ; @ ; @ ; @ perimeter = 2 * ( ( *a ) + ( *b ) ) ; @ { @ ( *temptemp1 ) = perimeter ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *temptemp1 ) ) { @ char letters [ ] = { 'A' , '\n' , 'B' , '\n' , 'C' , '\n' , 'D' , '\n' , '\0' } ; @ { @ ( *temptemp1 ) = letters ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( char ( *line ) , int ( *temptemp1 ) , int ( *temptemp2 ) , int ( *temptemp3 ) , @ int ( *temptemp4 ) ) { @ int o ; @ int s ; @ int d ; @ int ch ; @ int c ; @ int v ; @ int i ; @ o = v = c = ch = d = s = 0 ; @ ; @ for ( i = 0 ; line [ i ] != '\0' ; ++i ) { @ if ( line [ i ] == 'a' || line [ i ] == 'e' || line [ i ] == 'i' || line [ i ] == 'o' || @ line [ i ] == 'u' || line [ i ] == 'A' || line [ i ] == 'E' || line [ i ] == 'I' || @ line [ i ] == 'O' || line [ i ] == 'U' ) @ ++v ; @ else if ( ( line [ i ] >= 'a' && line [ i ] <= 'z' ) || @ ( line [ i ] >= 'A' && line [ i ] <= 'Z' ) ) @ ++c ; @ else if ( line [ i ] >= '0' && line [ i ] <= '9' ) @ ++d ; @ else if ( line [ i ] == ' ' ) @ ++s ; @ } @ { @ ( *temptemp1 ) = v ; @ ; @ } @ { @ ( *temptemp2 ) = c ; @ ; @ } @ { @ ( *temptemp3 ) = d ; @ ; @ } @ { @ ( *temptemp4 ) = s ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( int ( *temptemp1 ) ) { @ int sum ; @ int b = 20 ; @ int a = 10 ; @ sum = a + b ; @ ; @ { @ ( *temptemp1 ) = sum ; @ ; @ } @ return 0 ; @ }
#include <stdio.h> @ @ int entry_point ( float ( *yards ) , float ( *temptemp1 ) , float ( *temptemp2 ) ) { @ float miles ; @ ; @ miles = ( *yards ) / 1760.0 ; @ { @ ( *temptemp1 ) = ( *yards ) ; @ ( *temptemp2 ) = miles ; @ ; @ } @ return 0 ; @ }
